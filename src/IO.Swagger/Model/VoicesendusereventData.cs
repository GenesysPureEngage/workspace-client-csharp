/* 
 * Workspace Application API
 *
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VoicesendusereventData
    /// </summary>
    [DataContract]
    public partial class VoicesendusereventData :  IEquatable<VoicesendusereventData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoicesendusereventData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VoicesendusereventData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VoicesendusereventData" /> class.
        /// </summary>
        /// <param name="UserData">UserData (required).</param>
        /// <param name="CallId">CallId.</param>
        public VoicesendusereventData(List<Kvpair> UserData = default(List<Kvpair>), string CallId = default(string))
        {
            // to ensure "UserData" is required (not null)
            if (UserData == null)
            {
                throw new InvalidDataException("UserData is a required property for VoicesendusereventData and cannot be null");
            }
            else
            {
                this.UserData = UserData;
            }
            this.CallId = CallId;
        }
        
        /// <summary>
        /// Gets or Sets UserData
        /// </summary>
        [DataMember(Name="userData", EmitDefaultValue=false)]
        public List<Kvpair> UserData { get; set; }
        /// <summary>
        /// Gets or Sets CallId
        /// </summary>
        [DataMember(Name="callId", EmitDefaultValue=false)]
        public string CallId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoicesendusereventData {\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VoicesendusereventData);
        }

        /// <summary>
        /// Returns true if VoicesendusereventData instances are equal
        /// </summary>
        /// <param name="other">Instance of VoicesendusereventData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoicesendusereventData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserData == other.UserData ||
                    this.UserData != null &&
                    this.UserData.SequenceEqual(other.UserData)
                ) && 
                (
                    this.CallId == other.CallId ||
                    this.CallId != null &&
                    this.CallId.Equals(other.CallId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserData != null)
                    hash = hash * 59 + this.UserData.GetHashCode();
                if (this.CallId != null)
                    hash = hash * 59 + this.CallId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
