/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// UcsresponsesidreportusageData
    /// </summary>
    [DataContract]
    public partial class UcsresponsesidreportusageData :  IEquatable<UcsresponsesidreportusageData>, IValidatableObject
    {
        /// <summary>
        /// standard response usage type
        /// </summary>
        /// <value>standard response usage type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseTypeEnum
        {
            
            /// <summary>
            /// Enum SystemAutoResponse for "SystemAutoResponse"
            /// </summary>
            [EnumMember(Value = "SystemAutoResponse")]
            SystemAutoResponse,
            
            /// <summary>
            /// Enum SuggestedResponsesIgnored for "SuggestedResponsesIgnored"
            /// </summary>
            [EnumMember(Value = "SuggestedResponsesIgnored")]
            SuggestedResponsesIgnored,
            
            /// <summary>
            /// Enum SuggestedResponseChoosen for "SuggestedResponseChoosen"
            /// </summary>
            [EnumMember(Value = "SuggestedResponseChoosen")]
            SuggestedResponseChoosen,
            
            /// <summary>
            /// Enum SuggestedResponseNotReceived for "SuggestedResponseNotReceived"
            /// </summary>
            [EnumMember(Value = "SuggestedResponseNotReceived")]
            SuggestedResponseNotReceived,
            
            /// <summary>
            /// Enum AdministratorResponse for "AdministratorResponse"
            /// </summary>
            [EnumMember(Value = "AdministratorResponse")]
            AdministratorResponse
        }

        /// <summary>
        /// standard response usage type
        /// </summary>
        /// <value>standard response usage type</value>
        [DataMember(Name="responseType", EmitDefaultValue=false)]
        public ResponseTypeEnum? ResponseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UcsresponsesidreportusageData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UcsresponsesidreportusageData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UcsresponsesidreportusageData" /> class.
        /// </summary>
        /// <param name="InteractionId">id of the interaction (required).</param>
        /// <param name="ResponseType">standard response usage type.</param>
        public UcsresponsesidreportusageData(string InteractionId = default(string), ResponseTypeEnum? ResponseType = default(ResponseTypeEnum?))
        {
            // to ensure "InteractionId" is required (not null)
            if (InteractionId == null)
            {
                throw new InvalidDataException("InteractionId is a required property for UcsresponsesidreportusageData and cannot be null");
            }
            else
            {
                this.InteractionId = InteractionId;
            }
            this.ResponseType = ResponseType;
        }
        
        /// <summary>
        /// id of the interaction
        /// </summary>
        /// <value>id of the interaction</value>
        [DataMember(Name="interactionId", EmitDefaultValue=false)]
        public string InteractionId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UcsresponsesidreportusageData {\n");
            sb.Append("  InteractionId: ").Append(InteractionId).Append("\n");
            sb.Append("  ResponseType: ").Append(ResponseType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UcsresponsesidreportusageData);
        }

        /// <summary>
        /// Returns true if UcsresponsesidreportusageData instances are equal
        /// </summary>
        /// <param name="other">Instance of UcsresponsesidreportusageData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UcsresponsesidreportusageData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InteractionId == other.InteractionId ||
                    this.InteractionId != null &&
                    this.InteractionId.Equals(other.InteractionId)
                ) && 
                (
                    this.ResponseType == other.ResponseType ||
                    this.ResponseType != null &&
                    this.ResponseType.Equals(other.ResponseType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InteractionId != null)
                    hash = hash * 59 + this.InteractionId.GetHashCode();
                if (this.ResponseType != null)
                    hash = hash * 59 + this.ResponseType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
