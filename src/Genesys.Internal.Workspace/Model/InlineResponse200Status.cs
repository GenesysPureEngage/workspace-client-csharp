/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// InlineResponse200Status
    /// </summary>
    [DataContract]
    public partial class InlineResponse200Status :  IEquatable<InlineResponse200Status>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200Status" /> class.
        /// </summary>
        /// <param name="Code">Indicates whether the operation was successful. &#x60;0&#x60; is a successful synchronous operation;  &#x60;1&#x60; is a successful asynchronous operation; and &#x60;2&#x60; is a partially successful synchronous  operation. If the value is &#x60;2&#x60; the response includes **data** and **error** objects. All  other status codes indicate an error and include a **message** object. See  (Getting started)[/reference/] for more information about responses and errors..</param>
        /// <param name="Message">Provides general information when a request returns an error response. For example, if your  request returns a response with error code &#x60;500&#x60; the message might be &#x60;Resource not found.&#x60;  See (Getting started)[/reference/] for more information about responses and errors..</param>
        public InlineResponse200Status(int? Code = default(int?), string Message = default(string))
        {
            this.Code = Code;
            this.Message = Message;
        }
        
        /// <summary>
        /// Indicates whether the operation was successful. &#x60;0&#x60; is a successful synchronous operation;  &#x60;1&#x60; is a successful asynchronous operation; and &#x60;2&#x60; is a partially successful synchronous  operation. If the value is &#x60;2&#x60; the response includes **data** and **error** objects. All  other status codes indicate an error and include a **message** object. See  (Getting started)[/reference/] for more information about responses and errors.
        /// </summary>
        /// <value>Indicates whether the operation was successful. &#x60;0&#x60; is a successful synchronous operation;  &#x60;1&#x60; is a successful asynchronous operation; and &#x60;2&#x60; is a partially successful synchronous  operation. If the value is &#x60;2&#x60; the response includes **data** and **error** objects. All  other status codes indicate an error and include a **message** object. See  (Getting started)[/reference/] for more information about responses and errors.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int? Code { get; set; }

        /// <summary>
        /// Provides general information when a request returns an error response. For example, if your  request returns a response with error code &#x60;500&#x60; the message might be &#x60;Resource not found.&#x60;  See (Getting started)[/reference/] for more information about responses and errors.
        /// </summary>
        /// <value>Provides general information when a request returns an error response. For example, if your  request returns a response with error code &#x60;500&#x60; the message might be &#x60;Resource not found.&#x60;  See (Getting started)[/reference/] for more information about responses and errors.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200Status {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200Status);
        }

        /// <summary>
        /// Returns true if InlineResponse200Status instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200Status to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200Status input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
