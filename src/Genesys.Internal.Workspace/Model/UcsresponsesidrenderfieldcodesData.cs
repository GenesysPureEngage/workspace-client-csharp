/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// UcsresponsesidrenderfieldcodesData
    /// </summary>
    [DataContract]
    public partial class UcsresponsesidrenderfieldcodesData :  IEquatable<UcsresponsesidrenderfieldcodesData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UcsresponsesidrenderfieldcodesData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UcsresponsesidrenderfieldcodesData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UcsresponsesidrenderfieldcodesData" /> class.
        /// </summary>
        /// <param name="InteractionId">id of the interaction (required).</param>
        /// <param name="UsePlainText">true to use Plain Text.</param>
        /// <param name="CustomProperties">A key/value pairs list of the custom properties to render..</param>
        /// <param name="AgentCustomProperties">A key/value pairs list of the agent custom properties to render..</param>
        public UcsresponsesidrenderfieldcodesData(string InteractionId = default(string), bool? UsePlainText = default(bool?), List<Kvpair> CustomProperties = default(List<Kvpair>), List<Kvpair> AgentCustomProperties = default(List<Kvpair>))
        {
            // to ensure "InteractionId" is required (not null)
            if (InteractionId == null)
            {
                throw new InvalidDataException("InteractionId is a required property for UcsresponsesidrenderfieldcodesData and cannot be null");
            }
            else
            {
                this.InteractionId = InteractionId;
            }
            this.UsePlainText = UsePlainText;
            this.CustomProperties = CustomProperties;
            this.AgentCustomProperties = AgentCustomProperties;
        }
        
        /// <summary>
        /// id of the interaction
        /// </summary>
        /// <value>id of the interaction</value>
        [DataMember(Name="interactionId", EmitDefaultValue=false)]
        public string InteractionId { get; set; }

        /// <summary>
        /// true to use Plain Text
        /// </summary>
        /// <value>true to use Plain Text</value>
        [DataMember(Name="usePlainText", EmitDefaultValue=false)]
        public bool? UsePlainText { get; set; }

        /// <summary>
        /// A key/value pairs list of the custom properties to render.
        /// </summary>
        /// <value>A key/value pairs list of the custom properties to render.</value>
        [DataMember(Name="customProperties", EmitDefaultValue=false)]
        public List<Kvpair> CustomProperties { get; set; }

        /// <summary>
        /// A key/value pairs list of the agent custom properties to render.
        /// </summary>
        /// <value>A key/value pairs list of the agent custom properties to render.</value>
        [DataMember(Name="agentCustomProperties", EmitDefaultValue=false)]
        public List<Kvpair> AgentCustomProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UcsresponsesidrenderfieldcodesData {\n");
            sb.Append("  InteractionId: ").Append(InteractionId).Append("\n");
            sb.Append("  UsePlainText: ").Append(UsePlainText).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("  AgentCustomProperties: ").Append(AgentCustomProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UcsresponsesidrenderfieldcodesData);
        }

        /// <summary>
        /// Returns true if UcsresponsesidrenderfieldcodesData instances are equal
        /// </summary>
        /// <param name="input">Instance of UcsresponsesidrenderfieldcodesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UcsresponsesidrenderfieldcodesData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InteractionId == input.InteractionId ||
                    (this.InteractionId != null &&
                    this.InteractionId.Equals(input.InteractionId))
                ) && 
                (
                    this.UsePlainText == input.UsePlainText ||
                    (this.UsePlainText != null &&
                    this.UsePlainText.Equals(input.UsePlainText))
                ) && 
                (
                    this.CustomProperties == input.CustomProperties ||
                    this.CustomProperties != null &&
                    this.CustomProperties.SequenceEqual(input.CustomProperties)
                ) && 
                (
                    this.AgentCustomProperties == input.AgentCustomProperties ||
                    this.AgentCustomProperties != null &&
                    this.AgentCustomProperties.SequenceEqual(input.AgentCustomProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InteractionId != null)
                    hashCode = hashCode * 59 + this.InteractionId.GetHashCode();
                if (this.UsePlainText != null)
                    hashCode = hashCode * 59 + this.UsePlainText.GetHashCode();
                if (this.CustomProperties != null)
                    hashCode = hashCode * 59 + this.CustomProperties.GetHashCode();
                if (this.AgentCustomProperties != null)
                    hashCode = hashCode * 59 + this.AgentCustomProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
