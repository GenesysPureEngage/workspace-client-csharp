/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediamediatypestartmonitoringData
    /// </summary>
    [DataContract]
    public partial class MediamediatypestartmonitoringData :  IEquatable<MediamediatypestartmonitoringData>, IValidatableObject
    {
        /// <summary>
        /// The monitoring mode.
        /// </summary>
        /// <value>The monitoring mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MonitoringModeEnum
        {
            
            /// <summary>
            /// Enum Monitor for "Monitor"
            /// </summary>
            [EnumMember(Value = "Monitor")]
            Monitor,
            
            /// <summary>
            /// Enum Coach for "Coach"
            /// </summary>
            [EnumMember(Value = "Coach")]
            Coach,
            
            /// <summary>
            /// Enum Bargin for "Bargin"
            /// </summary>
            [EnumMember(Value = "Bargin")]
            Bargin
        }

        /// <summary>
        /// The monitoring interaction type.
        /// </summary>
        /// <value>The monitoring interaction type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MonitoringNextInterationTypeEnum
        {
            
            /// <summary>
            /// Enum NextInteraction for "NextInteraction"
            /// </summary>
            [EnumMember(Value = "NextInteraction")]
            NextInteraction,
            
            /// <summary>
            /// Enum AllInteractions for "AllInteractions"
            /// </summary>
            [EnumMember(Value = "AllInteractions")]
            AllInteractions
        }

        /// <summary>
        /// The monitoring mode.
        /// </summary>
        /// <value>The monitoring mode.</value>
        [DataMember(Name="monitoringMode", EmitDefaultValue=false)]
        public MonitoringModeEnum? MonitoringMode { get; set; }
        /// <summary>
        /// The monitoring interaction type.
        /// </summary>
        /// <value>The monitoring interaction type.</value>
        [DataMember(Name="monitoringNextInterationType", EmitDefaultValue=false)]
        public MonitoringNextInterationTypeEnum? MonitoringNextInterationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamediatypestartmonitoringData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediamediatypestartmonitoringData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamediatypestartmonitoringData" /> class.
        /// </summary>
        /// <param name="AgentId">The unique ID of the agent to monitor. (required).</param>
        /// <param name="MonitoringMode">The monitoring mode. (required).</param>
        /// <param name="MonitoringNextInterationType">The monitoring interaction type. (required).</param>
        public MediamediatypestartmonitoringData(string AgentId = default(string), MonitoringModeEnum? MonitoringMode = default(MonitoringModeEnum?), MonitoringNextInterationTypeEnum? MonitoringNextInterationType = default(MonitoringNextInterationTypeEnum?))
        {
            // to ensure "AgentId" is required (not null)
            if (AgentId == null)
            {
                throw new InvalidDataException("AgentId is a required property for MediamediatypestartmonitoringData and cannot be null");
            }
            else
            {
                this.AgentId = AgentId;
            }
            // to ensure "MonitoringMode" is required (not null)
            if (MonitoringMode == null)
            {
                throw new InvalidDataException("MonitoringMode is a required property for MediamediatypestartmonitoringData and cannot be null");
            }
            else
            {
                this.MonitoringMode = MonitoringMode;
            }
            // to ensure "MonitoringNextInterationType" is required (not null)
            if (MonitoringNextInterationType == null)
            {
                throw new InvalidDataException("MonitoringNextInterationType is a required property for MediamediatypestartmonitoringData and cannot be null");
            }
            else
            {
                this.MonitoringNextInterationType = MonitoringNextInterationType;
            }
        }
        
        /// <summary>
        /// The unique ID of the agent to monitor.
        /// </summary>
        /// <value>The unique ID of the agent to monitor.</value>
        [DataMember(Name="agentId", EmitDefaultValue=false)]
        public string AgentId { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediamediatypestartmonitoringData {\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  MonitoringMode: ").Append(MonitoringMode).Append("\n");
            sb.Append("  MonitoringNextInterationType: ").Append(MonitoringNextInterationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MediamediatypestartmonitoringData);
        }

        /// <summary>
        /// Returns true if MediamediatypestartmonitoringData instances are equal
        /// </summary>
        /// <param name="other">Instance of MediamediatypestartmonitoringData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediamediatypestartmonitoringData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AgentId == other.AgentId ||
                    this.AgentId != null &&
                    this.AgentId.Equals(other.AgentId)
                ) && 
                (
                    this.MonitoringMode == other.MonitoringMode ||
                    this.MonitoringMode != null &&
                    this.MonitoringMode.Equals(other.MonitoringMode)
                ) && 
                (
                    this.MonitoringNextInterationType == other.MonitoringNextInterationType ||
                    this.MonitoringNextInterationType != null &&
                    this.MonitoringNextInterationType.Equals(other.MonitoringNextInterationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AgentId != null)
                    hash = hash * 59 + this.AgentId.GetHashCode();
                if (this.MonitoringMode != null)
                    hash = hash * 59 + this.MonitoringMode.GetHashCode();
                if (this.MonitoringNextInterationType != null)
                    hash = hash * 59 + this.MonitoringNextInterationType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
