/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.24.2336
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediamediatypeinteractionsidadddocumentData
    /// </summary>
    [DataContract]
    public partial class MediamediatypeinteractionsidadddocumentData :  IEquatable<MediamediatypeinteractionsidadddocumentData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamediatypeinteractionsidadddocumentData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediamediatypeinteractionsidadddocumentData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamediatypeinteractionsidadddocumentData" /> class.
        /// </summary>
        /// <param name="DocumentId">The id of the document to be added. (required).</param>
        /// <param name="Size">The size of the document to be added..</param>
        /// <param name="Mime">The mime type of the document to be added..</param>
        /// <param name="Name">The name of the document to be added..</param>
        public MediamediatypeinteractionsidadddocumentData(string DocumentId = default(string), decimal? Size = default(decimal?), string Mime = default(string), string Name = default(string))
        {
            // to ensure "DocumentId" is required (not null)
            if (DocumentId == null)
            {
                throw new InvalidDataException("DocumentId is a required property for MediamediatypeinteractionsidadddocumentData and cannot be null");
            }
            else
            {
                this.DocumentId = DocumentId;
            }
            this.Size = Size;
            this.Mime = Mime;
            this.Name = Name;
        }
        
        /// <summary>
        /// The id of the document to be added.
        /// </summary>
        /// <value>The id of the document to be added.</value>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// The size of the document to be added.
        /// </summary>
        /// <value>The size of the document to be added.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal? Size { get; set; }

        /// <summary>
        /// The mime type of the document to be added.
        /// </summary>
        /// <value>The mime type of the document to be added.</value>
        [DataMember(Name="mime", EmitDefaultValue=false)]
        public string Mime { get; set; }

        /// <summary>
        /// The name of the document to be added.
        /// </summary>
        /// <value>The name of the document to be added.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediamediatypeinteractionsidadddocumentData {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediamediatypeinteractionsidadddocumentData);
        }

        /// <summary>
        /// Returns true if MediamediatypeinteractionsidadddocumentData instances are equal
        /// </summary>
        /// <param name="input">Instance of MediamediatypeinteractionsidadddocumentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediamediatypeinteractionsidadddocumentData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Mime == input.Mime ||
                    (this.Mime != null &&
                    this.Mime.Equals(input.Mime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                    hashCode = hashCode * 59 + this.DocumentId.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Mime != null)
                    hashCode = hashCode * 59 + this.Mime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
