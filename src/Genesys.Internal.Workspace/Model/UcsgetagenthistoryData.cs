/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// UcsgetagenthistoryData
    /// </summary>
    [DataContract]
    public partial class UcsgetagenthistoryData :  IEquatable<UcsgetagenthistoryData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UcsgetagenthistoryData" /> class.
        /// </summary>
        /// <param name="CustomAttributes">The list of custom contact attributes to be returned for each interaction.</param>
        /// <param name="Sort">The sorting order (desc or asc).</param>
        /// <param name="FromDate">The date from which the interactions should be retrieved (UCS format).</param>
        /// <param name="ToDate">The date to which the interactions should be retrieved (UCS format).</param>
        /// <param name="UserId">The id of the agent for which the interactions should be retrieved (if not set, current user is used).</param>
        public UcsgetagenthistoryData(List<string> CustomAttributes = default(List<string>), string Sort = default(string), string FromDate = default(string), string ToDate = default(string), string UserId = default(string))
        {
            this.CustomAttributes = CustomAttributes;
            this.Sort = Sort;
            this.FromDate = FromDate;
            this.ToDate = ToDate;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// The list of custom contact attributes to be returned for each interaction
        /// </summary>
        /// <value>The list of custom contact attributes to be returned for each interaction</value>
        [DataMember(Name="customAttributes", EmitDefaultValue=false)]
        public List<string> CustomAttributes { get; set; }

        /// <summary>
        /// The sorting order (desc or asc)
        /// </summary>
        /// <value>The sorting order (desc or asc)</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }

        /// <summary>
        /// The date from which the interactions should be retrieved (UCS format)
        /// </summary>
        /// <value>The date from which the interactions should be retrieved (UCS format)</value>
        [DataMember(Name="fromDate", EmitDefaultValue=false)]
        public string FromDate { get; set; }

        /// <summary>
        /// The date to which the interactions should be retrieved (UCS format)
        /// </summary>
        /// <value>The date to which the interactions should be retrieved (UCS format)</value>
        [DataMember(Name="toDate", EmitDefaultValue=false)]
        public string ToDate { get; set; }

        /// <summary>
        /// The id of the agent for which the interactions should be retrieved (if not set, current user is used)
        /// </summary>
        /// <value>The id of the agent for which the interactions should be retrieved (if not set, current user is used)</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UcsgetagenthistoryData {\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UcsgetagenthistoryData);
        }

        /// <summary>
        /// Returns true if UcsgetagenthistoryData instances are equal
        /// </summary>
        /// <param name="input">Instance of UcsgetagenthistoryData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UcsgetagenthistoryData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomAttributes == input.CustomAttributes ||
                    this.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(input.CustomAttributes)
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                ) && 
                (
                    this.ToDate == input.ToDate ||
                    (this.ToDate != null &&
                    this.ToDate.Equals(input.ToDate))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomAttributes != null)
                    hashCode = hashCode * 59 + this.CustomAttributes.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.FromDate != null)
                    hashCode = hashCode * 59 + this.FromDate.GetHashCode();
                if (this.ToDate != null)
                    hashCode = hashCode * 59 + this.ToDate.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
