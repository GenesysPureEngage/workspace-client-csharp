/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: v9.0.000.20.2204
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// TargetsResponseData
    /// </summary>
    [DataContract]
    public partial class TargetsResponseData :  IEquatable<TargetsResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetsResponseData" /> class.
        /// </summary>
        /// <param name="Targets">An array containing target results.</param>
        /// <param name="TotalMatches">The total number of matches to the query..</param>
        public TargetsResponseData(List<Target> Targets = default(List<Target>), int? TotalMatches = default(int?))
        {
            this.Targets = Targets;
            this.TotalMatches = TotalMatches;
        }
        
        /// <summary>
        /// An array containing target results
        /// </summary>
        /// <value>An array containing target results</value>
        [DataMember(Name="targets", EmitDefaultValue=false)]
        public List<Target> Targets { get; set; }

        /// <summary>
        /// The total number of matches to the query.
        /// </summary>
        /// <value>The total number of matches to the query.</value>
        [DataMember(Name="totalMatches", EmitDefaultValue=false)]
        public int? TotalMatches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetsResponseData {\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  TotalMatches: ").Append(TotalMatches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetsResponseData);
        }

        /// <summary>
        /// Returns true if TargetsResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetsResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetsResponseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                ) && 
                (
                    this.TotalMatches == input.TotalMatches ||
                    (this.TotalMatches != null &&
                    this.TotalMatches.Equals(input.TotalMatches))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Targets != null)
                    hashCode = hashCode * 59 + this.Targets.GetHashCode();
                if (this.TotalMatches != null)
                    hashCode = hashCode * 59 + this.TotalMatches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
