/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// VoicenotreadyData
    /// </summary>
    [DataContract]
    public partial class VoicenotreadyData :  IEquatable<VoicenotreadyData>, IValidatableObject
    {
        /// <summary>
        /// The agent workmode.
        /// </summary>
        /// <value>The agent workmode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AgentWorkModeEnum
        {
            
            /// <summary>
            /// Enum AfterCallWork for "AfterCallWork"
            /// </summary>
            [EnumMember(Value = "AfterCallWork")]
            AfterCallWork = 1,
            
            /// <summary>
            /// Enum AuxWork for "AuxWork"
            /// </summary>
            [EnumMember(Value = "AuxWork")]
            AuxWork = 2,
            
            /// <summary>
            /// Enum LegalGuard for "LegalGuard"
            /// </summary>
            [EnumMember(Value = "LegalGuard")]
            LegalGuard = 3,
            
            /// <summary>
            /// Enum NoCallDisconnect for "NoCallDisconnect"
            /// </summary>
            [EnumMember(Value = "NoCallDisconnect")]
            NoCallDisconnect = 4,
            
            /// <summary>
            /// Enum WalkAway for "WalkAway"
            /// </summary>
            [EnumMember(Value = "WalkAway")]
            WalkAway = 5
        }

        /// <summary>
        /// The agent workmode.
        /// </summary>
        /// <value>The agent workmode.</value>
        [DataMember(Name="agentWorkMode", EmitDefaultValue=false)]
        public AgentWorkModeEnum? AgentWorkMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VoicenotreadyData" /> class.
        /// </summary>
        /// <param name="ReasonCode">The reason code representing why the agent is not ready. These codes are a business-defined set of categories, such as \&quot;Lunch\&quot; or \&quot;Training\&quot;..</param>
        /// <param name="AgentWorkMode">The agent workmode..</param>
        /// <param name="Reasons">A collection of key/value pairs. For details about reasons, refer to the [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System)..</param>
        /// <param name="Extensions">A collection of key/value pairs. For details about extensions, refer to the [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System)..</param>
        public VoicenotreadyData(string ReasonCode = default(string), AgentWorkModeEnum? AgentWorkMode = default(AgentWorkModeEnum?), List<Kvpair> Reasons = default(List<Kvpair>), List<Kvpair> Extensions = default(List<Kvpair>))
        {
            this.ReasonCode = ReasonCode;
            this.AgentWorkMode = AgentWorkMode;
            this.Reasons = Reasons;
            this.Extensions = Extensions;
        }
        
        /// <summary>
        /// The reason code representing why the agent is not ready. These codes are a business-defined set of categories, such as \&quot;Lunch\&quot; or \&quot;Training\&quot;.
        /// </summary>
        /// <value>The reason code representing why the agent is not ready. These codes are a business-defined set of categories, such as \&quot;Lunch\&quot; or \&quot;Training\&quot;.</value>
        [DataMember(Name="reasonCode", EmitDefaultValue=false)]
        public string ReasonCode { get; set; }


        /// <summary>
        /// A collection of key/value pairs. For details about reasons, refer to the [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </summary>
        /// <value>A collection of key/value pairs. For details about reasons, refer to the [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).</value>
        [DataMember(Name="reasons", EmitDefaultValue=false)]
        public List<Kvpair> Reasons { get; set; }

        /// <summary>
        /// A collection of key/value pairs. For details about extensions, refer to the [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </summary>
        /// <value>A collection of key/value pairs. For details about extensions, refer to the [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).</value>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public List<Kvpair> Extensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoicenotreadyData {\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  AgentWorkMode: ").Append(AgentWorkMode).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoicenotreadyData);
        }

        /// <summary>
        /// Returns true if VoicenotreadyData instances are equal
        /// </summary>
        /// <param name="input">Instance of VoicenotreadyData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoicenotreadyData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) && 
                (
                    this.AgentWorkMode == input.AgentWorkMode ||
                    (this.AgentWorkMode != null &&
                    this.AgentWorkMode.Equals(input.AgentWorkMode))
                ) && 
                (
                    this.Reasons == input.Reasons ||
                    this.Reasons != null &&
                    this.Reasons.SequenceEqual(input.Reasons)
                ) && 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.AgentWorkMode != null)
                    hashCode = hashCode * 59 + this.AgentWorkMode.GetHashCode();
                if (this.Reasons != null)
                    hashCode = hashCode * 59 + this.Reasons.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
