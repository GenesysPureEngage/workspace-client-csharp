/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.24.2336
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediamanagementgetsnapshotData
    /// </summary>
    [DataContract]
    public partial class MediamanagementgetsnapshotData :  IEquatable<MediamanagementgetsnapshotData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamanagementgetsnapshotData" /> class.
        /// </summary>
        /// <param name="Condition">The condition of snapshot.</param>
        /// <param name="StartIndex">The start index..</param>
        /// <param name="Size">The number of elements.</param>
        /// <param name="Order">The pivot attribute for ordering the snappshot, following by the sorting order (DESC or ASC).</param>
        public MediamanagementgetsnapshotData(string Condition = default(string), decimal? StartIndex = default(decimal?), decimal? Size = default(decimal?), string Order = default(string))
        {
            this.Condition = Condition;
            this.StartIndex = StartIndex;
            this.Size = Size;
            this.Order = Order;
        }
        
        /// <summary>
        /// The condition of snapshot
        /// </summary>
        /// <value>The condition of snapshot</value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }

        /// <summary>
        /// The start index.
        /// </summary>
        /// <value>The start index.</value>
        [DataMember(Name="startIndex", EmitDefaultValue=false)]
        public decimal? StartIndex { get; set; }

        /// <summary>
        /// The number of elements
        /// </summary>
        /// <value>The number of elements</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal? Size { get; set; }

        /// <summary>
        /// The pivot attribute for ordering the snappshot, following by the sorting order (DESC or ASC)
        /// </summary>
        /// <value>The pivot attribute for ordering the snappshot, following by the sorting order (DESC or ASC)</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediamanagementgetsnapshotData {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediamanagementgetsnapshotData);
        }

        /// <summary>
        /// Returns true if MediamanagementgetsnapshotData instances are equal
        /// </summary>
        /// <param name="input">Instance of MediamanagementgetsnapshotData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediamanagementgetsnapshotData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.StartIndex == input.StartIndex ||
                    (this.StartIndex != null &&
                    this.StartIndex.Equals(input.StartIndex))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.StartIndex != null)
                    hashCode = hashCode * 59 + this.StartIndex.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
