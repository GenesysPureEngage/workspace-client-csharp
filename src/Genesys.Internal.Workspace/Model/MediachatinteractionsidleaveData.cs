/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediachatinteractionsidleaveData
    /// </summary>
    [DataContract]
    public partial class MediachatinteractionsidleaveData :  IEquatable<MediachatinteractionsidleaveData>, IValidatableObject
    {
        /// <summary>
        /// the action to take after leave
        /// </summary>
        /// <value>the action to take after leave</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AfterActionEnum
        {
            
            /// <summary>
            /// Enum CloseIfNoAgents for "CloseIfNoAgents"
            /// </summary>
            [EnumMember(Value = "CloseIfNoAgents")]
            CloseIfNoAgents = 1,
            
            /// <summary>
            /// Enum ForceClose for "ForceClose"
            /// </summary>
            [EnumMember(Value = "ForceClose")]
            ForceClose = 2,
            
            /// <summary>
            /// Enum KeepAlive for "KeepAlive"
            /// </summary>
            [EnumMember(Value = "KeepAlive")]
            KeepAlive = 3
        }

        /// <summary>
        /// the action to take after leave
        /// </summary>
        /// <value>the action to take after leave</value>
        [DataMember(Name="afterAction", EmitDefaultValue=false)]
        public AfterActionEnum? AfterAction { get; set; }
        /// <summary>
        /// how message should be treated
        /// </summary>
        /// <value>how message should be treated</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TreatAsEnum
        {
            
            /// <summary>
            /// Enum Normal for "Normal"
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 1,
            
            /// <summary>
            /// Enum System for "System"
            /// </summary>
            [EnumMember(Value = "System")]
            System = 2
        }

        /// <summary>
        /// how message should be treated
        /// </summary>
        /// <value>how message should be treated</value>
        [DataMember(Name="treatAs", EmitDefaultValue=false)]
        public TreatAsEnum? TreatAs { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediachatinteractionsidleaveData" /> class.
        /// </summary>
        /// <param name="AfterAction">the action to take after leave.</param>
        /// <param name="Message">the message to send to the chat.</param>
        /// <param name="MessageType">arbitrary type of message.</param>
        /// <param name="TreatAs">how message should be treated.</param>
        public MediachatinteractionsidleaveData(AfterActionEnum? AfterAction = default(AfterActionEnum?), string Message = default(string), string MessageType = default(string), TreatAsEnum? TreatAs = default(TreatAsEnum?))
        {
            this.AfterAction = AfterAction;
            this.Message = Message;
            this.MessageType = MessageType;
            this.TreatAs = TreatAs;
        }
        

        /// <summary>
        /// the message to send to the chat
        /// </summary>
        /// <value>the message to send to the chat</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// arbitrary type of message
        /// </summary>
        /// <value>arbitrary type of message</value>
        [DataMember(Name="messageType", EmitDefaultValue=false)]
        public string MessageType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediachatinteractionsidleaveData {\n");
            sb.Append("  AfterAction: ").Append(AfterAction).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  TreatAs: ").Append(TreatAs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediachatinteractionsidleaveData);
        }

        /// <summary>
        /// Returns true if MediachatinteractionsidleaveData instances are equal
        /// </summary>
        /// <param name="input">Instance of MediachatinteractionsidleaveData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediachatinteractionsidleaveData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AfterAction == input.AfterAction ||
                    (this.AfterAction != null &&
                    this.AfterAction.Equals(input.AfterAction))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.TreatAs == input.TreatAs ||
                    (this.TreatAs != null &&
                    this.TreatAs.Equals(input.TreatAs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AfterAction != null)
                    hashCode = hashCode * 59 + this.AfterAction.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.TreatAs != null)
                    hashCode = hashCode * 59 + this.TreatAs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
