/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: v9.0.000.20.2204
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediamediatypeinteractionsidplaceinqueueData
    /// </summary>
    [DataContract]
    public partial class MediamediatypeinteractionsidplaceinqueueData :  IEquatable<MediamediatypeinteractionsidplaceinqueueData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamediatypeinteractionsidplaceinqueueData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediamediatypeinteractionsidplaceinqueueData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamediatypeinteractionsidplaceinqueueData" /> class.
        /// </summary>
        /// <param name="Queue">The name of the queue where the Workspace API should place the interaction. (required).</param>
        /// <param name="Reason">A collection of key/value pairs..</param>
        /// <param name="Extension">A collection of key/value pairs..</param>
        /// <param name="AddedProperties">A collection of key/value pairs of properties to add to the interaction..</param>
        /// <param name="ChangedProperties">A collection of key/value pairs of properties to change on the interaction..</param>
        /// <param name="DeletedProperties">A collection of key/value pairs of properties to delete from the interaction..</param>
        public MediamediatypeinteractionsidplaceinqueueData(string Queue = default(string), IxnReasonCode Reason = default(IxnReasonCode), List<Kvpair> Extension = default(List<Kvpair>), List<Kvpair> AddedProperties = default(List<Kvpair>), List<Kvpair> ChangedProperties = default(List<Kvpair>), List<Kvpair> DeletedProperties = default(List<Kvpair>))
        {
            // to ensure "Queue" is required (not null)
            if (Queue == null)
            {
                throw new InvalidDataException("Queue is a required property for MediamediatypeinteractionsidplaceinqueueData and cannot be null");
            }
            else
            {
                this.Queue = Queue;
            }
            this.Reason = Reason;
            this.Extension = Extension;
            this.AddedProperties = AddedProperties;
            this.ChangedProperties = ChangedProperties;
            this.DeletedProperties = DeletedProperties;
        }
        
        /// <summary>
        /// The name of the queue where the Workspace API should place the interaction.
        /// </summary>
        /// <value>The name of the queue where the Workspace API should place the interaction.</value>
        [DataMember(Name="queue", EmitDefaultValue=false)]
        public string Queue { get; set; }

        /// <summary>
        /// A collection of key/value pairs.
        /// </summary>
        /// <value>A collection of key/value pairs.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public IxnReasonCode Reason { get; set; }

        /// <summary>
        /// A collection of key/value pairs.
        /// </summary>
        /// <value>A collection of key/value pairs.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public List<Kvpair> Extension { get; set; }

        /// <summary>
        /// A collection of key/value pairs of properties to add to the interaction.
        /// </summary>
        /// <value>A collection of key/value pairs of properties to add to the interaction.</value>
        [DataMember(Name="addedProperties", EmitDefaultValue=false)]
        public List<Kvpair> AddedProperties { get; set; }

        /// <summary>
        /// A collection of key/value pairs of properties to change on the interaction.
        /// </summary>
        /// <value>A collection of key/value pairs of properties to change on the interaction.</value>
        [DataMember(Name="changedProperties", EmitDefaultValue=false)]
        public List<Kvpair> ChangedProperties { get; set; }

        /// <summary>
        /// A collection of key/value pairs of properties to delete from the interaction.
        /// </summary>
        /// <value>A collection of key/value pairs of properties to delete from the interaction.</value>
        [DataMember(Name="deletedProperties", EmitDefaultValue=false)]
        public List<Kvpair> DeletedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediamediatypeinteractionsidplaceinqueueData {\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  AddedProperties: ").Append(AddedProperties).Append("\n");
            sb.Append("  ChangedProperties: ").Append(ChangedProperties).Append("\n");
            sb.Append("  DeletedProperties: ").Append(DeletedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediamediatypeinteractionsidplaceinqueueData);
        }

        /// <summary>
        /// Returns true if MediamediatypeinteractionsidplaceinqueueData instances are equal
        /// </summary>
        /// <param name="input">Instance of MediamediatypeinteractionsidplaceinqueueData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediamediatypeinteractionsidplaceinqueueData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Queue == input.Queue ||
                    (this.Queue != null &&
                    this.Queue.Equals(input.Queue))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Extension == input.Extension ||
                    this.Extension != null &&
                    this.Extension.SequenceEqual(input.Extension)
                ) && 
                (
                    this.AddedProperties == input.AddedProperties ||
                    this.AddedProperties != null &&
                    this.AddedProperties.SequenceEqual(input.AddedProperties)
                ) && 
                (
                    this.ChangedProperties == input.ChangedProperties ||
                    this.ChangedProperties != null &&
                    this.ChangedProperties.SequenceEqual(input.ChangedProperties)
                ) && 
                (
                    this.DeletedProperties == input.DeletedProperties ||
                    this.DeletedProperties != null &&
                    this.DeletedProperties.SequenceEqual(input.DeletedProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Queue != null)
                    hashCode = hashCode * 59 + this.Queue.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.AddedProperties != null)
                    hashCode = hashCode * 59 + this.AddedProperties.GetHashCode();
                if (this.ChangedProperties != null)
                    hashCode = hashCode * 59 + this.ChangedProperties.GetHashCode();
                if (this.DeletedProperties != null)
                    hashCode = hashCode * 59 + this.DeletedProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
