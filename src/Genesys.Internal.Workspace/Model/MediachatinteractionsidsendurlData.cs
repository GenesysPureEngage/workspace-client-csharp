/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.24.2335
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediachatinteractionsidsendurlData
    /// </summary>
    [DataContract]
    public partial class MediachatinteractionsidsendurlData :  IEquatable<MediachatinteractionsidsendurlData>, IValidatableObject
    {
        /// <summary>
        /// Defines which participants in the chat can see the URL.
        /// </summary>
        /// <value>Defines which participants in the chat can see the URL.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,
            
            /// <summary>
            /// Enum Agent for value: Agent
            /// </summary>
            [EnumMember(Value = "Agent")]
            Agent = 2,
            
            /// <summary>
            /// Enum Supervisor for value: Supervisor
            /// </summary>
            [EnumMember(Value = "Supervisor")]
            Supervisor = 3
        }

        /// <summary>
        /// Defines which participants in the chat can see the URL.
        /// </summary>
        /// <value>Defines which participants in the chat can see the URL.</value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediachatinteractionsidsendurlData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediachatinteractionsidsendurlData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediachatinteractionsidsendurlData" /> class.
        /// </summary>
        /// <param name="Url">The URL to send to the chat participants. (required).</param>
        /// <param name="Visibility">Defines which participants in the chat can see the URL..</param>
        public MediachatinteractionsidsendurlData(string Url = default(string), VisibilityEnum? Visibility = default(VisibilityEnum?))
        {
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for MediachatinteractionsidsendurlData and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            this.Visibility = Visibility;
        }
        
        /// <summary>
        /// The URL to send to the chat participants.
        /// </summary>
        /// <value>The URL to send to the chat participants.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediachatinteractionsidsendurlData {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediachatinteractionsidsendurlData);
        }

        /// <summary>
        /// Returns true if MediachatinteractionsidsendurlData instances are equal
        /// </summary>
        /// <param name="input">Instance of MediachatinteractionsidsendurlData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediachatinteractionsidsendurlData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
