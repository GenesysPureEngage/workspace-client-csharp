/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediachatinteractionsidsendcustomnotificationData
    /// </summary>
    [DataContract]
    public partial class MediachatinteractionsidsendcustomnotificationData :  IEquatable<MediachatinteractionsidsendcustomnotificationData>, IValidatableObject
    {
        /// <summary>
        /// Defines which participants in the chat can see the message.
        /// </summary>
        /// <value>Defines which participants in the chat can see the message.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            
            /// <summary>
            /// Enum All for "All"
            /// </summary>
            [EnumMember(Value = "All")]
            All,
            
            /// <summary>
            /// Enum Agent for "Agent"
            /// </summary>
            [EnumMember(Value = "Agent")]
            Agent,
            
            /// <summary>
            /// Enum Supervisor for "Supervisor"
            /// </summary>
            [EnumMember(Value = "Supervisor")]
            Supervisor
        }

        /// <summary>
        /// Defines which participants in the chat can see the message.
        /// </summary>
        /// <value>Defines which participants in the chat can see the message.</value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediachatinteractionsidsendcustomnotificationData" /> class.
        /// </summary>
        /// <param name="Message">The message to send to the chat participants..</param>
        /// <param name="Visibility">Defines which participants in the chat can see the message..</param>
        /// <param name="UserData">The data of custom notification. This is an array of objects with the properties key, type, and value..</param>
        public MediachatinteractionsidsendcustomnotificationData(string Message = default(string), VisibilityEnum? Visibility = default(VisibilityEnum?), List<Kvpair> UserData = default(List<Kvpair>))
        {
            this.Message = Message;
            this.Visibility = Visibility;
            this.UserData = UserData;
        }
        
        /// <summary>
        /// The message to send to the chat participants.
        /// </summary>
        /// <value>The message to send to the chat participants.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }


        /// <summary>
        /// The data of custom notification. This is an array of objects with the properties key, type, and value.
        /// </summary>
        /// <value>The data of custom notification. This is an array of objects with the properties key, type, and value.</value>
        [DataMember(Name="userData", EmitDefaultValue=false)]
        public List<Kvpair> UserData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediachatinteractionsidsendcustomnotificationData {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MediachatinteractionsidsendcustomnotificationData);
        }

        /// <summary>
        /// Returns true if MediachatinteractionsidsendcustomnotificationData instances are equal
        /// </summary>
        /// <param name="other">Instance of MediachatinteractionsidsendcustomnotificationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediachatinteractionsidsendcustomnotificationData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Visibility == other.Visibility ||
                    this.Visibility != null &&
                    this.Visibility.Equals(other.Visibility)
                ) && 
                (
                    this.UserData == other.UserData ||
                    this.UserData != null &&
                    this.UserData.SequenceEqual(other.UserData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Visibility != null)
                    hash = hash * 59 + this.Visibility.GetHashCode();
                if (this.UserData != null)
                    hash = hash * 59 + this.UserData.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
