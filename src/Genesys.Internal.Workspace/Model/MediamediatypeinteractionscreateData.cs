/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.24.2336
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// MediamediatypeinteractionscreateData
    /// </summary>
    [DataContract]
    public partial class MediamediatypeinteractionscreateData :  IEquatable<MediamediatypeinteractionscreateData>, IValidatableObject
    {
        /// <summary>
        /// Specifies the subtype of interaction.
        /// </summary>
        /// <value>Specifies the subtype of interaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubtypeEnum
        {
            
            /// <summary>
            /// Enum OutboundNew for value: OutboundNew
            /// </summary>
            [EnumMember(Value = "OutboundNew")]
            OutboundNew = 1,
            
            /// <summary>
            /// Enum OutboundReply for value: OutboundReply
            /// </summary>
            [EnumMember(Value = "OutboundReply")]
            OutboundReply = 2
        }

        /// <summary>
        /// Specifies the subtype of interaction.
        /// </summary>
        /// <value>Specifies the subtype of interaction.</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public SubtypeEnum? Subtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediamediatypeinteractionscreateData" /> class.
        /// </summary>
        /// <param name="Subtype">Specifies the subtype of interaction..</param>
        /// <param name="Queue">the name of the queue to submit the new email.</param>
        /// <param name="ParentId">specify the Id of Parent interaction.</param>
        /// <param name="ContactId">id of the contact.</param>
        /// <param name="Subject">The subject value.</param>
        /// <param name="UserData">A key/value pairs list of user data..</param>
        /// <param name="Extension">A key/value pairs list of additional information..</param>
        public MediamediatypeinteractionscreateData(SubtypeEnum? Subtype = default(SubtypeEnum?), string Queue = default(string), string ParentId = default(string), string ContactId = default(string), string Subject = default(string), List<Kvpair> UserData = default(List<Kvpair>), List<Kvpair> Extension = default(List<Kvpair>))
        {
            this.Subtype = Subtype;
            this.Queue = Queue;
            this.ParentId = ParentId;
            this.ContactId = ContactId;
            this.Subject = Subject;
            this.UserData = UserData;
            this.Extension = Extension;
        }
        

        /// <summary>
        /// the name of the queue to submit the new email
        /// </summary>
        /// <value>the name of the queue to submit the new email</value>
        [DataMember(Name="queue", EmitDefaultValue=false)]
        public string Queue { get; set; }

        /// <summary>
        /// specify the Id of Parent interaction
        /// </summary>
        /// <value>specify the Id of Parent interaction</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// id of the contact
        /// </summary>
        /// <value>id of the contact</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public string ContactId { get; set; }

        /// <summary>
        /// The subject value
        /// </summary>
        /// <value>The subject value</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// A key/value pairs list of user data.
        /// </summary>
        /// <value>A key/value pairs list of user data.</value>
        [DataMember(Name="userData", EmitDefaultValue=false)]
        public List<Kvpair> UserData { get; set; }

        /// <summary>
        /// A key/value pairs list of additional information.
        /// </summary>
        /// <value>A key/value pairs list of additional information.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public List<Kvpair> Extension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediamediatypeinteractionscreateData {\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediamediatypeinteractionscreateData);
        }

        /// <summary>
        /// Returns true if MediamediatypeinteractionscreateData instances are equal
        /// </summary>
        /// <param name="input">Instance of MediamediatypeinteractionscreateData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediamediatypeinteractionscreateData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Subtype == input.Subtype ||
                    (this.Subtype != null &&
                    this.Subtype.Equals(input.Subtype))
                ) && 
                (
                    this.Queue == input.Queue ||
                    (this.Queue != null &&
                    this.Queue.Equals(input.Queue))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.UserData == input.UserData ||
                    this.UserData != null &&
                    this.UserData.SequenceEqual(input.UserData)
                ) && 
                (
                    this.Extension == input.Extension ||
                    this.Extension != null &&
                    this.Extension.SequenceEqual(input.Extension)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subtype != null)
                    hashCode = hashCode * 59 + this.Subtype.GetHashCode();
                if (this.Queue != null)
                    hashCode = hashCode * 59 + this.Queue.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.UserData != null)
                    hashCode = hashCode * 59 + this.UserData.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
