/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Internal.Workspace.Model
{
    /// <summary>
    /// Service
    /// </summary>
    [DataContract]
    public partial class Service :  IEquatable<Service>, IValidatableObject
    {
        /// <summary>
        /// The name of the service.
        /// </summary>
        /// <value>The name of the service.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceNameEnum
        {
            
            /// <summary>
            /// Enum VOICE for "VOICE"
            /// </summary>
            [EnumMember(Value = "VOICE")]
            VOICE,
            
            /// <summary>
            /// Enum STATS for "STATS"
            /// </summary>
            [EnumMember(Value = "STATS")]
            STATS,
            
            /// <summary>
            /// Enum IXN for "IXN"
            /// </summary>
            [EnumMember(Value = "IXN")]
            IXN,
            
            /// <summary>
            /// Enum UCS for "UCS"
            /// </summary>
            [EnumMember(Value = "UCS")]
            UCS
        }

        /// <summary>
        /// The state of the service - AVAILABLE or UNAVAILABLE
        /// </summary>
        /// <value>The state of the service - AVAILABLE or UNAVAILABLE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceStateEnum
        {
            
            /// <summary>
            /// Enum AVAILABLE for "AVAILABLE"
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE,
            
            /// <summary>
            /// Enum UNAVAILABLE for "UNAVAILABLE"
            /// </summary>
            [EnumMember(Value = "UNAVAILABLE")]
            UNAVAILABLE
        }

        /// <summary>
        /// The name of the service.
        /// </summary>
        /// <value>The name of the service.</value>
        [DataMember(Name="serviceName", EmitDefaultValue=false)]
        public ServiceNameEnum? ServiceName { get; set; }
        /// <summary>
        /// The state of the service - AVAILABLE or UNAVAILABLE
        /// </summary>
        /// <value>The state of the service - AVAILABLE or UNAVAILABLE</value>
        [DataMember(Name="serviceState", EmitDefaultValue=false)]
        public ServiceStateEnum? ServiceState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="ServiceName">The name of the service..</param>
        /// <param name="ServiceState">The state of the service - AVAILABLE or UNAVAILABLE.</param>
        public Service(ServiceNameEnum? ServiceName = default(ServiceNameEnum?), ServiceStateEnum? ServiceState = default(ServiceStateEnum?))
        {
            this.ServiceName = ServiceName;
            this.ServiceState = ServiceState;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  ServiceState: ").Append(ServiceState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Service);
        }

        /// <summary>
        /// Returns true if Service instances are equal
        /// </summary>
        /// <param name="other">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ServiceName == other.ServiceName ||
                    this.ServiceName != null &&
                    this.ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    this.ServiceState == other.ServiceState ||
                    this.ServiceState != null &&
                    this.ServiceState.Equals(other.ServiceState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ServiceName != null)
                    hash = hash * 59 + this.ServiceName.GetHashCode();
                if (this.ServiceState != null)
                    hash = hash * 59 + this.ServiceState.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
