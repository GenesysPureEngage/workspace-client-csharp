/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Workspace.Client;
using Genesys.Internal.Workspace.Model;

namespace Genesys.Internal.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Accept the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Accept (string mediatype, string id, AcceptData6 acceptData = null);

        /// <summary>
        /// Accept an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Accept the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AcceptWithHttpInfo (string mediatype, string id, AcceptData6 acceptData = null);
        /// <summary>
        /// Add an attachment to the open-media interaction
        /// </summary>
        /// <remarks>
        /// Add an attachment to the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AddAttachment (string mediatype, string id, System.IO.Stream attachment = null);

        /// <summary>
        /// Add an attachment to the open-media interaction
        /// </summary>
        /// <remarks>
        /// Add an attachment to the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AddAttachmentWithHttpInfo (string mediatype, string id, System.IO.Stream attachment = null);
        /// <summary>
        /// Create the interaction in UCS database
        /// </summary>
        /// <remarks>
        /// Create the interaction in UCS database
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AddContent (string mediatype, string id, AddContentData addContentData = null);

        /// <summary>
        /// Create the interaction in UCS database
        /// </summary>
        /// <remarks>
        /// Create the interaction in UCS database
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AddContentWithHttpInfo (string mediatype, string id, AddContentData addContentData = null);
        /// <summary>
        /// Assign the contact to the open interaction
        /// </summary>
        /// <remarks>
        /// Assign the contact to the open interaction specified in the contactId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AssignContact (string mediatype, string id, string contactId);

        /// <summary>
        /// Assign the contact to the open interaction
        /// </summary>
        /// <remarks>
        /// Assign the contact to the open interaction specified in the contactId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AssignContactWithHttpInfo (string mediatype, string id, string contactId);
        /// <summary>
        /// Attach user data to the interaction.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AttachMediaUserData (string mediatype, string id, UserData userData);

        /// <summary>
        /// Attach user data to the interaction.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AttachMediaUserDataWithHttpInfo (string mediatype, string id, UserData userData);
        /// <summary>
        /// Get the attachment of the interaction
        /// </summary>
        /// <remarks>
        /// Get the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>string</returns>
        string Attachments (string mediatype, string id, string documentId);

        /// <summary>
        /// Get the attachment of the interaction
        /// </summary>
        /// <remarks>
        /// Get the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AttachmentsWithHttpInfo (string mediatype, string id, string documentId);
        /// <summary>
        /// Complete the interaction.
        /// </summary>
        /// <remarks>
        /// Marks the specified interaction as complete.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Complete (string mediatype, string id);

        /// <summary>
        /// Complete the interaction.
        /// </summary>
        /// <remarks>
        /// Marks the specified interaction as complete.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CompleteWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Remove key/value pairs from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified keys from the interaction&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteMediaUserData (string mediatype, string id, UserData2 userData);

        /// <summary>
        /// Remove key/value pairs from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified keys from the interaction&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteMediaUserDataWithHttpInfo (string mediatype, string id, UserData2 userData);
        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DndOff ();

        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DndOffWithHttpInfo ();
        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DndOn ();

        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DndOnWithHttpInfo ();
        /// <summary>
        /// Log out of all media channels.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LogoutAgentState ();

        /// <summary>
        /// Log out of all media channels.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LogoutAgentStateWithHttpInfo ();
        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MediaStartMonitoring (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null);

        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MediaStartMonitoringWithHttpInfo (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null);
        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop supervisor monitoring of an agent on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MediaStopMonitoring (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null);

        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop supervisor monitoring of an agent on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MediaStopMonitoringWithHttpInfo (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null);
        /// <summary>
        /// Switch to the barge-in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MediaSwicthToBargeIn (string mediatype, string id);

        /// <summary>
        /// Switch to the barge-in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MediaSwicthToBargeInWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Switch to the coach monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MediaSwicthToCoach (string mediatype, string id);

        /// <summary>
        /// Switch to the coach monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MediaSwicthToCoachWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Switch to the monitor mode.
        /// </summary>
        /// <remarks>
        /// Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MediaSwicthToMonitor (string mediatype, string id);

        /// <summary>
        /// Switch to the monitor mode.
        /// </summary>
        /// <remarks>
        /// Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MediaSwicthToMonitorWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse NotReadyAgentState (NotReadyForAgentData notReadyForAgentData);

        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> NotReadyAgentStateWithHttpInfo (NotReadyForAgentData notReadyForAgentData);
        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse NotReadyForMedia (string mediatype, NotReadyForMediaData notReadyForMediaData);

        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> NotReadyForMediaWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData);
        /// <summary>
        /// Place the interaction in a queue.
        /// </summary>
        /// <remarks>
        /// Place the interaction in the specified queue.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse PlaceInQueue (string mediatype, string id, PlaceInQueueData placeInQueueData);

        /// <summary>
        /// Place the interaction in a queue.
        /// </summary>
        /// <remarks>
        /// Place the interaction in the specified queue.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> PlaceInQueueWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData);
        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ReadyAgentState ();

        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReadyAgentStateWithHttpInfo ();
        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ReadyForMedia (string mediatype, ReadyForMediaData readyForMediaData = null);

        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReadyForMediaWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null);
        /// <summary>
        /// Reject an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Reject the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Reject (string mediatype, string id, RejectData rejectData = null);

        /// <summary>
        /// Reject an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Reject the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RejectWithHttpInfo (string mediatype, string id, RejectData rejectData = null);
        /// <summary>
        /// Remove the attachment of the open-media interaction
        /// </summary>
        /// <remarks>
        /// Remove the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse RemoveAttachment (string mediatype, string id, string documentId);

        /// <summary>
        /// Remove the attachment of the open-media interaction
        /// </summary>
        /// <remarks>
        /// Remove the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RemoveAttachmentWithHttpInfo (string mediatype, string id, string documentId);
        /// <summary>
        /// Log out of the media channel.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse RemoveMedia (string mediatype, LogoutMediaData logoutMediaData);

        /// <summary>
        /// Log out of the media channel.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RemoveMediaWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData);
        /// <summary>
        /// set a comment.
        /// </summary>
        /// <remarks>
        /// set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetComment (string mediatype, string id, AddCommentData addCommentData);

        /// <summary>
        /// set a comment.
        /// </summary>
        /// <remarks>
        /// set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetCommentWithHttpInfo (string mediatype, string id, AddCommentData addCommentData);
        /// <summary>
        /// Transfer the interaction.
        /// </summary>
        /// <remarks>
        /// Transfer the interaction to the specified agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse TransferAgent (string mediatype, string id, TransferData transferData);

        /// <summary>
        /// Transfer the interaction.
        /// </summary>
        /// <remarks>
        /// Transfer the interaction to the specified agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> TransferAgentWithHttpInfo (string mediatype, string id, TransferData transferData);
        /// <summary>
        /// Update user data for an interaction.
        /// </summary>
        /// <remarks>
        /// Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UpdateMediaUserData (string mediatype, string id, UserData userData);

        /// <summary>
        /// Update user data for an interaction.
        /// </summary>
        /// <remarks>
        /// Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UpdateMediaUserDataWithHttpInfo (string mediatype, string id, UserData userData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Accept the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AcceptAsync (string mediatype, string id, AcceptData6 acceptData = null);

        /// <summary>
        /// Accept an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Accept the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AcceptAsyncWithHttpInfo (string mediatype, string id, AcceptData6 acceptData = null);
        /// <summary>
        /// Add an attachment to the open-media interaction
        /// </summary>
        /// <remarks>
        /// Add an attachment to the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AddAttachmentAsync (string mediatype, string id, System.IO.Stream attachment = null);

        /// <summary>
        /// Add an attachment to the open-media interaction
        /// </summary>
        /// <remarks>
        /// Add an attachment to the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddAttachmentAsyncWithHttpInfo (string mediatype, string id, System.IO.Stream attachment = null);
        /// <summary>
        /// Create the interaction in UCS database
        /// </summary>
        /// <remarks>
        /// Create the interaction in UCS database
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AddContentAsync (string mediatype, string id, AddContentData addContentData = null);

        /// <summary>
        /// Create the interaction in UCS database
        /// </summary>
        /// <remarks>
        /// Create the interaction in UCS database
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddContentAsyncWithHttpInfo (string mediatype, string id, AddContentData addContentData = null);
        /// <summary>
        /// Assign the contact to the open interaction
        /// </summary>
        /// <remarks>
        /// Assign the contact to the open interaction specified in the contactId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AssignContactAsync (string mediatype, string id, string contactId);

        /// <summary>
        /// Assign the contact to the open interaction
        /// </summary>
        /// <remarks>
        /// Assign the contact to the open interaction specified in the contactId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AssignContactAsyncWithHttpInfo (string mediatype, string id, string contactId);
        /// <summary>
        /// Attach user data to the interaction.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AttachMediaUserDataAsync (string mediatype, string id, UserData userData);

        /// <summary>
        /// Attach user data to the interaction.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AttachMediaUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData);
        /// <summary>
        /// Get the attachment of the interaction
        /// </summary>
        /// <remarks>
        /// Get the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AttachmentsAsync (string mediatype, string id, string documentId);

        /// <summary>
        /// Get the attachment of the interaction
        /// </summary>
        /// <remarks>
        /// Get the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AttachmentsAsyncWithHttpInfo (string mediatype, string id, string documentId);
        /// <summary>
        /// Complete the interaction.
        /// </summary>
        /// <remarks>
        /// Marks the specified interaction as complete.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CompleteAsync (string mediatype, string id);

        /// <summary>
        /// Complete the interaction.
        /// </summary>
        /// <remarks>
        /// Marks the specified interaction as complete.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteAsyncWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Remove key/value pairs from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified keys from the interaction&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteMediaUserDataAsync (string mediatype, string id, UserData2 userData);

        /// <summary>
        /// Remove key/value pairs from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified keys from the interaction&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteMediaUserDataAsyncWithHttpInfo (string mediatype, string id, UserData2 userData);
        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DndOffAsync ();

        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOffAsyncWithHttpInfo ();
        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DndOnAsync ();

        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOnAsyncWithHttpInfo ();
        /// <summary>
        /// Log out of all media channels.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAgentStateAsync ();

        /// <summary>
        /// Log out of all media channels.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAgentStateAsyncWithHttpInfo ();
        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MediaStartMonitoringAsync (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null);

        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaStartMonitoringAsyncWithHttpInfo (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null);
        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop supervisor monitoring of an agent on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MediaStopMonitoringAsync (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null);

        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop supervisor monitoring of an agent on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaStopMonitoringAsyncWithHttpInfo (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null);
        /// <summary>
        /// Switch to the barge-in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MediaSwicthToBargeInAsync (string mediatype, string id);

        /// <summary>
        /// Switch to the barge-in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaSwicthToBargeInAsyncWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Switch to the coach monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MediaSwicthToCoachAsync (string mediatype, string id);

        /// <summary>
        /// Switch to the coach monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaSwicthToCoachAsyncWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Switch to the monitor mode.
        /// </summary>
        /// <remarks>
        /// Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MediaSwicthToMonitorAsync (string mediatype, string id);

        /// <summary>
        /// Switch to the monitor mode.
        /// </summary>
        /// <remarks>
        /// Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaSwicthToMonitorAsyncWithHttpInfo (string mediatype, string id);
        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyAgentStateAsync (NotReadyForAgentData notReadyForAgentData);

        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyAgentStateAsyncWithHttpInfo (NotReadyForAgentData notReadyForAgentData);
        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyForMediaAsync (string mediatype, NotReadyForMediaData notReadyForMediaData);

        /// <summary>
        /// Set the agent state to Not Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyForMediaAsyncWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData);
        /// <summary>
        /// Place the interaction in a queue.
        /// </summary>
        /// <remarks>
        /// Place the interaction in the specified queue.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> PlaceInQueueAsync (string mediatype, string id, PlaceInQueueData placeInQueueData);

        /// <summary>
        /// Place the interaction in a queue.
        /// </summary>
        /// <remarks>
        /// Place the interaction in the specified queue.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PlaceInQueueAsyncWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData);
        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReadyAgentStateAsync ();

        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on all media channels.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyAgentStateAsyncWithHttpInfo ();
        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReadyForMediaAsync (string mediatype, ReadyForMediaData readyForMediaData = null);

        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the specified media channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyForMediaAsyncWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null);
        /// <summary>
        /// Reject an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Reject the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RejectAsync (string mediatype, string id, RejectData rejectData = null);

        /// <summary>
        /// Reject an incoming interaction.
        /// </summary>
        /// <remarks>
        /// Reject the specified interaction.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RejectAsyncWithHttpInfo (string mediatype, string id, RejectData rejectData = null);
        /// <summary>
        /// Remove the attachment of the open-media interaction
        /// </summary>
        /// <remarks>
        /// Remove the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RemoveAttachmentAsync (string mediatype, string id, string documentId);

        /// <summary>
        /// Remove the attachment of the open-media interaction
        /// </summary>
        /// <remarks>
        /// Remove the attachment of the interaction specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RemoveAttachmentAsyncWithHttpInfo (string mediatype, string id, string documentId);
        /// <summary>
        /// Log out of the media channel.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RemoveMediaAsync (string mediatype, LogoutMediaData logoutMediaData);

        /// <summary>
        /// Log out of the media channel.
        /// </summary>
        /// <remarks>
        /// Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RemoveMediaAsyncWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData);
        /// <summary>
        /// set a comment.
        /// </summary>
        /// <remarks>
        /// set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetCommentAsync (string mediatype, string id, AddCommentData addCommentData);

        /// <summary>
        /// set a comment.
        /// </summary>
        /// <remarks>
        /// set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetCommentAsyncWithHttpInfo (string mediatype, string id, AddCommentData addCommentData);
        /// <summary>
        /// Transfer the interaction.
        /// </summary>
        /// <remarks>
        /// Transfer the interaction to the specified agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> TransferAgentAsync (string mediatype, string id, TransferData transferData);

        /// <summary>
        /// Transfer the interaction.
        /// </summary>
        /// <remarks>
        /// Transfer the interaction to the specified agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> TransferAgentAsyncWithHttpInfo (string mediatype, string id, TransferData transferData);
        /// <summary>
        /// Update user data for an interaction.
        /// </summary>
        /// <remarks>
        /// Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UpdateMediaUserDataAsync (string mediatype, string id, UserData userData);

        /// <summary>
        /// Update user data for an interaction.
        /// </summary>
        /// <remarks>
        /// Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateMediaUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaApi : IMediaApi
    {
        private Genesys.Internal.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept an incoming interaction. Accept the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Accept (string mediatype, string id, AcceptData6 acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AcceptWithHttpInfo(mediatype, id, acceptData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an incoming interaction. Accept the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AcceptWithHttpInfo (string mediatype, string id, AcceptData6 acceptData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Accept");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Accept");

            var localVarPath = "/media/{mediatype}/interactions/{id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Accept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Accept an incoming interaction. Accept the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AcceptAsync (string mediatype, string id, AcceptData6 acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AcceptAsyncWithHttpInfo(mediatype, id, acceptData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept an incoming interaction. Accept the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to accept.</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AcceptAsyncWithHttpInfo (string mediatype, string id, AcceptData6 acceptData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Accept");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Accept");

            var localVarPath = "/media/{mediatype}/interactions/{id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Accept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Add an attachment to the open-media interaction Add an attachment to the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AddAttachment (string mediatype, string id, System.IO.Stream attachment = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AddAttachmentWithHttpInfo(mediatype, id, attachment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an attachment to the open-media interaction Add an attachment to the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AddAttachmentWithHttpInfo (string mediatype, string id, System.IO.Stream attachment = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AddAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AddAttachment");

            var localVarPath = "/media/{mediatype}/interactions/{id}/add-attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", Configuration.ApiClient.ParameterToFile("attachment", attachment));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Add an attachment to the open-media interaction Add an attachment to the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AddAttachmentAsync (string mediatype, string id, System.IO.Stream attachment = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AddAttachmentAsyncWithHttpInfo(mediatype, id, attachment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an attachment to the open-media interaction Add an attachment to the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to add attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="attachment">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddAttachmentAsyncWithHttpInfo (string mediatype, string id, System.IO.Stream attachment = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AddAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AddAttachment");

            var localVarPath = "/media/{mediatype}/interactions/{id}/add-attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachment != null) localVarFileParams.Add("attachment", Configuration.ApiClient.ParameterToFile("attachment", attachment));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create the interaction in UCS database Create the interaction in UCS database
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AddContent (string mediatype, string id, AddContentData addContentData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AddContentWithHttpInfo(mediatype, id, addContentData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create the interaction in UCS database Create the interaction in UCS database
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AddContentWithHttpInfo (string mediatype, string id, AddContentData addContentData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AddContent");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AddContent");

            var localVarPath = "/media/{mediatype}/interactions/{id}/add-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (addContentData != null && addContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create the interaction in UCS database Create the interaction in UCS database
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AddContentAsync (string mediatype, string id, AddContentData addContentData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AddContentAsyncWithHttpInfo(mediatype, id, addContentData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create the interaction in UCS database Create the interaction in UCS database
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="addContentData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddContentAsyncWithHttpInfo (string mediatype, string id, AddContentData addContentData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AddContent");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AddContent");

            var localVarPath = "/media/{mediatype}/interactions/{id}/add-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (addContentData != null && addContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Assign the contact to the open interaction Assign the contact to the open interaction specified in the contactId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AssignContact (string mediatype, string id, string contactId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AssignContactWithHttpInfo(mediatype, id, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign the contact to the open interaction Assign the contact to the open interaction specified in the contactId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AssignContactWithHttpInfo (string mediatype, string id, string contactId)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AssignContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AssignContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling MediaApi->AssignContact");

            var localVarPath = "/media/{mediatype}/interactions/{id}/assign-contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Assign the contact to the open interaction Assign the contact to the open interaction specified in the contactId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AssignContactAsync (string mediatype, string id, string contactId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AssignContactAsyncWithHttpInfo(mediatype, id, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign the contact to the open interaction Assign the contact to the open interaction specified in the contactId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="contactId">id of contact</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AssignContactAsyncWithHttpInfo (string mediatype, string id, string contactId)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AssignContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AssignContact");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling MediaApi->AssignContact");

            var localVarPath = "/media/{mediatype}/interactions/{id}/assign-contact/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to the interaction. Attach the provided data to the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AttachMediaUserData (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AttachMediaUserDataWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach user data to the interaction. Attach the provided data to the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AttachMediaUserDataWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AttachMediaUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AttachMediaUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->AttachMediaUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachMediaUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to the interaction. Attach the provided data to the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AttachMediaUserDataAsync (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AttachMediaUserDataAsyncWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach user data to the interaction. Attach the provided data to the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to attach to the interaction. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AttachMediaUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->AttachMediaUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->AttachMediaUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->AttachMediaUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachMediaUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the attachment of the interaction Get the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>string</returns>
        public string Attachments (string mediatype, string id, string documentId)
        {
             ApiResponse<string> localVarResponse = AttachmentsWithHttpInfo(mediatype, id, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the attachment of the interaction Get the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > AttachmentsWithHttpInfo (string mediatype, string id, string documentId)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Attachments");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Attachments");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling MediaApi->Attachments");

            var localVarPath = "/media/{mediatype}/interactions/{id}/attachments/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Attachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the attachment of the interaction Get the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AttachmentsAsync (string mediatype, string id, string documentId)
        {
             ApiResponse<string> localVarResponse = await AttachmentsAsyncWithHttpInfo(mediatype, id, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the attachment of the interaction Get the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AttachmentsAsyncWithHttpInfo (string mediatype, string id, string documentId)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Attachments");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Attachments");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling MediaApi->Attachments");

            var localVarPath = "/media/{mediatype}/interactions/{id}/attachments/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Attachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Complete the interaction. Marks the specified interaction as complete.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Complete (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CompleteWithHttpInfo(mediatype, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete the interaction. Marks the specified interaction as complete.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CompleteWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Complete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Complete");

            var localVarPath = "/media/{mediatype}/interactions/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Complete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete the interaction. Marks the specified interaction as complete.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CompleteAsync (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CompleteAsyncWithHttpInfo(mediatype, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete the interaction. Marks the specified interaction as complete.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to complete.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteAsyncWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Complete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Complete");

            var localVarPath = "/media/{mediatype}/interactions/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Complete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove key/value pairs from user data. Delete data with the specified keys from the interaction&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteMediaUserData (string mediatype, string id, UserData2 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteMediaUserDataWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove key/value pairs from user data. Delete data with the specified keys from the interaction&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteMediaUserDataWithHttpInfo (string mediatype, string id, UserData2 userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->DeleteMediaUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->DeleteMediaUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->DeleteMediaUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/delete-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMediaUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove key/value pairs from user data. Delete data with the specified keys from the interaction&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteMediaUserDataAsync (string mediatype, string id, UserData2 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteMediaUserDataAsyncWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove key/value pairs from user data. Delete data with the specified keys from the interaction&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The keys of the data to remove.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteMediaUserDataAsyncWithHttpInfo (string mediatype, string id, UserData2 userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->DeleteMediaUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->DeleteMediaUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->DeleteMediaUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/delete-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMediaUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DndOff ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DndOffWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DndOffWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DndOffAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DndOffAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOffAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DndOn ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DndOnWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DndOnWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DndOnAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DndOnAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOnAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of all media channels. Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LogoutAgentState ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LogoutAgentStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log out of all media channels. Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LogoutAgentStateWithHttpInfo ()
        {

            var localVarPath = "/media/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of all media channels. Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAgentStateAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LogoutAgentStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log out of all media channels. Log out the current agent on all media channels. You can make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAgentStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MediaStartMonitoring (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MediaStartMonitoringWithHttpInfo(mediatype, mediaStartMonitoringData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MediaStartMonitoringWithHttpInfo (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaStartMonitoring");

            var localVarPath = "/media/{mediatype}/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (mediaStartMonitoringData != null && mediaStartMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mediaStartMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mediaStartMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaStartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MediaStartMonitoringAsync (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MediaStartMonitoringAsyncWithHttpInfo(mediatype, mediaStartMonitoringData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent on the specified media channel. When an agent being monitored accepts a chat, the  supervisor also receives the chat and all related notifications. If the agent is currently in a chat, the supervisor is added to the agent&#39;s next chat. The supervisor can&#39;t send messages in this mode and only another supervisor can see that the monitoring supervisor joined the chat. If the monitored agent leaves the chat but another agent  is still present, the supervisor continues monitoring the chat until it&#39;s completed or placed in a queue. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/media/{mediatype}/interactions/{id}/switch-to-barge-in&#x60;,  &#x60;/media/{mediatype}/interactions/{id}/switch-to-coach&#x60;, and &#x60;/media/{mediatype}/interactions/{id}/switch-to-monitor&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStartMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaStartMonitoringAsyncWithHttpInfo (string mediatype, MediaStartMonitoringData mediaStartMonitoringData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaStartMonitoring");

            var localVarPath = "/media/{mediatype}/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (mediaStartMonitoringData != null && mediaStartMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mediaStartMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mediaStartMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaStartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop monitoring an agent. Stop supervisor monitoring of an agent on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MediaStopMonitoring (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MediaStopMonitoringWithHttpInfo(mediatype, mediaStopMonitoringData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop monitoring an agent. Stop supervisor monitoring of an agent on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MediaStopMonitoringWithHttpInfo (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaStopMonitoring");

            var localVarPath = "/media/{mediatype}/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (mediaStopMonitoringData != null && mediaStopMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mediaStopMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mediaStopMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaStopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop monitoring an agent. Stop supervisor monitoring of an agent on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MediaStopMonitoringAsync (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MediaStopMonitoringAsyncWithHttpInfo(mediatype, mediaStopMonitoringData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop monitoring an agent. Stop supervisor monitoring of an agent on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="mediaStopMonitoringData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaStopMonitoringAsyncWithHttpInfo (string mediatype, MediaStopMonitoringData mediaStopMonitoringData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaStopMonitoring");

            var localVarPath = "/media/{mediatype}/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (mediaStopMonitoringData != null && mediaStopMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mediaStopMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mediaStopMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaStopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the barge-in monitoring mode. Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MediaSwicthToBargeIn (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MediaSwicthToBargeInWithHttpInfo(mediatype, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to the barge-in monitoring mode. Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MediaSwicthToBargeInWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaSwicthToBargeIn");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaSwicthToBargeIn");

            var localVarPath = "/media/{mediatype}/interactions/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaSwicthToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the barge-in monitoring mode. Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MediaSwicthToBargeInAsync (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MediaSwicthToBargeInAsyncWithHttpInfo(mediatype, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to the barge-in monitoring mode. Switch to the barge-in monitoring mode for the specified chat. Both the agent and the  customer can see the supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaSwicthToBargeInAsyncWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaSwicthToBargeIn");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaSwicthToBargeIn");

            var localVarPath = "/media/{mediatype}/interactions/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaSwicthToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the coach monitoring mode. Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MediaSwicthToCoach (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MediaSwicthToCoachWithHttpInfo(mediatype, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to the coach monitoring mode. Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MediaSwicthToCoachWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaSwicthToCoach");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaSwicthToCoach");

            var localVarPath = "/media/{mediatype}/interactions/{id}/switch-to-coach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaSwicthToCoach", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the coach monitoring mode. Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MediaSwicthToCoachAsync (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MediaSwicthToCoachAsyncWithHttpInfo(mediatype, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to the coach monitoring mode. Switch to the coach monitoring mode for the specified chat. Only the agent can see the  supervisor&#39;s messages.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaSwicthToCoachAsyncWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaSwicthToCoach");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaSwicthToCoach");

            var localVarPath = "/media/{mediatype}/interactions/{id}/switch-to-coach";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaSwicthToCoach", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the monitor mode. Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MediaSwicthToMonitor (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MediaSwicthToMonitorWithHttpInfo(mediatype, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to the monitor mode. Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MediaSwicthToMonitorWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaSwicthToMonitor");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaSwicthToMonitor");

            var localVarPath = "/media/{mediatype}/interactions/{id}/switch-to-monitor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaSwicthToMonitor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the monitor mode. Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MediaSwicthToMonitorAsync (string mediatype, string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MediaSwicthToMonitorAsyncWithHttpInfo(mediatype, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to the monitor mode. Switch to the monitor mode for the specified chat. The supervisor can&#39;t send messages in this  mode and only another supervisor can see that the monitoring supervisor joined the chat.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the chat interaction.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaSwicthToMonitorAsyncWithHttpInfo (string mediatype, string id)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaSwicthToMonitor");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaSwicthToMonitor");

            var localVarPath = "/media/{mediatype}/interactions/{id}/switch-to-monitor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaSwicthToMonitor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse NotReadyAgentState (NotReadyForAgentData notReadyForAgentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = NotReadyAgentStateWithHttpInfo(notReadyForAgentData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > NotReadyAgentStateWithHttpInfo (NotReadyForAgentData notReadyForAgentData)
        {
            // verify the required parameter 'notReadyForAgentData' is set
            if (notReadyForAgentData == null)
                throw new ApiException(400, "Missing required parameter 'notReadyForAgentData' when calling MediaApi->NotReadyAgentState");

            var localVarPath = "/media/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notReadyForAgentData != null && notReadyForAgentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyForAgentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyForAgentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyAgentStateAsync (NotReadyForAgentData notReadyForAgentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await NotReadyAgentStateAsyncWithHttpInfo(notReadyForAgentData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyForAgentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyAgentStateAsyncWithHttpInfo (NotReadyForAgentData notReadyForAgentData)
        {
            // verify the required parameter 'notReadyForAgentData' is set
            if (notReadyForAgentData == null)
                throw new ApiException(400, "Missing required parameter 'notReadyForAgentData' when calling MediaApi->NotReadyAgentState");

            var localVarPath = "/media/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notReadyForAgentData != null && notReadyForAgentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyForAgentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyForAgentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse NotReadyForMedia (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = NotReadyForMediaWithHttpInfo(mediatype, notReadyForMediaData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > NotReadyForMediaWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->NotReadyForMedia");
            // verify the required parameter 'notReadyForMediaData' is set
            if (notReadyForMediaData == null)
                throw new ApiException(400, "Missing required parameter 'notReadyForMediaData' when calling MediaApi->NotReadyForMedia");

            var localVarPath = "/media/{mediatype}/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (notReadyForMediaData != null && notReadyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyForMediaAsync (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await NotReadyForMediaAsyncWithHttpInfo(mediatype, notReadyForMediaData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to Not Ready. Set the current agent&#39;s state to Not Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyForMediaAsyncWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->NotReadyForMedia");
            // verify the required parameter 'notReadyForMediaData' is set
            if (notReadyForMediaData == null)
                throw new ApiException(400, "Missing required parameter 'notReadyForMediaData' when calling MediaApi->NotReadyForMedia");

            var localVarPath = "/media/{mediatype}/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (notReadyForMediaData != null && notReadyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Place the interaction in a queue. Place the interaction in the specified queue.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse PlaceInQueue (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = PlaceInQueueWithHttpInfo(mediatype, id, placeInQueueData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place the interaction in a queue. Place the interaction in the specified queue.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > PlaceInQueueWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'placeInQueueData' is set
            if (placeInQueueData == null)
                throw new ApiException(400, "Missing required parameter 'placeInQueueData' when calling MediaApi->PlaceInQueue");

            var localVarPath = "/media/{mediatype}/interactions/{id}/place-in-queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (placeInQueueData != null && placeInQueueData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(placeInQueueData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = placeInQueueData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceInQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Place the interaction in a queue. Place the interaction in the specified queue.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> PlaceInQueueAsync (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await PlaceInQueueAsyncWithHttpInfo(mediatype, id, placeInQueueData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place the interaction in a queue. Place the interaction in the specified queue.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PlaceInQueueAsyncWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'placeInQueueData' is set
            if (placeInQueueData == null)
                throw new ApiException(400, "Missing required parameter 'placeInQueueData' when calling MediaApi->PlaceInQueue");

            var localVarPath = "/media/{mediatype}/interactions/{id}/place-in-queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (placeInQueueData != null && placeInQueueData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(placeInQueueData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = placeInQueueData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceInQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ReadyAgentState ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReadyAgentStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReadyAgentStateWithHttpInfo ()
        {

            var localVarPath = "/media/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReadyAgentStateAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReadyAgentStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on all media channels.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyAgentStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ReadyForMedia (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReadyForMediaWithHttpInfo(mediatype, readyForMediaData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReadyForMediaWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->ReadyForMedia");

            var localVarPath = "/media/{mediatype}/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (readyForMediaData != null && readyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReadyForMediaAsync (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReadyForMediaAsyncWithHttpInfo(mediatype, readyForMediaData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the specified media channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyForMediaAsyncWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->ReadyForMedia");

            var localVarPath = "/media/{mediatype}/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (readyForMediaData != null && readyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reject an incoming interaction. Reject the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Reject (string mediatype, string id, RejectData rejectData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RejectWithHttpInfo(mediatype, id, rejectData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reject an incoming interaction. Reject the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RejectWithHttpInfo (string mediatype, string id, RejectData rejectData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Reject");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Reject");

            var localVarPath = "/media/{mediatype}/interactions/{id}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (rejectData != null && rejectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rejectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rejectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reject an incoming interaction. Reject the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RejectAsync (string mediatype, string id, RejectData rejectData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RejectAsyncWithHttpInfo(mediatype, id, rejectData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reject an incoming interaction. Reject the specified interaction.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction to reject.</param>
        /// <param name="rejectData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RejectAsyncWithHttpInfo (string mediatype, string id, RejectData rejectData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Reject");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Reject");

            var localVarPath = "/media/{mediatype}/interactions/{id}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (rejectData != null && rejectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rejectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rejectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove the attachment of the open-media interaction Remove the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse RemoveAttachment (string mediatype, string id, string documentId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RemoveAttachmentWithHttpInfo(mediatype, id, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the attachment of the open-media interaction Remove the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RemoveAttachmentWithHttpInfo (string mediatype, string id, string documentId)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->RemoveAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->RemoveAttachment");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling MediaApi->RemoveAttachment");

            var localVarPath = "/media/{mediatype}/interactions/{id}/remove-attachment/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove the attachment of the open-media interaction Remove the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RemoveAttachmentAsync (string mediatype, string id, string documentId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RemoveAttachmentAsyncWithHttpInfo(mediatype, id, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove the attachment of the open-media interaction Remove the attachment of the interaction specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to remove attachment</param>
        /// <param name="id">id of interaction</param>
        /// <param name="documentId">id of document to remove</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RemoveAttachmentAsyncWithHttpInfo (string mediatype, string id, string documentId)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->RemoveAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->RemoveAttachment");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling MediaApi->RemoveAttachment");

            var localVarPath = "/media/{mediatype}/interactions/{id}/remove-attachment/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of the media channel. Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse RemoveMedia (string mediatype, LogoutMediaData logoutMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RemoveMediaWithHttpInfo(mediatype, logoutMediaData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log out of the media channel. Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RemoveMediaWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->RemoveMedia");
            // verify the required parameter 'logoutMediaData' is set
            if (logoutMediaData == null)
                throw new ApiException(400, "Missing required parameter 'logoutMediaData' when calling MediaApi->RemoveMedia");

            var localVarPath = "/media/{mediatype}/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (logoutMediaData != null && logoutMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(logoutMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logoutMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of the media channel. Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RemoveMediaAsync (string mediatype, LogoutMediaData logoutMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RemoveMediaAsyncWithHttpInfo(mediatype, logoutMediaData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log out of the media channel. Log out the current agent on the specified media channels. You can   make a &#x60;/media/{mediatype}/ready&#x60; or &#x60;/media/{mediatype}/not-ready&#x60; request to log in to the media channel again. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RemoveMediaAsyncWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->RemoveMedia");
            // verify the required parameter 'logoutMediaData' is set
            if (logoutMediaData == null)
                throw new ApiException(400, "Missing required parameter 'logoutMediaData' when calling MediaApi->RemoveMedia");

            var localVarPath = "/media/{mediatype}/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (logoutMediaData != null && logoutMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(logoutMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logoutMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// set a comment. set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetComment (string mediatype, string id, AddCommentData addCommentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetCommentWithHttpInfo(mediatype, id, addCommentData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// set a comment. set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetCommentWithHttpInfo (string mediatype, string id, AddCommentData addCommentData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->SetComment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->SetComment");
            // verify the required parameter 'addCommentData' is set
            if (addCommentData == null)
                throw new ApiException(400, "Missing required parameter 'addCommentData' when calling MediaApi->SetComment");

            var localVarPath = "/media/{mediatype}/interactions/{id}/set-comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (addCommentData != null && addCommentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addCommentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCommentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// set a comment. set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetCommentAsync (string mediatype, string id, AddCommentData addCommentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetCommentAsyncWithHttpInfo(mediatype, id, addCommentData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// set a comment. set a comment to the specified interaction. If a comment already exists, it&#39;s overridden.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="addCommentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetCommentAsyncWithHttpInfo (string mediatype, string id, AddCommentData addCommentData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->SetComment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->SetComment");
            // verify the required parameter 'addCommentData' is set
            if (addCommentData == null)
                throw new ApiException(400, "Missing required parameter 'addCommentData' when calling MediaApi->SetComment");

            var localVarPath = "/media/{mediatype}/interactions/{id}/set-comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (addCommentData != null && addCommentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addCommentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCommentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Transfer the interaction. Transfer the interaction to the specified agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse TransferAgent (string mediatype, string id, TransferData transferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = TransferAgentWithHttpInfo(mediatype, id, transferData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer the interaction. Transfer the interaction to the specified agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > TransferAgentWithHttpInfo (string mediatype, string id, TransferData transferData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->TransferAgent");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->TransferAgent");
            // verify the required parameter 'transferData' is set
            if (transferData == null)
                throw new ApiException(400, "Missing required parameter 'transferData' when calling MediaApi->TransferAgent");

            var localVarPath = "/media/{mediatype}/interactions/{id}/transfer-agent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (transferData != null && transferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Transfer the interaction. Transfer the interaction to the specified agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> TransferAgentAsync (string mediatype, string id, TransferData transferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await TransferAgentAsyncWithHttpInfo(mediatype, id, transferData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer the interaction. Transfer the interaction to the specified agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="transferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> TransferAgentAsyncWithHttpInfo (string mediatype, string id, TransferData transferData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->TransferAgent");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->TransferAgent");
            // verify the required parameter 'transferData' is set
            if (transferData == null)
                throw new ApiException(400, "Missing required parameter 'transferData' when calling MediaApi->TransferAgent");

            var localVarPath = "/media/{mediatype}/interactions/{id}/transfer-agent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (transferData != null && transferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferAgent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data for an interaction. Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UpdateMediaUserData (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UpdateMediaUserDataWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user data for an interaction. Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UpdateMediaUserDataWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->UpdateMediaUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->UpdateMediaUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->UpdateMediaUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data for an interaction. Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UpdateMediaUserDataAsync (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UpdateMediaUserDataAsyncWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user data for an interaction. Update the interaction with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">The media channel.</param>
        /// <param name="id">The ID of the interaction.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateMediaUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->UpdateMediaUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->UpdateMediaUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->UpdateMediaUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
