/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Workspace.Client;
using Genesys.Internal.Workspace.Model;

namespace Genesys.Internal.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Alternate between calls.
        /// </summary>
        /// <remarks>
        /// Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Alternate (string id, AlternateData alternateData);

        /// <summary>
        /// Alternate between calls.
        /// </summary>
        /// <remarks>
        /// Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AlternateWithHttpInfo (string id, AlternateData alternateData);
        /// <summary>
        /// Answer the specified call.
        /// </summary>
        /// <remarks>
        /// Answer the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Answer (string id, AnswerData answerData = null);

        /// <summary>
        /// Answer the specified call.
        /// </summary>
        /// <remarks>
        /// Answer the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AnswerWithHttpInfo (string id, AnswerData answerData = null);
        /// <summary>
        /// Attach user data to a call.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AttachUserData (string id, UserData userData);

        /// <summary>
        /// Attach user data to a call.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AttachUserDataWithHttpInfo (string id, UserData userData);
        /// <summary>
        /// Cancel call forwarding.
        /// </summary>
        /// <remarks>
        /// Cancel call forwarding for the current agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CancelForward ();

        /// <summary>
        /// Cancel call forwarding.
        /// </summary>
        /// <remarks>
        /// Cancel call forwarding for the current agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CancelForwardWithHttpInfo ();
        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Clear (string id, ClearData clearData);

        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ClearWithHttpInfo (string id, ClearData clearData);
        /// <summary>
        /// Complete the specified call.
        /// </summary>
        /// <remarks>
        /// Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CompleteCall (string id, UserData1 userData);

        /// <summary>
        /// Complete the specified call.
        /// </summary>
        /// <remarks>
        /// Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CompleteCallWithHttpInfo (string id, UserData1 userData);
        /// <summary>
        /// Complete a conference.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CompleteConference (string id, CompleteConferenceData completeConferenceData);

        /// <summary>
        /// Complete a conference.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CompleteConferenceWithHttpInfo (string id, CompleteConferenceData completeConferenceData);
        /// <summary>
        /// Complete a transfer.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step transfer using the provided IDs.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CompleteTransfer (string id, CompleteTransferData completeTransferData);

        /// <summary>
        /// Complete a transfer.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step transfer using the provided IDs.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CompleteTransferWithHttpInfo (string id, CompleteTransferData completeTransferData);
        /// <summary>
        /// Delete a party from a conference call.
        /// </summary>
        /// <remarks>
        /// Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteFromConference (string id, DeleteFromConferenceData deleteFromConferenceData);

        /// <summary>
        /// Delete a party from a conference call.
        /// </summary>
        /// <remarks>
        /// Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteFromConferenceWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData);
        /// <summary>
        /// Remove a key/value pair from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified key from the call&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteUserDataPair (string id, KeyData keyData);

        /// <summary>
        /// Remove a key/value pair from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified key from the call&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteUserDataPairWithHttpInfo (string id, KeyData keyData);
        /// <summary>
        /// Forward calls.
        /// </summary>
        /// <remarks>
        /// Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Forward (ForwardData forwardData);

        /// <summary>
        /// Forward calls.
        /// </summary>
        /// <remarks>
        /// Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ForwardWithHttpInfo (ForwardData forwardData);
        /// <summary>
        /// Get all calls.
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetCalls ();

        /// <summary>
        /// Get all calls.
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetCallsWithHttpInfo ();
        /// <summary>
        /// Place the specified call on hold.
        /// </summary>
        /// <remarks>
        /// Place the specified call on hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Hold (string id, HoldData holdData = null);

        /// <summary>
        /// Place the specified call on hold.
        /// </summary>
        /// <remarks>
        /// Place the specified call on hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> HoldWithHttpInfo (string id, HoldData holdData = null);
        /// <summary>
        /// Initiate a conference.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse InitiateConference (string id, InitiateConferenceData initiateConferenceData);

        /// <summary>
        /// Initiate a conference.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> InitiateConferenceWithHttpInfo (string id, InitiateConferenceData initiateConferenceData);
        /// <summary>
        /// Initiate a transfer.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse InitiateTransfer (string id, InitiateTransferData initiateTransferData);

        /// <summary>
        /// Initiate a transfer.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> InitiateTransferWithHttpInfo (string id, InitiateTransferData initiateTransferData);
        /// <summary>
        /// Login on the voice channel.
        /// </summary>
        /// <remarks>
        /// Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LoginVoice ();

        /// <summary>
        /// Login on the voice channel.
        /// </summary>
        /// <remarks>
        /// Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LoginVoiceWithHttpInfo ();
        /// <summary>
        /// Log out of the voice channel.
        /// </summary>
        /// <remarks>
        /// Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LogoutVoice ();

        /// <summary>
        /// Log out of the voice channel.
        /// </summary>
        /// <remarks>
        /// Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LogoutVoiceWithHttpInfo ();
        /// <summary>
        /// Make a new call.
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MakeCall (MakeCallData makeCallData);

        /// <summary>
        /// Make a new call.
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MakeCallWithHttpInfo (MakeCallData makeCallData);
        /// <summary>
        /// Merge the two specified calls.
        /// </summary>
        /// <remarks>
        /// Merge the two specified calls.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Merge (string id, MergeData mergeData);

        /// <summary>
        /// Merge the two specified calls.
        /// </summary>
        /// <remarks>
        /// Merge the two specified calls.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MergeWithHttpInfo (string id, MergeData mergeData);
        /// <summary>
        /// Pause recording on the specified call.
        /// </summary>
        /// <remarks>
        /// Pause recording on the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse PauseRecording (string id);

        /// <summary>
        /// Pause recording on the specified call.
        /// </summary>
        /// <remarks>
        /// Pause recording on the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> PauseRecordingWithHttpInfo (string id);
        /// <summary>
        /// Reconnect a call.
        /// </summary>
        /// <remarks>
        /// Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Reconnect (string id, ReconnectData reconnectData);

        /// <summary>
        /// Reconnect a call.
        /// </summary>
        /// <remarks>
        /// Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReconnectWithHttpInfo (string id, ReconnectData reconnectData);
        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Redirect a call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Redirect (string id, RedirectData redirectData);

        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Redirect a call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RedirectWithHttpInfo (string id, RedirectData redirectData);
        /// <summary>
        /// Release the specified call.
        /// </summary>
        /// <remarks>
        /// Release the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Release (string id, ReleaseData releaseData = null);

        /// <summary>
        /// Release the specified call.
        /// </summary>
        /// <remarks>
        /// Release the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReleaseWithHttpInfo (string id, ReleaseData releaseData = null);
        /// <summary>
        /// Resume recording the specified call.
        /// </summary>
        /// <remarks>
        /// Resume recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ResumeRecording (string id);

        /// <summary>
        /// Resume recording the specified call.
        /// </summary>
        /// <remarks>
        /// Resume recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ResumeRecordingWithHttpInfo (string id);
        /// <summary>
        /// Retrieve the specified call from hold.
        /// </summary>
        /// <remarks>
        /// Retrieve the specified call from hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Retrieve (string id, RetrieveData retrieveData = null);

        /// <summary>
        /// Retrieve the specified call from hold.
        /// </summary>
        /// <remarks>
        /// Retrieve the specified call from hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RetrieveWithHttpInfo (string id, RetrieveData retrieveData = null);
        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SendDTMF (string id, SendDTMFData sendDTMFData);

        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SendDTMFWithHttpInfo (string id, SendDTMFData sendDTMFData);
        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data.
        /// </summary>
        /// <remarks>
        /// Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SendUserEvent (SendUserEventData userEventData);

        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data.
        /// </summary>
        /// <remarks>
        /// Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SendUserEventWithHttpInfo (SendUserEventData userEventData);
        /// <summary>
        /// Set the agent state to NotReady.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to NotReady on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetAgentStateNotReady (NotReadyData notReadyData = null);

        /// <summary>
        /// Set the agent state to NotReady.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to NotReady on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetAgentStateNotReadyWithHttpInfo (NotReadyData notReadyData = null);
        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetAgentStateReady (ReadyData readyData = null);

        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetAgentStateReadyWithHttpInfo (ReadyData readyData = null);
        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetDNDOff ();

        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetDNDOffWithHttpInfo ();
        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetDNDOn ();

        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetDNDOnWithHttpInfo ();
        /// <summary>
        /// Create a conference in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SingleStepConference (string id, SingleStepConferenceData singleStepConferenceData);

        /// <summary>
        /// Create a conference in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SingleStepConferenceWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData);
        /// <summary>
        /// Transfer a call in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SingleStepTransfer (string id, SingleStepTransferData singleStepTransferData);

        /// <summary>
        /// Transfer a call in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SingleStepTransferWithHttpInfo (string id, SingleStepTransferData singleStepTransferData);
        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StartMonitoring (StartMonitoringData startMonitoringData);

        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StartMonitoringWithHttpInfo (StartMonitoringData startMonitoringData);
        /// <summary>
        /// Start recording the specified call.
        /// </summary>
        /// <remarks>
        /// Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StartRecording (string id);

        /// <summary>
        /// Start recording the specified call.
        /// </summary>
        /// <remarks>
        /// Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StartRecordingWithHttpInfo (string id);
        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop monitoring an agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StopMonitoring (StopMonitoringData stopMonitoringData);

        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop monitoring an agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StopMonitoringWithHttpInfo (StopMonitoringData stopMonitoringData);
        /// <summary>
        /// Stop recording the specified call.
        /// </summary>
        /// <remarks>
        /// Stop recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StopRecording (string id);

        /// <summary>
        /// Stop recording the specified call.
        /// </summary>
        /// <remarks>
        /// Stop recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StopRecordingWithHttpInfo (string id);
        /// <summary>
        /// Switch to the barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToBargeIn (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to the barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToBargeInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to the coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToCoaching (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to the coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToCoachingWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to the listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToListenIn (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to the listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToListenInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Update user data for a call.
        /// </summary>
        /// <remarks>
        /// Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UpdateUserData (string id, UserData userData);

        /// <summary>
        /// Update user data for a call.
        /// </summary>
        /// <remarks>
        /// Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UpdateUserDataWithHttpInfo (string id, UserData userData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Alternate between calls.
        /// </summary>
        /// <remarks>
        /// Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AlternateAsync (string id, AlternateData alternateData);

        /// <summary>
        /// Alternate between calls.
        /// </summary>
        /// <remarks>
        /// Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AlternateAsyncWithHttpInfo (string id, AlternateData alternateData);
        /// <summary>
        /// Answer the specified call.
        /// </summary>
        /// <remarks>
        /// Answer the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AnswerAsync (string id, AnswerData answerData = null);

        /// <summary>
        /// Answer the specified call.
        /// </summary>
        /// <remarks>
        /// Answer the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AnswerAsyncWithHttpInfo (string id, AnswerData answerData = null);
        /// <summary>
        /// Attach user data to a call.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AttachUserDataAsync (string id, UserData userData);

        /// <summary>
        /// Attach user data to a call.
        /// </summary>
        /// <remarks>
        /// Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AttachUserDataAsyncWithHttpInfo (string id, UserData userData);
        /// <summary>
        /// Cancel call forwarding.
        /// </summary>
        /// <remarks>
        /// Cancel call forwarding for the current agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CancelForwardAsync ();

        /// <summary>
        /// Cancel call forwarding.
        /// </summary>
        /// <remarks>
        /// Cancel call forwarding for the current agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CancelForwardAsyncWithHttpInfo ();
        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ClearAsync (string id, ClearData clearData);

        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ClearAsyncWithHttpInfo (string id, ClearData clearData);
        /// <summary>
        /// Complete the specified call.
        /// </summary>
        /// <remarks>
        /// Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CompleteCallAsync (string id, UserData1 userData);

        /// <summary>
        /// Complete the specified call.
        /// </summary>
        /// <remarks>
        /// Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteCallAsyncWithHttpInfo (string id, UserData1 userData);
        /// <summary>
        /// Complete a conference.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CompleteConferenceAsync (string id, CompleteConferenceData completeConferenceData);

        /// <summary>
        /// Complete a conference.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteConferenceAsyncWithHttpInfo (string id, CompleteConferenceData completeConferenceData);
        /// <summary>
        /// Complete a transfer.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step transfer using the provided IDs.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CompleteTransferAsync (string id, CompleteTransferData completeTransferData);

        /// <summary>
        /// Complete a transfer.
        /// </summary>
        /// <remarks>
        /// Complete a previously initiated two-step transfer using the provided IDs.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteTransferAsyncWithHttpInfo (string id, CompleteTransferData completeTransferData);
        /// <summary>
        /// Delete a party from a conference call.
        /// </summary>
        /// <remarks>
        /// Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteFromConferenceAsync (string id, DeleteFromConferenceData deleteFromConferenceData);

        /// <summary>
        /// Delete a party from a conference call.
        /// </summary>
        /// <remarks>
        /// Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteFromConferenceAsyncWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData);
        /// <summary>
        /// Remove a key/value pair from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified key from the call&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserDataPairAsync (string id, KeyData keyData);

        /// <summary>
        /// Remove a key/value pair from user data.
        /// </summary>
        /// <remarks>
        /// Delete data with the specified key from the call&#39;s user data.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserDataPairAsyncWithHttpInfo (string id, KeyData keyData);
        /// <summary>
        /// Forward calls.
        /// </summary>
        /// <remarks>
        /// Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ForwardAsync (ForwardData forwardData);

        /// <summary>
        /// Forward calls.
        /// </summary>
        /// <remarks>
        /// Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ForwardAsyncWithHttpInfo (ForwardData forwardData);
        /// <summary>
        /// Get all calls.
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetCallsAsync ();

        /// <summary>
        /// Get all calls.
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCallsAsyncWithHttpInfo ();
        /// <summary>
        /// Place the specified call on hold.
        /// </summary>
        /// <remarks>
        /// Place the specified call on hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> HoldAsync (string id, HoldData holdData = null);

        /// <summary>
        /// Place the specified call on hold.
        /// </summary>
        /// <remarks>
        /// Place the specified call on hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> HoldAsyncWithHttpInfo (string id, HoldData holdData = null);
        /// <summary>
        /// Initiate a conference.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> InitiateConferenceAsync (string id, InitiateConferenceData initiateConferenceData);

        /// <summary>
        /// Initiate a conference.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateConferenceAsyncWithHttpInfo (string id, InitiateConferenceData initiateConferenceData);
        /// <summary>
        /// Initiate a transfer.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> InitiateTransferAsync (string id, InitiateTransferData initiateTransferData);

        /// <summary>
        /// Initiate a transfer.
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateTransferAsyncWithHttpInfo (string id, InitiateTransferData initiateTransferData);
        /// <summary>
        /// Login on the voice channel.
        /// </summary>
        /// <remarks>
        /// Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LoginVoiceAsync ();

        /// <summary>
        /// Login on the voice channel.
        /// </summary>
        /// <remarks>
        /// Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LoginVoiceAsyncWithHttpInfo ();
        /// <summary>
        /// Log out of the voice channel.
        /// </summary>
        /// <remarks>
        /// Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LogoutVoiceAsync ();

        /// <summary>
        /// Log out of the voice channel.
        /// </summary>
        /// <remarks>
        /// Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutVoiceAsyncWithHttpInfo ();
        /// <summary>
        /// Make a new call.
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MakeCallAsync (MakeCallData makeCallData);

        /// <summary>
        /// Make a new call.
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MakeCallAsyncWithHttpInfo (MakeCallData makeCallData);
        /// <summary>
        /// Merge the two specified calls.
        /// </summary>
        /// <remarks>
        /// Merge the two specified calls.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MergeAsync (string id, MergeData mergeData);

        /// <summary>
        /// Merge the two specified calls.
        /// </summary>
        /// <remarks>
        /// Merge the two specified calls.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MergeAsyncWithHttpInfo (string id, MergeData mergeData);
        /// <summary>
        /// Pause recording on the specified call.
        /// </summary>
        /// <remarks>
        /// Pause recording on the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> PauseRecordingAsync (string id);

        /// <summary>
        /// Pause recording on the specified call.
        /// </summary>
        /// <remarks>
        /// Pause recording on the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PauseRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Reconnect a call.
        /// </summary>
        /// <remarks>
        /// Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReconnectAsync (string id, ReconnectData reconnectData);

        /// <summary>
        /// Reconnect a call.
        /// </summary>
        /// <remarks>
        /// Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReconnectAsyncWithHttpInfo (string id, ReconnectData reconnectData);
        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Redirect a call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RedirectAsync (string id, RedirectData redirectData);

        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Redirect a call to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RedirectAsyncWithHttpInfo (string id, RedirectData redirectData);
        /// <summary>
        /// Release the specified call.
        /// </summary>
        /// <remarks>
        /// Release the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReleaseAsync (string id, ReleaseData releaseData = null);

        /// <summary>
        /// Release the specified call.
        /// </summary>
        /// <remarks>
        /// Release the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReleaseAsyncWithHttpInfo (string id, ReleaseData releaseData = null);
        /// <summary>
        /// Resume recording the specified call.
        /// </summary>
        /// <remarks>
        /// Resume recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ResumeRecordingAsync (string id);

        /// <summary>
        /// Resume recording the specified call.
        /// </summary>
        /// <remarks>
        /// Resume recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ResumeRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieve the specified call from hold.
        /// </summary>
        /// <remarks>
        /// Retrieve the specified call from hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RetrieveAsync (string id, RetrieveData retrieveData = null);

        /// <summary>
        /// Retrieve the specified call from hold.
        /// </summary>
        /// <remarks>
        /// Retrieve the specified call from hold.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RetrieveAsyncWithHttpInfo (string id, RetrieveData retrieveData = null);
        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SendDTMFAsync (string id, SendDTMFData sendDTMFData);

        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendDTMFAsyncWithHttpInfo (string id, SendDTMFData sendDTMFData);
        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data.
        /// </summary>
        /// <remarks>
        /// Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SendUserEventAsync (SendUserEventData userEventData);

        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data.
        /// </summary>
        /// <remarks>
        /// Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendUserEventAsyncWithHttpInfo (SendUserEventData userEventData);
        /// <summary>
        /// Set the agent state to NotReady.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to NotReady on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateNotReadyAsync (NotReadyData notReadyData = null);

        /// <summary>
        /// Set the agent state to NotReady.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to NotReady on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateNotReadyAsyncWithHttpInfo (NotReadyData notReadyData = null);
        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateReadyAsync (ReadyData readyData = null);

        /// <summary>
        /// Set the agent state to Ready.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Ready on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateReadyAsyncWithHttpInfo (ReadyData readyData = null);
        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOffAsync ();

        /// <summary>
        /// Turn off Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Turn off Do Not Disturb for the current agent on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOffAsyncWithHttpInfo ();
        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOnAsync ();

        /// <summary>
        /// Set the agent state to Do Not Disturb.
        /// </summary>
        /// <remarks>
        /// Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOnAsyncWithHttpInfo ();
        /// <summary>
        /// Create a conference in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepConferenceAsync (string id, SingleStepConferenceData singleStepConferenceData);

        /// <summary>
        /// Create a conference in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepConferenceAsyncWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData);
        /// <summary>
        /// Transfer a call in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepTransferAsync (string id, SingleStepTransferData singleStepTransferData);

        /// <summary>
        /// Transfer a call in a single step.
        /// </summary>
        /// <remarks>
        /// Perform a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepTransferAsyncWithHttpInfo (string id, SingleStepTransferData singleStepTransferData);
        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StartMonitoringAsync (StartMonitoringData startMonitoringData);

        /// <summary>
        /// Start monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartMonitoringAsyncWithHttpInfo (StartMonitoringData startMonitoringData);
        /// <summary>
        /// Start recording the specified call.
        /// </summary>
        /// <remarks>
        /// Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StartRecordingAsync (string id);

        /// <summary>
        /// Start recording the specified call.
        /// </summary>
        /// <remarks>
        /// Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop monitoring an agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StopMonitoringAsync (StopMonitoringData stopMonitoringData);

        /// <summary>
        /// Stop monitoring an agent.
        /// </summary>
        /// <remarks>
        /// Stop monitoring an agent.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopMonitoringAsyncWithHttpInfo (StopMonitoringData stopMonitoringData);
        /// <summary>
        /// Stop recording the specified call.
        /// </summary>
        /// <remarks>
        /// Stop recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StopRecordingAsync (string id);

        /// <summary>
        /// Stop recording the specified call.
        /// </summary>
        /// <remarks>
        /// Stop recording the specified call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Switch to the barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToBargeInAsync (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to the barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToBargeInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to the coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToCoachingAsync (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to the coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToCoachingAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to the listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToListenInAsync (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to the listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToListenInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Update user data for a call.
        /// </summary>
        /// <remarks>
        /// Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserDataAsync (string id, UserData userData);

        /// <summary>
        /// Update user data for a call.
        /// </summary>
        /// <remarks>
        /// Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserDataAsyncWithHttpInfo (string id, UserData userData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VoiceApi : IVoiceApi
    {
        private Genesys.Internal.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoiceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VoiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Alternate between calls. Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Alternate (string id, AlternateData alternateData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AlternateWithHttpInfo(id, alternateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alternate between calls. Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AlternateWithHttpInfo (string id, AlternateData alternateData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Alternate");
            // verify the required parameter 'alternateData' is set
            if (alternateData == null)
                throw new ApiException(400, "Missing required parameter 'alternateData' when calling VoiceApi->Alternate");

            var localVarPath = "/voice/calls/{id}/alternate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alternateData != null && alternateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alternateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alternateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Alternate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Alternate between calls. Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AlternateAsync (string id, AlternateData alternateData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AlternateAsyncWithHttpInfo(id, alternateData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alternate between calls. Alternate two calls so that you retrieve a call on hold and place the established call on hold instead. This is a shortcut for doing &#x60;/workspace/v3/voice/calls/{id}/hold&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60; separately.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call that should be placed on hold.</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AlternateAsyncWithHttpInfo (string id, AlternateData alternateData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Alternate");
            // verify the required parameter 'alternateData' is set
            if (alternateData == null)
                throw new ApiException(400, "Missing required parameter 'alternateData' when calling VoiceApi->Alternate");

            var localVarPath = "/voice/calls/{id}/alternate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alternateData != null && alternateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alternateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alternateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Alternate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Answer the specified call. Answer the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Answer (string id, AnswerData answerData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AnswerWithHttpInfo(id, answerData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Answer the specified call. Answer the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AnswerWithHttpInfo (string id, AnswerData answerData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Answer");

            var localVarPath = "/voice/calls/{id}/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (answerData != null && answerData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answerData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answerData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Answer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Answer the specified call. Answer the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AnswerAsync (string id, AnswerData answerData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AnswerAsyncWithHttpInfo(id, answerData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Answer the specified call. Answer the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AnswerAsyncWithHttpInfo (string id, AnswerData answerData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Answer");

            var localVarPath = "/voice/calls/{id}/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (answerData != null && answerData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answerData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answerData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Answer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to a call. Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AttachUserData (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AttachUserDataWithHttpInfo(id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach user data to a call. Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AttachUserDataWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->AttachUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->AttachUserData");

            var localVarPath = "/voice/calls/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to a call. Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AttachUserDataAsync (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AttachUserDataAsyncWithHttpInfo(id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach user data to a call. Attach the provided data to the specified call. This adds the data to the call even if data already exists with the provided keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to attach to the call. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AttachUserDataAsyncWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->AttachUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->AttachUserData");

            var localVarPath = "/voice/calls/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Cancel call forwarding. Cancel call forwarding for the current agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CancelForward ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CancelForwardWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel call forwarding. Cancel call forwarding for the current agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CancelForwardWithHttpInfo ()
        {

            var localVarPath = "/voice/cancel-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelForward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Cancel call forwarding. Cancel call forwarding for the current agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CancelForwardAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CancelForwardAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel call forwarding. Cancel call forwarding for the current agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CancelForwardAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/cancel-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelForward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Clear all the parties in the call. End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Clear (string id, ClearData clearData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ClearWithHttpInfo(id, clearData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear all the parties in the call. End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ClearWithHttpInfo (string id, ClearData clearData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Clear");
            // verify the required parameter 'clearData' is set
            if (clearData == null)
                throw new ApiException(400, "Missing required parameter 'clearData' when calling VoiceApi->Clear");

            var localVarPath = "/voice/calls/{id}/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearData != null && clearData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clearData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Clear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Clear all the parties in the call. End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ClearAsync (string id, ClearData clearData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ClearAsyncWithHttpInfo(id, clearData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear all the parties in the call. End the conference call for all parties. This can be performed by any agent participating in the conference.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to clear.</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ClearAsyncWithHttpInfo (string id, ClearData clearData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Clear");
            // verify the required parameter 'clearData' is set
            if (clearData == null)
                throw new ApiException(400, "Missing required parameter 'clearData' when calling VoiceApi->Clear");

            var localVarPath = "/voice/calls/{id}/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearData != null && clearData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clearData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Clear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete the specified call. Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CompleteCall (string id, UserData1 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CompleteCallWithHttpInfo(id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete the specified call. Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CompleteCallWithHttpInfo (string id, UserData1 userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteCall");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->CompleteCall");

            var localVarPath = "/voice/calls/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete the specified call. Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CompleteCallAsync (string id, UserData1 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CompleteCallAsyncWithHttpInfo(id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete the specified call. Complete the specified call by adding information to its user data after it has been released. You should make this request on released calls if you set automatic complete to false in &#x60;/workspace/v3/activate-channels&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">Key/value data to include with the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteCallAsyncWithHttpInfo (string id, UserData1 userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteCall");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->CompleteCall");

            var localVarPath = "/voice/calls/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a conference. Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CompleteConference (string id, CompleteConferenceData completeConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CompleteConferenceWithHttpInfo(id, completeConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete a conference. Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CompleteConferenceWithHttpInfo (string id, CompleteConferenceData completeConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteConference");
            // verify the required parameter 'completeConferenceData' is set
            if (completeConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'completeConferenceData' when calling VoiceApi->CompleteConference");

            var localVarPath = "/voice/calls/{id}/complete-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeConferenceData != null && completeConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a conference. Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CompleteConferenceAsync (string id, CompleteConferenceData completeConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CompleteConferenceAsyncWithHttpInfo(id, completeConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete a conference. Complete a previously initiated two-step conference identified by the provided IDs. Once completed, the two separate calls are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteConferenceAsyncWithHttpInfo (string id, CompleteConferenceData completeConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteConference");
            // verify the required parameter 'completeConferenceData' is set
            if (completeConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'completeConferenceData' when calling VoiceApi->CompleteConference");

            var localVarPath = "/voice/calls/{id}/complete-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeConferenceData != null && completeConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a transfer. Complete a previously initiated two-step transfer using the provided IDs.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CompleteTransfer (string id, CompleteTransferData completeTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CompleteTransferWithHttpInfo(id, completeTransferData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete a transfer. Complete a previously initiated two-step transfer using the provided IDs.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CompleteTransferWithHttpInfo (string id, CompleteTransferData completeTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteTransfer");
            // verify the required parameter 'completeTransferData' is set
            if (completeTransferData == null)
                throw new ApiException(400, "Missing required parameter 'completeTransferData' when calling VoiceApi->CompleteTransfer");

            var localVarPath = "/voice/calls/{id}/complete-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeTransferData != null && completeTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a transfer. Complete a previously initiated two-step transfer using the provided IDs.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CompleteTransferAsync (string id, CompleteTransferData completeTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CompleteTransferAsyncWithHttpInfo(id, completeTransferData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete a transfer. Complete a previously initiated two-step transfer using the provided IDs.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the consult call (established).</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteTransferAsyncWithHttpInfo (string id, CompleteTransferData completeTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteTransfer");
            // verify the required parameter 'completeTransferData' is set
            if (completeTransferData == null)
                throw new ApiException(400, "Missing required parameter 'completeTransferData' when calling VoiceApi->CompleteTransfer");

            var localVarPath = "/voice/calls/{id}/complete-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeTransferData != null && completeTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Delete a party from a conference call. Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteFromConference (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteFromConferenceWithHttpInfo(id, deleteFromConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a party from a conference call. Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteFromConferenceWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteFromConference");
            // verify the required parameter 'deleteFromConferenceData' is set
            if (deleteFromConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'deleteFromConferenceData' when calling VoiceApi->DeleteFromConference");

            var localVarPath = "/voice/calls/{id}/delete-from-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteFromConferenceData != null && deleteFromConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteFromConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteFromConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFromConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Delete a party from a conference call. Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteFromConferenceAsync (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteFromConferenceAsyncWithHttpInfo(id, deleteFromConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a party from a conference call. Delete the specified DN from the conference call. This operation can only be performed by the owner of the conference call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the conference call.</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteFromConferenceAsyncWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteFromConference");
            // verify the required parameter 'deleteFromConferenceData' is set
            if (deleteFromConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'deleteFromConferenceData' when calling VoiceApi->DeleteFromConference");

            var localVarPath = "/voice/calls/{id}/delete-from-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteFromConferenceData != null && deleteFromConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteFromConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteFromConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFromConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove a key/value pair from user data. Delete data with the specified key from the call&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteUserDataPair (string id, KeyData keyData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteUserDataPairWithHttpInfo(id, keyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a key/value pair from user data. Delete data with the specified key from the call&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteUserDataPairWithHttpInfo (string id, KeyData keyData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteUserDataPair");
            // verify the required parameter 'keyData' is set
            if (keyData == null)
                throw new ApiException(400, "Missing required parameter 'keyData' when calling VoiceApi->DeleteUserDataPair");

            var localVarPath = "/voice/calls/{id}/delete-user-data-pair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keyData != null && keyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(keyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = keyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserDataPair", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove a key/value pair from user data. Delete data with the specified key from the call&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserDataPairAsync (string id, KeyData keyData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteUserDataPairAsyncWithHttpInfo(id, keyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a key/value pair from user data. Delete data with the specified key from the call&#39;s user data.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="keyData">The key of the data to remove.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserDataPairAsyncWithHttpInfo (string id, KeyData keyData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteUserDataPair");
            // verify the required parameter 'keyData' is set
            if (keyData == null)
                throw new ApiException(400, "Missing required parameter 'keyData' when calling VoiceApi->DeleteUserDataPair");

            var localVarPath = "/voice/calls/{id}/delete-user-data-pair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keyData != null && keyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(keyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = keyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserDataPair", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Forward calls. Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Forward (ForwardData forwardData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ForwardWithHttpInfo(forwardData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Forward calls. Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ForwardWithHttpInfo (ForwardData forwardData)
        {
            // verify the required parameter 'forwardData' is set
            if (forwardData == null)
                throw new ApiException(400, "Missing required parameter 'forwardData' when calling VoiceApi->Forward");

            var localVarPath = "/voice/set-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forwardData != null && forwardData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(forwardData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Forward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Forward calls. Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ForwardAsync (ForwardData forwardData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ForwardAsyncWithHttpInfo(forwardData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Forward calls. Set call forwarding on the current agent&#39;s DN to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ForwardAsyncWithHttpInfo (ForwardData forwardData)
        {
            // verify the required parameter 'forwardData' is set
            if (forwardData == null)
                throw new ApiException(400, "Missing required parameter 'forwardData' when calling VoiceApi->Forward");

            var localVarPath = "/voice/set-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forwardData != null && forwardData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(forwardData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Forward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get all calls. Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetCalls ()
        {
             ApiResponse<InlineResponse200> localVarResponse = GetCallsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all calls. Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetCallsWithHttpInfo ()
        {

            var localVarPath = "/voice/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get all calls. Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetCallsAsync ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetCallsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all calls. Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCallsAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Place the specified call on hold. Place the specified call on hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Hold (string id, HoldData holdData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = HoldWithHttpInfo(id, holdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place the specified call on hold. Place the specified call on hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > HoldWithHttpInfo (string id, HoldData holdData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Hold");

            var localVarPath = "/voice/calls/{id}/hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (holdData != null && holdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(holdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = holdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Hold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Place the specified call on hold. Place the specified call on hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> HoldAsync (string id, HoldData holdData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await HoldAsyncWithHttpInfo(id, holdData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place the specified call on hold. Place the specified call on hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> HoldAsyncWithHttpInfo (string id, HoldData holdData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Hold");

            var localVarPath = "/voice/calls/{id}/hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (holdData != null && holdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(holdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = holdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Hold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a conference. Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse InitiateConference (string id, InitiateConferenceData initiateConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = InitiateConferenceWithHttpInfo(id, initiateConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a conference. Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > InitiateConferenceWithHttpInfo (string id, InitiateConferenceData initiateConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateConference");
            // verify the required parameter 'initiateConferenceData' is set
            if (initiateConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'initiateConferenceData' when calling VoiceApi->InitiateConference");

            var localVarPath = "/voice/calls/{id}/initiate-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateConferenceData != null && initiateConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a conference. Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> InitiateConferenceAsync (string id, InitiateConferenceData initiateConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await InitiateConferenceAsyncWithHttpInfo(id, initiateConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate a conference. Initiates a two-step conference to the specified destination. This places the existing call on hold and creates a new call in the dialing state (step 1). After initiating the conference you can use &#x60;/workspace/v3/voice/calls/{id}/complete-conference&#x60; to complete the conference and bring all parties into the same call (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to start the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateConferenceAsyncWithHttpInfo (string id, InitiateConferenceData initiateConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateConference");
            // verify the required parameter 'initiateConferenceData' is set
            if (initiateConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'initiateConferenceData' when calling VoiceApi->InitiateConference");

            var localVarPath = "/voice/calls/{id}/initiate-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateConferenceData != null && initiateConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a transfer. Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse InitiateTransfer (string id, InitiateTransferData initiateTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = InitiateTransferWithHttpInfo(id, initiateTransferData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a transfer. Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > InitiateTransferWithHttpInfo (string id, InitiateTransferData initiateTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateTransfer");
            // verify the required parameter 'initiateTransferData' is set
            if (initiateTransferData == null)
                throw new ApiException(400, "Missing required parameter 'initiateTransferData' when calling VoiceApi->InitiateTransfer");

            var localVarPath = "/voice/calls/{id}/initiate-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateTransferData != null && initiateTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a transfer. Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> InitiateTransferAsync (string id, InitiateTransferData initiateTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await InitiateTransferAsyncWithHttpInfo(id, initiateTransferData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate a transfer. Initiates a two-step transfer by placing the first call on hold and dialing the destination number (step 1). After initiating the transfer, you can use &#x60;/workspace/v3/voice/calls/{id}/complete-transfer&#x60; to complete the transfer (step 2).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to be transferred. This call will be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateTransferAsyncWithHttpInfo (string id, InitiateTransferData initiateTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateTransfer");
            // verify the required parameter 'initiateTransferData' is set
            if (initiateTransferData == null)
                throw new ApiException(400, "Missing required parameter 'initiateTransferData' when calling VoiceApi->InitiateTransfer");

            var localVarPath = "/voice/calls/{id}/initiate-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateTransferData != null && initiateTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Login on the voice channel. Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LoginVoice ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LoginVoiceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login on the voice channel. Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LoginVoiceWithHttpInfo ()
        {

            var localVarPath = "/voice/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Login on the voice channel. Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LoginVoiceAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LoginVoiceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login on the voice channel. Login the current agent on the voice channel. When you make this request, Workspace uses the parameters you provided in &#x60;/workspace/v3/activate-channels&#x60;. For most applications, you don&#39;t need to worry about logging in the agent on the voice channel because it&#39;s handled by the Workspace API when you &#x60;/workspace/v3/activate-channels&#x60;. However, if you make a &#x60;/workspace/v3/voice/logout&#x60; request, you can then use &#x60;/workspace/v3/voice/login&#x60; to login the agent on the voice channel. **Note: This login/logout flow only applies to the voice channel, not to the agent&#39;s session.**
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LoginVoiceAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of the voice channel. Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LogoutVoice ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LogoutVoiceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log out of the voice channel. Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LogoutVoiceWithHttpInfo ()
        {

            var localVarPath = "/voice/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of the voice channel. Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LogoutVoiceAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LogoutVoiceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log out of the voice channel. Logout the current agent on the voice channel. This request is typically paired with &#x60;/workspace/v3/voice/login&#x60; - together they let you login/logout an agent on the voice channel without logging out of the entire session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutVoiceAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Make a new call. Make a new call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MakeCall (MakeCallData makeCallData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MakeCallWithHttpInfo(makeCallData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Make a new call. Make a new call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MakeCallWithHttpInfo (MakeCallData makeCallData)
        {
            // verify the required parameter 'makeCallData' is set
            if (makeCallData == null)
                throw new ApiException(400, "Missing required parameter 'makeCallData' when calling VoiceApi->MakeCall");

            var localVarPath = "/voice/make-call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (makeCallData != null && makeCallData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(makeCallData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeCallData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MakeCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Make a new call. Make a new call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MakeCallAsync (MakeCallData makeCallData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MakeCallAsyncWithHttpInfo(makeCallData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Make a new call. Make a new call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MakeCallAsyncWithHttpInfo (MakeCallData makeCallData)
        {
            // verify the required parameter 'makeCallData' is set
            if (makeCallData == null)
                throw new ApiException(400, "Missing required parameter 'makeCallData' when calling VoiceApi->MakeCall");

            var localVarPath = "/voice/make-call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (makeCallData != null && makeCallData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(makeCallData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeCallData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MakeCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Merge the two specified calls. Merge the two specified calls.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Merge (string id, MergeData mergeData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MergeWithHttpInfo(id, mergeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge the two specified calls. Merge the two specified calls.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MergeWithHttpInfo (string id, MergeData mergeData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Merge");
            // verify the required parameter 'mergeData' is set
            if (mergeData == null)
                throw new ApiException(400, "Missing required parameter 'mergeData' when calling VoiceApi->Merge");

            var localVarPath = "/voice/calls/{id}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mergeData != null && mergeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Merge the two specified calls. Merge the two specified calls.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MergeAsync (string id, MergeData mergeData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MergeAsyncWithHttpInfo(id, mergeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge the two specified calls. Merge the two specified calls.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the first call to be merged.</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MergeAsyncWithHttpInfo (string id, MergeData mergeData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Merge");
            // verify the required parameter 'mergeData' is set
            if (mergeData == null)
                throw new ApiException(400, "Missing required parameter 'mergeData' when calling VoiceApi->Merge");

            var localVarPath = "/voice/calls/{id}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mergeData != null && mergeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Pause recording on the specified call. Pause recording on the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse PauseRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = PauseRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pause recording on the specified call. Pause recording on the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > PauseRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->PauseRecording");

            var localVarPath = "/voice/calls/{id}/pause-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Pause recording on the specified call. Pause recording on the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> PauseRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await PauseRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pause recording on the specified call. Pause recording on the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PauseRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->PauseRecording");

            var localVarPath = "/voice/calls/{id}/pause-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reconnect a call. Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Reconnect (string id, ReconnectData reconnectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReconnectWithHttpInfo(id, reconnectData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reconnect a call. Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReconnectWithHttpInfo (string id, ReconnectData reconnectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Reconnect");
            // verify the required parameter 'reconnectData' is set
            if (reconnectData == null)
                throw new ApiException(400, "Missing required parameter 'reconnectData' when calling VoiceApi->Reconnect");

            var localVarPath = "/voice/calls/{id}/reconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reconnectData != null && reconnectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reconnectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reconnectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reconnect a call. Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReconnectAsync (string id, ReconnectData reconnectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReconnectAsyncWithHttpInfo(id, reconnectData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reconnect a call. Reconnect the specified call. This releases the established call and retrieves the held call in one step. This is a quick way to to do &#x60;/workspace/v3/voice/calls/{id}/release&#x60; and &#x60;/workspace/v3/voice/calls/{id}/retrieve&#x60;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the established call (will be released).</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReconnectAsyncWithHttpInfo (string id, ReconnectData reconnectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Reconnect");
            // verify the required parameter 'reconnectData' is set
            if (reconnectData == null)
                throw new ApiException(400, "Missing required parameter 'reconnectData' when calling VoiceApi->Reconnect");

            var localVarPath = "/voice/calls/{id}/reconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reconnectData != null && reconnectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reconnectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reconnectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Redirect the call. Redirect a call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Redirect (string id, RedirectData redirectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RedirectWithHttpInfo(id, redirectData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Redirect the call. Redirect a call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RedirectWithHttpInfo (string id, RedirectData redirectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Redirect");
            // verify the required parameter 'redirectData' is set
            if (redirectData == null)
                throw new ApiException(400, "Missing required parameter 'redirectData' when calling VoiceApi->Redirect");

            var localVarPath = "/voice/calls/{id}/redirect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (redirectData != null && redirectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(redirectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = redirectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Redirect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Redirect the call. Redirect a call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RedirectAsync (string id, RedirectData redirectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RedirectAsyncWithHttpInfo(id, redirectData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Redirect the call. Redirect a call to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the current call to redirect.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RedirectAsyncWithHttpInfo (string id, RedirectData redirectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Redirect");
            // verify the required parameter 'redirectData' is set
            if (redirectData == null)
                throw new ApiException(400, "Missing required parameter 'redirectData' when calling VoiceApi->Redirect");

            var localVarPath = "/voice/calls/{id}/redirect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (redirectData != null && redirectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(redirectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = redirectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Redirect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Release the specified call. Release the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Release (string id, ReleaseData releaseData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReleaseWithHttpInfo(id, releaseData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Release the specified call. Release the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReleaseWithHttpInfo (string id, ReleaseData releaseData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Release");

            var localVarPath = "/voice/calls/{id}/release";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseData != null && releaseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Release", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Release the specified call. Release the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReleaseAsync (string id, ReleaseData releaseData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReleaseAsyncWithHttpInfo(id, releaseData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Release the specified call. Release the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReleaseAsyncWithHttpInfo (string id, ReleaseData releaseData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Release");

            var localVarPath = "/voice/calls/{id}/release";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseData != null && releaseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Release", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Resume recording the specified call. Resume recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ResumeRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ResumeRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resume recording the specified call. Resume recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ResumeRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->ResumeRecording");

            var localVarPath = "/voice/calls/{id}/resume-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumeRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Resume recording the specified call. Resume recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ResumeRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ResumeRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resume recording the specified call. Resume recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ResumeRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->ResumeRecording");

            var localVarPath = "/voice/calls/{id}/resume-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumeRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Retrieve the specified call from hold. Retrieve the specified call from hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Retrieve (string id, RetrieveData retrieveData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RetrieveWithHttpInfo(id, retrieveData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the specified call from hold. Retrieve the specified call from hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RetrieveWithHttpInfo (string id, RetrieveData retrieveData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Retrieve");

            var localVarPath = "/voice/calls/{id}/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (retrieveData != null && retrieveData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(retrieveData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retrieveData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Retrieve the specified call from hold. Retrieve the specified call from hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RetrieveAsync (string id, RetrieveData retrieveData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RetrieveAsyncWithHttpInfo(id, retrieveData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the specified call from hold. Retrieve the specified call from hold.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RetrieveAsyncWithHttpInfo (string id, RetrieveData retrieveData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Retrieve");

            var localVarPath = "/voice/calls/{id}/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (retrieveData != null && retrieveData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(retrieveData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retrieveData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send digits as DTMF. Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SendDTMF (string id, SendDTMFData sendDTMFData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SendDTMFWithHttpInfo(id, sendDTMFData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send digits as DTMF. Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SendDTMFWithHttpInfo (string id, SendDTMFData sendDTMFData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SendDTMF");
            // verify the required parameter 'sendDTMFData' is set
            if (sendDTMFData == null)
                throw new ApiException(400, "Missing required parameter 'sendDTMFData' when calling VoiceApi->SendDTMF");

            var localVarPath = "/voice/calls/{id}/send-dtmf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendDTMFData != null && sendDTMFData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sendDTMFData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendDTMFData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDTMF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send digits as DTMF. Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SendDTMFAsync (string id, SendDTMFData sendDTMFData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SendDTMFAsyncWithHttpInfo(id, sendDTMFData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send digits as DTMF. Send DTMF digits to the specified call. You can send DTMF digits individually with multiple requests or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendDTMFAsyncWithHttpInfo (string id, SendDTMFData sendDTMFData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SendDTMF");
            // verify the required parameter 'sendDTMFData' is set
            if (sendDTMFData == null)
                throw new ApiException(400, "Missing required parameter 'sendDTMFData' when calling VoiceApi->SendDTMF");

            var localVarPath = "/voice/calls/{id}/send-dtmf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendDTMFData != null && sendDTMFData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sendDTMFData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendDTMFData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDTMF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data. Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SendUserEvent (SendUserEventData userEventData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SendUserEventWithHttpInfo(userEventData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data. Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SendUserEventWithHttpInfo (SendUserEventData userEventData)
        {
            // verify the required parameter 'userEventData' is set
            if (userEventData == null)
                throw new ApiException(400, "Missing required parameter 'userEventData' when calling VoiceApi->SendUserEvent");

            var localVarPath = "/voice/send-user-event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEventData != null && userEventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userEventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEventData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendUserEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data. Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SendUserEventAsync (SendUserEventData userEventData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SendUserEventAsyncWithHttpInfo(userEventData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a userEvent event to T-Server with the provided attached data. Send EventUserEvent to T-Server with the provided attached data. For details about EventUserEvent, refer to the  [Genesys Events and Models Reference Manual](https://docs.genesys.com/Documentation/System).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">The data to send. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendUserEventAsyncWithHttpInfo (SendUserEventData userEventData)
        {
            // verify the required parameter 'userEventData' is set
            if (userEventData == null)
                throw new ApiException(400, "Missing required parameter 'userEventData' when calling VoiceApi->SendUserEvent");

            var localVarPath = "/voice/send-user-event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEventData != null && userEventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userEventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEventData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendUserEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to NotReady. Set the current agent&#39;s state to NotReady on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetAgentStateNotReady (NotReadyData notReadyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetAgentStateNotReadyWithHttpInfo(notReadyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to NotReady. Set the current agent&#39;s state to NotReady on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetAgentStateNotReadyWithHttpInfo (NotReadyData notReadyData = null)
        {

            var localVarPath = "/voice/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notReadyData != null && notReadyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateNotReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to NotReady. Set the current agent&#39;s state to NotReady on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateNotReadyAsync (NotReadyData notReadyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetAgentStateNotReadyAsyncWithHttpInfo(notReadyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to NotReady. Set the current agent&#39;s state to NotReady on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateNotReadyAsyncWithHttpInfo (NotReadyData notReadyData = null)
        {

            var localVarPath = "/voice/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notReadyData != null && notReadyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateNotReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetAgentStateReady (ReadyData readyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetAgentStateReadyWithHttpInfo(readyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetAgentStateReadyWithHttpInfo (ReadyData readyData = null)
        {

            var localVarPath = "/voice/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readyData != null && readyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateReadyAsync (ReadyData readyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetAgentStateReadyAsyncWithHttpInfo(readyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to Ready. Set the current agent&#39;s state to Ready on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateReadyAsyncWithHttpInfo (ReadyData readyData = null)
        {

            var localVarPath = "/voice/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readyData != null && readyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetDNDOff ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetDNDOffWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetDNDOffWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOffAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetDNDOffAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Turn off Do Not Disturb. Turn off Do Not Disturb for the current agent on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOffAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetDNDOn ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetDNDOnWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetDNDOnWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOnAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetDNDOnAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the agent state to Do Not Disturb. Set the current agent&#39;s state to Do Not Disturb on the voice channel.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOnAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create a conference in a single step. Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SingleStepConference (string id, SingleStepConferenceData singleStepConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SingleStepConferenceWithHttpInfo(id, singleStepConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a conference in a single step. Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SingleStepConferenceWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepConference");
            // verify the required parameter 'singleStepConferenceData' is set
            if (singleStepConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepConferenceData' when calling VoiceApi->SingleStepConference");

            var localVarPath = "/voice/calls/{id}/single-step-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepConferenceData != null && singleStepConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create a conference in a single step. Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepConferenceAsync (string id, SingleStepConferenceData singleStepConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SingleStepConferenceAsyncWithHttpInfo(id, singleStepConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a conference in a single step. Perform a single-step conference to the specified destination. This adds the destination to the existing call, creating a conference if necessary.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to conference.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepConferenceAsyncWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepConference");
            // verify the required parameter 'singleStepConferenceData' is set
            if (singleStepConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepConferenceData' when calling VoiceApi->SingleStepConference");

            var localVarPath = "/voice/calls/{id}/single-step-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepConferenceData != null && singleStepConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Transfer a call in a single step. Perform a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SingleStepTransfer (string id, SingleStepTransferData singleStepTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SingleStepTransferWithHttpInfo(id, singleStepTransferData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer a call in a single step. Perform a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SingleStepTransferWithHttpInfo (string id, SingleStepTransferData singleStepTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepTransfer");
            // verify the required parameter 'singleStepTransferData' is set
            if (singleStepTransferData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepTransferData' when calling VoiceApi->SingleStepTransfer");

            var localVarPath = "/voice/calls/{id}/single-step-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepTransferData != null && singleStepTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Transfer a call in a single step. Perform a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepTransferAsync (string id, SingleStepTransferData singleStepTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SingleStepTransferAsyncWithHttpInfo(id, singleStepTransferData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer a call in a single step. Perform a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call to transfer.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepTransferAsyncWithHttpInfo (string id, SingleStepTransferData singleStepTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepTransfer");
            // verify the required parameter 'singleStepTransferData' is set
            if (singleStepTransferData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepTransferData' when calling VoiceApi->SingleStepTransfer");

            var localVarPath = "/voice/calls/{id}/single-step-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepTransferData != null && singleStepTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StartMonitoring (StartMonitoringData startMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StartMonitoringWithHttpInfo(startMonitoringData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StartMonitoringWithHttpInfo (StartMonitoringData startMonitoringData)
        {
            // verify the required parameter 'startMonitoringData' is set
            if (startMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'startMonitoringData' when calling VoiceApi->StartMonitoring");

            var localVarPath = "/voice/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startMonitoringData != null && startMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StartMonitoringAsync (StartMonitoringData startMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StartMonitoringAsyncWithHttpInfo(startMonitoringData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start monitoring an agent. Start supervisor monitoring of an agent. Use the parameters to specify how the monitoring should behave. Once you&#39;ve enabled monitoring, you can change the monitoring mode using &#x60;/workspace/v3/voice/calls/{id}/switch-to-listen-in&#x60; (Mute), &#x60;/workspace/v3/voice/calls/{id}/switch-to-coaching&#x60; (Coach), and &#x60;/workspace/v3/voice/calls/{id}/switch-to-barge-in&#x60; (Connect).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartMonitoringAsyncWithHttpInfo (StartMonitoringData startMonitoringData)
        {
            // verify the required parameter 'startMonitoringData' is set
            if (startMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'startMonitoringData' when calling VoiceApi->StartMonitoring");

            var localVarPath = "/voice/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startMonitoringData != null && startMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start recording the specified call. Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StartRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StartRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start recording the specified call. Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StartRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StartRecording");

            var localVarPath = "/voice/calls/{id}/start-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start recording the specified call. Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StartRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StartRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start recording the specified call. Start recording the specified call. Recording stops when the call is completed or you send &#x60;/workspace/v3/voice/calls/{id}/stop-recording&#x60; on either the call or the DN.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StartRecording");

            var localVarPath = "/voice/calls/{id}/start-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop monitoring an agent. Stop monitoring an agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StopMonitoring (StopMonitoringData stopMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StopMonitoringWithHttpInfo(stopMonitoringData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop monitoring an agent. Stop monitoring an agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StopMonitoringWithHttpInfo (StopMonitoringData stopMonitoringData)
        {
            // verify the required parameter 'stopMonitoringData' is set
            if (stopMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'stopMonitoringData' when calling VoiceApi->StopMonitoring");

            var localVarPath = "/voice/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopMonitoringData != null && stopMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop monitoring an agent. Stop monitoring an agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StopMonitoringAsync (StopMonitoringData stopMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StopMonitoringAsyncWithHttpInfo(stopMonitoringData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop monitoring an agent. Stop monitoring an agent.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopMonitoringAsyncWithHttpInfo (StopMonitoringData stopMonitoringData)
        {
            // verify the required parameter 'stopMonitoringData' is set
            if (stopMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'stopMonitoringData' when calling VoiceApi->StopMonitoring");

            var localVarPath = "/voice/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopMonitoringData != null && stopMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop recording the specified call. Stop recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StopRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StopRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop recording the specified call. Stop recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StopRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StopRecording");

            var localVarPath = "/voice/calls/{id}/stop-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop recording the specified call. Stop recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StopRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StopRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop recording the specified call. Stop recording the specified call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StopRecording");

            var localVarPath = "/voice/calls/{id}/stop-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the barge in monitoring mode. Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToBargeIn (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToBargeInWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to the barge in monitoring mode. Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToBargeInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToBargeIn");

            var localVarPath = "/voice/calls/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the barge in monitoring mode. Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToBargeInAsync (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToBargeInAsyncWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to the barge in monitoring mode. Switch to the barge in monitoring mode. If the agent is currently on a call and T-Server is configured to allow barge in, the supervisor is immediately added to the call. Both the monitored agent and the customer are able to hear and speak with the supervisor. If the target agent is not on a call at the time of the request, the supervisor is brought into the call when the agent receives a new call.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToBargeInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToBargeIn");

            var localVarPath = "/voice/calls/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the coaching monitoring mode. Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToCoaching (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToCoachingWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to the coaching monitoring mode. Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToCoachingWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToCoaching");

            var localVarPath = "/voice/calls/{id}/switch-to-coaching";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToCoaching", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the coaching monitoring mode. Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToCoachingAsync (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToCoachingAsyncWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to the coaching monitoring mode. Switch to the coaching monitoring mode. When coaching is enabled and the agent receives a call, the supervisor is brought into the call. Only the agent can hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToCoachingAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToCoaching");

            var localVarPath = "/voice/calls/{id}/switch-to-coaching";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToCoaching", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the listen in monitoring mode. Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToListenIn (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToListenInWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to the listen in monitoring mode. Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToListenInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToListenIn");

            var localVarPath = "/voice/calls/{id}/switch-to-listen-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToListenIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to the listen in monitoring mode. Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToListenInAsync (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToListenInAsyncWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to the listen in monitoring mode. Switch to the listen in monitoring mode. When listen in is enabled and the agent receives a call, the supervisor is able to listen to the agent and the customer, but they can&#39;t hear the supervisor.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call being monitored.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToListenInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToListenIn");

            var localVarPath = "/voice/calls/{id}/switch-to-listen-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToListenIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data for a call. Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UpdateUserData (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UpdateUserDataWithHttpInfo(id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user data for a call. Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UpdateUserDataWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->UpdateUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->UpdateUserData");

            var localVarPath = "/voice/calls/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data for a call. Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserDataAsync (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UpdateUserDataAsyncWithHttpInfo(id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user data for a call. Update call data with the provided key/value pairs. This replaces any existing key/value pairs with the same keys.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection ID of the call.</param>
        /// <param name="userData">The data to update. This is an array of objects with the properties key, type, and value.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserDataAsyncWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->UpdateUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->UpdateUserData");

            var localVarPath = "/voice/calls/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
