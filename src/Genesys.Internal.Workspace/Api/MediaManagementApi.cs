/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.24.2336
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Workspace.Client;
using Genesys.Internal.Workspace.Model;

namespace Genesys.Internal.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get the details of the interaction
        /// </summary>
        /// <remarks>
        /// get the detailsd of interaction specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetDetails (string id);

        /// <summary>
        /// get the details of the interaction
        /// </summary>
        /// <remarks>
        /// get the detailsd of interaction specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetDetailsWithHttpInfo (string id);
        /// <summary>
        /// Create a snapshot based on the attribute condition
        /// </summary>
        /// <remarks>
        /// Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetSnapshot (GetSnapshotData getSnapshotData);

        /// <summary>
        /// Create a snapshot based on the attribute condition
        /// </summary>
        /// <remarks>
        /// Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetSnapshotWithHttpInfo (GetSnapshotData getSnapshotData);
        /// <summary>
        /// Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <remarks>
        /// Get the content of snapshot specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetSnapshotContent (string snapshotId, GetSnapshotContentData getSnapshotContentData);

        /// <summary>
        /// Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <remarks>
        /// Get the content of snapshot specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetSnapshotContentWithHttpInfo (string snapshotId, GetSnapshotContentData getSnapshotContentData);
        /// <summary>
        /// Change the userData of bulk of interactions
        /// </summary>
        /// <remarks>
        /// Change the userData of bulk of interactions
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MgtManageUserData (MgtManageUserData mgtManageUserData);

        /// <summary>
        /// Change the userData of bulk of interactions
        /// </summary>
        /// <remarks>
        /// Change the userData of bulk of interactions
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MgtManageUserDataWithHttpInfo (MgtManageUserData mgtManageUserData);
        /// <summary>
        /// Move a bulk of interactions to a queue
        /// </summary>
        /// <remarks>
        /// Move a buld of interactions to specified queue
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MgtMoveToQueue (MgtMoveToQueue mgtMoveToQueue);

        /// <summary>
        /// Move a bulk of interactions to a queue
        /// </summary>
        /// <remarks>
        /// Move a buld of interactions to specified queue
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MgtMoveToQueueWithHttpInfo (MgtMoveToQueue mgtMoveToQueue);
        /// <summary>
        /// Release the snapshot
        /// </summary>
        /// <remarks>
        /// Release the snapshot specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ReleaseSnapshot (string snapshotId);

        /// <summary>
        /// Release the snapshot
        /// </summary>
        /// <remarks>
        /// Release the snapshot specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReleaseSnapshotWithHttpInfo (string snapshotId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get the details of the interaction
        /// </summary>
        /// <remarks>
        /// get the detailsd of interaction specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetDetailsAsync (string id);

        /// <summary>
        /// get the details of the interaction
        /// </summary>
        /// <remarks>
        /// get the detailsd of interaction specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetDetailsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a snapshot based on the attribute condition
        /// </summary>
        /// <remarks>
        /// Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetSnapshotAsync (GetSnapshotData getSnapshotData);

        /// <summary>
        /// Create a snapshot based on the attribute condition
        /// </summary>
        /// <remarks>
        /// Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetSnapshotAsyncWithHttpInfo (GetSnapshotData getSnapshotData);
        /// <summary>
        /// Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <remarks>
        /// Get the content of snapshot specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetSnapshotContentAsync (string snapshotId, GetSnapshotContentData getSnapshotContentData);

        /// <summary>
        /// Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <remarks>
        /// Get the content of snapshot specified by startIndex and size.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetSnapshotContentAsyncWithHttpInfo (string snapshotId, GetSnapshotContentData getSnapshotContentData);
        /// <summary>
        /// Change the userData of bulk of interactions
        /// </summary>
        /// <remarks>
        /// Change the userData of bulk of interactions
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MgtManageUserDataAsync (MgtManageUserData mgtManageUserData);

        /// <summary>
        /// Change the userData of bulk of interactions
        /// </summary>
        /// <remarks>
        /// Change the userData of bulk of interactions
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MgtManageUserDataAsyncWithHttpInfo (MgtManageUserData mgtManageUserData);
        /// <summary>
        /// Move a bulk of interactions to a queue
        /// </summary>
        /// <remarks>
        /// Move a buld of interactions to specified queue
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MgtMoveToQueueAsync (MgtMoveToQueue mgtMoveToQueue);

        /// <summary>
        /// Move a bulk of interactions to a queue
        /// </summary>
        /// <remarks>
        /// Move a buld of interactions to specified queue
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MgtMoveToQueueAsyncWithHttpInfo (MgtMoveToQueue mgtMoveToQueue);
        /// <summary>
        /// Release the snapshot
        /// </summary>
        /// <remarks>
        /// Release the snapshot specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReleaseSnapshotAsync (string snapshotId);

        /// <summary>
        /// Release the snapshot
        /// </summary>
        /// <remarks>
        /// Release the snapshot specified.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReleaseSnapshotAsyncWithHttpInfo (string snapshotId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaManagementApi : IMediaManagementApi
    {
        private Genesys.Internal.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaManagementApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaManagementApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get the details of the interaction get the detailsd of interaction specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetDetails (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetDetailsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get the details of the interaction get the detailsd of interaction specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetDetailsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaManagementApi->GetDetails");

            var localVarPath = "/media-management/interactions/{id}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// get the details of the interaction get the detailsd of interaction specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetDetailsAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetDetailsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get the details of the interaction get the detailsd of interaction specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the interaction</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetDetailsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaManagementApi->GetDetails");

            var localVarPath = "/media-management/interactions/{id}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create a snapshot based on the attribute condition Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetSnapshot (GetSnapshotData getSnapshotData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetSnapshotWithHttpInfo(getSnapshotData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a snapshot based on the attribute condition Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetSnapshotWithHttpInfo (GetSnapshotData getSnapshotData)
        {
            // verify the required parameter 'getSnapshotData' is set
            if (getSnapshotData == null)
                throw new ApiException(400, "Missing required parameter 'getSnapshotData' when calling MediaManagementApi->GetSnapshot");

            var localVarPath = "/media-management/get-snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getSnapshotData != null && getSnapshotData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getSnapshotData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSnapshotData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create a snapshot based on the attribute condition Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetSnapshotAsync (GetSnapshotData getSnapshotData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetSnapshotAsyncWithHttpInfo(getSnapshotData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a snapshot based on the attribute condition Create a snapshot based on the attribute condition and returns elements specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSnapshotData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetSnapshotAsyncWithHttpInfo (GetSnapshotData getSnapshotData)
        {
            // verify the required parameter 'getSnapshotData' is set
            if (getSnapshotData == null)
                throw new ApiException(400, "Missing required parameter 'getSnapshotData' when calling MediaManagementApi->GetSnapshot");

            var localVarPath = "/media-management/get-snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getSnapshotData != null && getSnapshotData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getSnapshotData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSnapshotData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the content of snapshot specified by startIndex and size. Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetSnapshotContent (string snapshotId, GetSnapshotContentData getSnapshotContentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetSnapshotContentWithHttpInfo(snapshotId, getSnapshotContentData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content of snapshot specified by startIndex and size. Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetSnapshotContentWithHttpInfo (string snapshotId, GetSnapshotContentData getSnapshotContentData)
        {
            // verify the required parameter 'snapshotId' is set
            if (snapshotId == null)
                throw new ApiException(400, "Missing required parameter 'snapshotId' when calling MediaManagementApi->GetSnapshotContent");
            // verify the required parameter 'getSnapshotContentData' is set
            if (getSnapshotContentData == null)
                throw new ApiException(400, "Missing required parameter 'getSnapshotContentData' when calling MediaManagementApi->GetSnapshotContent");

            var localVarPath = "/media-management/{snapshotId}/get-snapshot-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotId != null) localVarPathParams.Add("snapshotId", Configuration.ApiClient.ParameterToString(snapshotId)); // path parameter
            if (getSnapshotContentData != null && getSnapshotContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getSnapshotContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSnapshotContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshotContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the content of snapshot specified by startIndex and size. Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetSnapshotContentAsync (string snapshotId, GetSnapshotContentData getSnapshotContentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetSnapshotContentAsyncWithHttpInfo(snapshotId, getSnapshotContentData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content of snapshot specified by startIndex and size. Get the content of snapshot specified by startIndex and size.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <param name="getSnapshotContentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetSnapshotContentAsyncWithHttpInfo (string snapshotId, GetSnapshotContentData getSnapshotContentData)
        {
            // verify the required parameter 'snapshotId' is set
            if (snapshotId == null)
                throw new ApiException(400, "Missing required parameter 'snapshotId' when calling MediaManagementApi->GetSnapshotContent");
            // verify the required parameter 'getSnapshotContentData' is set
            if (getSnapshotContentData == null)
                throw new ApiException(400, "Missing required parameter 'getSnapshotContentData' when calling MediaManagementApi->GetSnapshotContent");

            var localVarPath = "/media-management/{snapshotId}/get-snapshot-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotId != null) localVarPathParams.Add("snapshotId", Configuration.ApiClient.ParameterToString(snapshotId)); // path parameter
            if (getSnapshotContentData != null && getSnapshotContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getSnapshotContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSnapshotContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshotContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change the userData of bulk of interactions Change the userData of bulk of interactions
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MgtManageUserData (MgtManageUserData mgtManageUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MgtManageUserDataWithHttpInfo(mgtManageUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change the userData of bulk of interactions Change the userData of bulk of interactions
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MgtManageUserDataWithHttpInfo (MgtManageUserData mgtManageUserData)
        {
            // verify the required parameter 'mgtManageUserData' is set
            if (mgtManageUserData == null)
                throw new ApiException(400, "Missing required parameter 'mgtManageUserData' when calling MediaManagementApi->MgtManageUserData");

            var localVarPath = "/media-management/manage-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mgtManageUserData != null && mgtManageUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mgtManageUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mgtManageUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MgtManageUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change the userData of bulk of interactions Change the userData of bulk of interactions
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MgtManageUserDataAsync (MgtManageUserData mgtManageUserData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MgtManageUserDataAsyncWithHttpInfo(mgtManageUserData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change the userData of bulk of interactions Change the userData of bulk of interactions
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtManageUserData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MgtManageUserDataAsyncWithHttpInfo (MgtManageUserData mgtManageUserData)
        {
            // verify the required parameter 'mgtManageUserData' is set
            if (mgtManageUserData == null)
                throw new ApiException(400, "Missing required parameter 'mgtManageUserData' when calling MediaManagementApi->MgtManageUserData");

            var localVarPath = "/media-management/manage-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mgtManageUserData != null && mgtManageUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mgtManageUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mgtManageUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MgtManageUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Move a bulk of interactions to a queue Move a buld of interactions to specified queue
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MgtMoveToQueue (MgtMoveToQueue mgtMoveToQueue)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MgtMoveToQueueWithHttpInfo(mgtMoveToQueue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move a bulk of interactions to a queue Move a buld of interactions to specified queue
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MgtMoveToQueueWithHttpInfo (MgtMoveToQueue mgtMoveToQueue)
        {
            // verify the required parameter 'mgtMoveToQueue' is set
            if (mgtMoveToQueue == null)
                throw new ApiException(400, "Missing required parameter 'mgtMoveToQueue' when calling MediaManagementApi->MgtMoveToQueue");

            var localVarPath = "/media-management/move-to-queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mgtMoveToQueue != null && mgtMoveToQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mgtMoveToQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mgtMoveToQueue; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MgtMoveToQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Move a bulk of interactions to a queue Move a buld of interactions to specified queue
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MgtMoveToQueueAsync (MgtMoveToQueue mgtMoveToQueue)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MgtMoveToQueueAsyncWithHttpInfo(mgtMoveToQueue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move a bulk of interactions to a queue Move a buld of interactions to specified queue
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mgtMoveToQueue"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MgtMoveToQueueAsyncWithHttpInfo (MgtMoveToQueue mgtMoveToQueue)
        {
            // verify the required parameter 'mgtMoveToQueue' is set
            if (mgtMoveToQueue == null)
                throw new ApiException(400, "Missing required parameter 'mgtMoveToQueue' when calling MediaManagementApi->MgtMoveToQueue");

            var localVarPath = "/media-management/move-to-queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mgtMoveToQueue != null && mgtMoveToQueue.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mgtMoveToQueue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mgtMoveToQueue; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MgtMoveToQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Release the snapshot Release the snapshot specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ReleaseSnapshot (string snapshotId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReleaseSnapshotWithHttpInfo(snapshotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Release the snapshot Release the snapshot specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReleaseSnapshotWithHttpInfo (string snapshotId)
        {
            // verify the required parameter 'snapshotId' is set
            if (snapshotId == null)
                throw new ApiException(400, "Missing required parameter 'snapshotId' when calling MediaManagementApi->ReleaseSnapshot");

            var localVarPath = "/media-management/{snapshotId}/release-snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotId != null) localVarPathParams.Add("snapshotId", Configuration.ApiClient.ParameterToString(snapshotId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleaseSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Release the snapshot Release the snapshot specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReleaseSnapshotAsync (string snapshotId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReleaseSnapshotAsyncWithHttpInfo(snapshotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Release the snapshot Release the snapshot specified.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotId">Id of the snapshot</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReleaseSnapshotAsyncWithHttpInfo (string snapshotId)
        {
            // verify the required parameter 'snapshotId' is set
            if (snapshotId == null)
                throw new ApiException(400, "Missing required parameter 'snapshotId' when calling MediaManagementApi->ReleaseSnapshot");

            var localVarPath = "/media-management/{snapshotId}/release-snapshot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotId != null) localVarPathParams.Add("snapshotId", Configuration.ApiClient.ParameterToString(snapshotId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleaseSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
