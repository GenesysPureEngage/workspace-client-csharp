/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Workspace.Client;
using Genesys.Internal.Workspace.Model;

namespace Genesys.Internal.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate channels for the user with the specified resources.
        /// </summary>
        /// <remarks>
        /// Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ActivateChannels (ChannelsData channelsData);

        /// <summary>
        /// Activate channels for the user with the specified resources.
        /// </summary>
        /// <remarks>
        /// Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ActivateChannelsWithHttpInfo (ChannelsData channelsData);
        /// <summary>
        /// Get the business attribute hierarchy.
        /// </summary>
        /// <remarks>
        /// Get the business attribute hierarchy for the specified business attribute.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetBusinessAttributeHierarchy (int? id);

        /// <summary>
        /// Get the business attribute hierarchy.
        /// </summary>
        /// <remarks>
        /// Get the business attribute hierarchy for the specified business attribute.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetBusinessAttributeHierarchyWithHttpInfo (int? id);
        /// <summary>
        /// Get settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>ConfigResponse</returns>
        ConfigResponse GetConfiguration (string types = null);

        /// <summary>
        /// Get settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>ApiResponse of ConfigResponse</returns>
        ApiResponse<ConfigResponse> GetConfigurationWithHttpInfo (string types = null);
        /// <summary>
        /// Get information about the current user.
        /// </summary>
        /// <remarks>
        /// Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentSession</returns>
        CurrentSession GetCurrentSession ();

        /// <summary>
        /// Get information about the current user.
        /// </summary>
        /// <remarks>
        /// Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentSession</returns>
        ApiResponse<CurrentSession> GetCurrentSessionWithHttpInfo ();
        /// <summary>
        /// Get DNs for a place.
        /// </summary>
        /// <remarks>
        /// Get all DNs attached to the specified place.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>Devices</returns>
        Devices GetDevicesForPlace (string placeName);

        /// <summary>
        /// Get DNs for a place.
        /// </summary>
        /// <remarks>
        /// Get all DNs attached to the specified place.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>ApiResponse of Devices</returns>
        ApiResponse<Devices> GetDevicesForPlaceWithHttpInfo (string placeName);
        /// <summary>
        /// Retrieve encrypted data about the current user
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve encrypted data about the user to use with other services
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentSession</returns>
        CurrentSession GetUserInfo ();

        /// <summary>
        /// Retrieve encrypted data about the current user
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve encrypted data about the user to use with other services
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentSession</returns>
        ApiResponse<CurrentSession> GetUserInfoWithHttpInfo ();
        /// <summary>
        /// Retrieves and registers an authorization token.
        /// </summary>
        /// <remarks>
        /// Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse InitializeWorkspace (string code = null, string redirectUri = null, string authorization = null);

        /// <summary>
        /// Retrieves and registers an authorization token.
        /// </summary>
        /// <remarks>
        /// Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> InitializeWorkspaceWithHttpInfo (string code = null, string redirectUri = null, string authorization = null);
        /// <summary>
        /// Login the specified user (HTTP session only).
        /// </summary>
        /// <remarks>
        /// Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns></returns>
        void Login (string redirectUri);

        /// <summary>
        /// Login the specified user (HTTP session only).
        /// </summary>
        /// <remarks>
        /// Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LoginWithHttpInfo (string redirectUri);
        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Logout ();

        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LogoutWithHttpInfo ();
        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns></returns>
        void LogoutRedirect (string redirectUri = null);

        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutRedirectWithHttpInfo (string redirectUri = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate channels for the user with the specified resources.
        /// </summary>
        /// <remarks>
        /// Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ActivateChannelsAsync (ChannelsData channelsData);

        /// <summary>
        /// Activate channels for the user with the specified resources.
        /// </summary>
        /// <remarks>
        /// Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ActivateChannelsAsyncWithHttpInfo (ChannelsData channelsData);
        /// <summary>
        /// Get the business attribute hierarchy.
        /// </summary>
        /// <remarks>
        /// Get the business attribute hierarchy for the specified business attribute.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetBusinessAttributeHierarchyAsync (int? id);

        /// <summary>
        /// Get the business attribute hierarchy.
        /// </summary>
        /// <remarks>
        /// Get the business attribute hierarchy for the specified business attribute.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetBusinessAttributeHierarchyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>Task of ConfigResponse</returns>
        System.Threading.Tasks.Task<ConfigResponse> GetConfigurationAsync (string types = null);

        /// <summary>
        /// Get settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigResponse>> GetConfigurationAsyncWithHttpInfo (string types = null);
        /// <summary>
        /// Get information about the current user.
        /// </summary>
        /// <remarks>
        /// Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentSession</returns>
        System.Threading.Tasks.Task<CurrentSession> GetCurrentSessionAsync ();

        /// <summary>
        /// Get information about the current user.
        /// </summary>
        /// <remarks>
        /// Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrentSession>> GetCurrentSessionAsyncWithHttpInfo ();
        /// <summary>
        /// Get DNs for a place.
        /// </summary>
        /// <remarks>
        /// Get all DNs attached to the specified place.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>Task of Devices</returns>
        System.Threading.Tasks.Task<Devices> GetDevicesForPlaceAsync (string placeName);

        /// <summary>
        /// Get DNs for a place.
        /// </summary>
        /// <remarks>
        /// Get all DNs attached to the specified place.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>Task of ApiResponse (Devices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Devices>> GetDevicesForPlaceAsyncWithHttpInfo (string placeName);
        /// <summary>
        /// Retrieve encrypted data about the current user
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve encrypted data about the user to use with other services
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentSession</returns>
        System.Threading.Tasks.Task<CurrentSession> GetUserInfoAsync ();

        /// <summary>
        /// Retrieve encrypted data about the current user
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve encrypted data about the user to use with other services
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrentSession>> GetUserInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves and registers an authorization token.
        /// </summary>
        /// <remarks>
        /// Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> InitializeWorkspaceAsync (string code = null, string redirectUri = null, string authorization = null);

        /// <summary>
        /// Retrieves and registers an authorization token.
        /// </summary>
        /// <remarks>
        /// Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitializeWorkspaceAsyncWithHttpInfo (string code = null, string redirectUri = null, string authorization = null);
        /// <summary>
        /// Login the specified user (HTTP session only).
        /// </summary>
        /// <remarks>
        /// Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LoginAsync (string redirectUri);

        /// <summary>
        /// Login the specified user (HTTP session only).
        /// </summary>
        /// <remarks>
        /// Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginAsyncWithHttpInfo (string redirectUri);
        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAsync ();

        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAsyncWithHttpInfo ();
        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogoutRedirectAsync (string redirectUri = null);

        /// <summary>
        /// Log out of activated channels and end the session.
        /// </summary>
        /// <remarks>
        /// Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutRedirectAsyncWithHttpInfo (string redirectUri = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionApi : ISessionApi
    {
        private Genesys.Internal.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate channels for the user with the specified resources. Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ActivateChannels (ChannelsData channelsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ActivateChannelsWithHttpInfo(channelsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate channels for the user with the specified resources. Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ActivateChannelsWithHttpInfo (ChannelsData channelsData)
        {
            // verify the required parameter 'channelsData' is set
            if (channelsData == null)
                throw new ApiException(400, "Missing required parameter 'channelsData' when calling SessionApi->ActivateChannels");

            var localVarPath = "/activate-channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelsData != null && channelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(channelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Activate channels for the user with the specified resources. Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ActivateChannelsAsync (ChannelsData channelsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ActivateChannelsAsyncWithHttpInfo(channelsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate channels for the user with the specified resources. Activates the specified channels using the provided resources. If the channels are successfully activated, Workspace sends additional information about the state of active resources (DNs, channels) via events. The resources you provide are associated with the agent for the duration of the session. You should send this request after making an &#x60;/workspace/v3/initialize-workspace&#x60; request and getting the WorkspaceInitializationComplete message through CometD.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ActivateChannelsAsyncWithHttpInfo (ChannelsData channelsData)
        {
            // verify the required parameter 'channelsData' is set
            if (channelsData == null)
                throw new ApiException(400, "Missing required parameter 'channelsData' when calling SessionApi->ActivateChannels");

            var localVarPath = "/activate-channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelsData != null && channelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(channelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the business attribute hierarchy. Get the business attribute hierarchy for the specified business attribute.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetBusinessAttributeHierarchy (int? id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetBusinessAttributeHierarchyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the business attribute hierarchy. Get the business attribute hierarchy for the specified business attribute.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetBusinessAttributeHierarchyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->GetBusinessAttributeHierarchy");

            var localVarPath = "/configuration/business-attribute/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAttributeHierarchy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the business attribute hierarchy. Get the business attribute hierarchy for the specified business attribute.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetBusinessAttributeHierarchyAsync (int? id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetBusinessAttributeHierarchyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the business attribute hierarchy. Get the business attribute hierarchy for the specified business attribute.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique ID of the business attribute.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetBusinessAttributeHierarchyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->GetBusinessAttributeHierarchy");

            var localVarPath = "/configuration/business-attribute/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAttributeHierarchy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get settings, action codes, business attributes and other configuration. Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>ConfigResponse</returns>
        public ConfigResponse GetConfiguration (string types = null)
        {
             ApiResponse<ConfigResponse> localVarResponse = GetConfigurationWithHttpInfo(types);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get settings, action codes, business attributes and other configuration. Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>ApiResponse of ConfigResponse</returns>
        public ApiResponse< ConfigResponse > GetConfigurationWithHttpInfo (string types = null)
        {

            var localVarPath = "/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarQueryParams.Add("types", Configuration.ApiClient.ParameterToString(types)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfigResponse)));
        }

        /// <summary>
        /// Get settings, action codes, business attributes and other configuration. Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>Task of ConfigResponse</returns>
        public async System.Threading.Tasks.Task<ConfigResponse> GetConfigurationAsync (string types = null)
        {
             ApiResponse<ConfigResponse> localVarResponse = await GetConfigurationAsyncWithHttpInfo(types);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get settings, action codes, business attributes and other configuration. Get all configuration items needed by the user interface. This includes action codes, business attributes, transactions, and settings.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">A comma delimited list of types used to specify what content should be returned. If not specified the default is &#39;actionCodes, agentGroups,settings&#39;. Valid values are &#x60;actionCodes&#x60;, &#x60;agentGroups&#x60;, &#x60;settings&#x60;, &#x60;workspaceTransactions&#x60;, and &#x60;businessAttributes&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfigResponse>> GetConfigurationAsyncWithHttpInfo (string types = null)
        {

            var localVarPath = "/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarQueryParams.Add("types", Configuration.ApiClient.ParameterToString(types)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfigResponse)));
        }

        /// <summary>
        /// Get information about the current user. Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentSession</returns>
        public CurrentSession GetCurrentSession ()
        {
             ApiResponse<CurrentSession> localVarResponse = GetCurrentSessionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the current user. Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentSession</returns>
        public ApiResponse< CurrentSession > GetCurrentSessionWithHttpInfo ()
        {

            var localVarPath = "/current-session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentSession)));
        }

        /// <summary>
        /// Get information about the current user. Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentSession</returns>
        public async System.Threading.Tasks.Task<CurrentSession> GetCurrentSessionAsync ()
        {
             ApiResponse<CurrentSession> localVarResponse = await GetCurrentSessionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about the current user. Get information about the current user, including any existing media logins, calls, and interactions. The returned user information includes  state recovery information about the active session. You can make this  request at startup to check for an existing session.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CurrentSession>> GetCurrentSessionAsyncWithHttpInfo ()
        {

            var localVarPath = "/current-session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentSession)));
        }

        /// <summary>
        /// Get DNs for a place. Get all DNs attached to the specified place.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>Devices</returns>
        public Devices GetDevicesForPlace (string placeName)
        {
             ApiResponse<Devices> localVarResponse = GetDevicesForPlaceWithHttpInfo(placeName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get DNs for a place. Get all DNs attached to the specified place.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>ApiResponse of Devices</returns>
        public ApiResponse< Devices > GetDevicesForPlaceWithHttpInfo (string placeName)
        {
            // verify the required parameter 'placeName' is set
            if (placeName == null)
                throw new ApiException(400, "Missing required parameter 'placeName' when calling SessionApi->GetDevicesForPlace");

            var localVarPath = "/configuration/places/{placeName}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (placeName != null) localVarPathParams.Add("placeName", Configuration.ApiClient.ParameterToString(placeName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDevicesForPlace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Devices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Devices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Devices)));
        }

        /// <summary>
        /// Get DNs for a place. Get all DNs attached to the specified place.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>Task of Devices</returns>
        public async System.Threading.Tasks.Task<Devices> GetDevicesForPlaceAsync (string placeName)
        {
             ApiResponse<Devices> localVarResponse = await GetDevicesForPlaceAsyncWithHttpInfo(placeName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get DNs for a place. Get all DNs attached to the specified place.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placeName">The name of the place.</param>
        /// <returns>Task of ApiResponse (Devices)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Devices>> GetDevicesForPlaceAsyncWithHttpInfo (string placeName)
        {
            // verify the required parameter 'placeName' is set
            if (placeName == null)
                throw new ApiException(400, "Missing required parameter 'placeName' when calling SessionApi->GetDevicesForPlace");

            var localVarPath = "/configuration/places/{placeName}/dns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (placeName != null) localVarPathParams.Add("placeName", Configuration.ApiClient.ParameterToString(placeName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDevicesForPlace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Devices>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Devices) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Devices)));
        }

        /// <summary>
        /// Retrieve encrypted data about the current user This request can be used to retrieve encrypted data about the user to use with other services
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentSession</returns>
        public CurrentSession GetUserInfo ()
        {
             ApiResponse<CurrentSession> localVarResponse = GetUserInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve encrypted data about the current user This request can be used to retrieve encrypted data about the user to use with other services
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentSession</returns>
        public ApiResponse< CurrentSession > GetUserInfoWithHttpInfo ()
        {

            var localVarPath = "/userinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentSession)));
        }

        /// <summary>
        /// Retrieve encrypted data about the current user This request can be used to retrieve encrypted data about the user to use with other services
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentSession</returns>
        public async System.Threading.Tasks.Task<CurrentSession> GetUserInfoAsync ()
        {
             ApiResponse<CurrentSession> localVarResponse = await GetUserInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve encrypted data about the current user This request can be used to retrieve encrypted data about the user to use with other services
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CurrentSession>> GetUserInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/userinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentSession) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentSession)));
        }

        /// <summary>
        /// Retrieves and registers an authorization token. Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse InitializeWorkspace (string code = null, string redirectUri = null, string authorization = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = InitializeWorkspaceWithHttpInfo(code, redirectUri, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves and registers an authorization token. Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > InitializeWorkspaceWithHttpInfo (string code = null, string redirectUri = null, string authorization = null)
        {

            var localVarPath = "/initialize-workspace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitializeWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Retrieves and registers an authorization token. Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> InitializeWorkspaceAsync (string code = null, string redirectUri = null, string authorization = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await InitializeWorkspaceAsyncWithHttpInfo(code, redirectUri, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves and registers an authorization token. Retrieves the authorization token using the authorization code. Workspace then registers the token and prepares the user&#39;s environment.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The authorization code. You must include this parameter for the [Authorization Code Grant flow] (/reference/authentication/). (optional)</param>
        /// <param name="redirectUri">The same redirect URI you used in the initial login step. You must include this parameter for the [Authorization Code Grant flow](/reference/authentication/). (optional)</param>
        /// <param name="authorization">Bearer authorization. For example, &#39;Authorization: Bearer access_token&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitializeWorkspaceAsyncWithHttpInfo (string code = null, string redirectUri = null, string authorization = null)
        {

            var localVarPath = "/initialize-workspace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitializeWorkspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Login the specified user (HTTP session only). Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns></returns>
        public void Login (string redirectUri)
        {
             LoginWithHttpInfo(redirectUri);
        }

        /// <summary>
        /// Login the specified user (HTTP session only). Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LoginWithHttpInfo (string redirectUri)
        {
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling SessionApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Login the specified user (HTTP session only). Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LoginAsync (string redirectUri)
        {
             await LoginAsyncWithHttpInfo(redirectUri);

        }

        /// <summary>
        /// Login the specified user (HTTP session only). Starts the OAuth 2 flow for the Authorization Code grant type and returns a redirect to the  Authentication service. For more information, see the [Authentication API](/reference/authentication/).
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after authentication.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LoginAsyncWithHttpInfo (string redirectUri)
        {
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling SessionApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Logout ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LogoutWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LogoutWithHttpInfo ()
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LogoutAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAsyncWithHttpInfo ()
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns></returns>
        public void LogoutRedirect (string redirectUri = null)
        {
             LogoutRedirectWithHttpInfo(redirectUri);
        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LogoutRedirectWithHttpInfo (string redirectUri = null)
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutRedirect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogoutRedirectAsync (string redirectUri = null)
        {
             await LogoutRedirectAsyncWithHttpInfo(redirectUri);

        }

        /// <summary>
        /// Log out of activated channels and end the session. Ends the current agent&#39;s session. This request logs out the agent on all activated channels, ends the HTTP session, and cleans up related resources. Genesys recommends that you first disconnect CometD and then make this request. After you end the session, you&#39;ll need to make a login request before making any new calls to the API.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">The URI the Authentication API uses to redirect the user after logout. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogoutRedirectAsyncWithHttpInfo (string redirectUri = null)
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutRedirect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
