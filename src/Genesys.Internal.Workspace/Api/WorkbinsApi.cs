/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: v9.0.000.20.2204
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Workspace.Client;
using Genesys.Internal.Workspace.Model;

namespace Genesys.Internal.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkbinsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an Interaction to a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AddInteractionToWorkbin (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData);

        /// <summary>
        /// Add an Interaction to a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AddInteractionToWorkbinWithHttpInfo (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData);
        /// <summary>
        /// Get details of an Interaction which is in a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetInteractionDetailsFromWorkbin (string interactionId);

        /// <summary>
        /// Get details of an Interaction which is in a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetInteractionDetailsFromWorkbinWithHttpInfo (string interactionId);
        /// <summary>
        /// Get the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetWorkbinContent (string workbinId, GetWorkbinContentData getWorkbinContentData);

        /// <summary>
        /// Get the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetWorkbinContentWithHttpInfo (string workbinId, GetWorkbinContentData getWorkbinContentData);
        /// <summary>
        /// Get All Valid Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetWorkbins ();

        /// <summary>
        /// Get All Valid Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetWorkbinsWithHttpInfo ();
        /// <summary>
        /// Get the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetWorkbinsContent (GetWorkbinsContentData getWorkbinsContentData);

        /// <summary>
        /// Get the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetWorkbinsContentWithHttpInfo (GetWorkbinsContentData getWorkbinsContentData);
        /// <summary>
        /// Pull an Interaction from a Workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse PullInteractionFromWorkbin (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData);

        /// <summary>
        /// Pull an Interaction from a Workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> PullInteractionFromWorkbinWithHttpInfo (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData);
        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SubscribeToWorkbinNotifications (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData);

        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SubscribeToWorkbinNotificationsWithHttpInfo (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData);
        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SubscribeToWorkbinsNotifications (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData);

        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SubscribeToWorkbinsNotificationsWithHttpInfo (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData);
        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UnsubscribeToWorkbinNotifications (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData);

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UnsubscribeToWorkbinNotificationsWithHttpInfo (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData);
        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UnsubscribeToWorkbinsNotifications (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData);

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UnsubscribeToWorkbinsNotificationsWithHttpInfo (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add an Interaction to a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AddInteractionToWorkbinAsync (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData);

        /// <summary>
        /// Add an Interaction to a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddInteractionToWorkbinAsyncWithHttpInfo (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData);
        /// <summary>
        /// Get details of an Interaction which is in a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetInteractionDetailsFromWorkbinAsync (string interactionId);

        /// <summary>
        /// Get details of an Interaction which is in a workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetInteractionDetailsFromWorkbinAsyncWithHttpInfo (string interactionId);
        /// <summary>
        /// Get the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetWorkbinContentAsync (string workbinId, GetWorkbinContentData getWorkbinContentData);

        /// <summary>
        /// Get the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetWorkbinContentAsyncWithHttpInfo (string workbinId, GetWorkbinContentData getWorkbinContentData);
        /// <summary>
        /// Get All Valid Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetWorkbinsAsync ();

        /// <summary>
        /// Get All Valid Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetWorkbinsAsyncWithHttpInfo ();
        /// <summary>
        /// Get the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetWorkbinsContentAsync (GetWorkbinsContentData getWorkbinsContentData);

        /// <summary>
        /// Get the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetWorkbinsContentAsyncWithHttpInfo (GetWorkbinsContentData getWorkbinsContentData);
        /// <summary>
        /// Pull an Interaction from a Workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> PullInteractionFromWorkbinAsync (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData);

        /// <summary>
        /// Pull an Interaction from a Workbin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PullInteractionFromWorkbinAsyncWithHttpInfo (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData);
        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SubscribeToWorkbinNotificationsAsync (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData);

        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SubscribeToWorkbinNotificationsAsyncWithHttpInfo (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData);
        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SubscribeToWorkbinsNotificationsAsync (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData);

        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SubscribeToWorkbinsNotificationsAsyncWithHttpInfo (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData);
        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UnsubscribeToWorkbinNotificationsAsync (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData);

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UnsubscribeToWorkbinNotificationsAsyncWithHttpInfo (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData);
        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UnsubscribeToWorkbinsNotificationsAsync (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData);

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UnsubscribeToWorkbinsNotificationsAsyncWithHttpInfo (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkbinsApi : IWorkbinsApi
    {
        private Genesys.Internal.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkbinsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkbinsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkbinsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkbinsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add an Interaction to a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AddInteractionToWorkbin (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AddInteractionToWorkbinWithHttpInfo(workbinId, addInteractionToWorkbinData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an Interaction to a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AddInteractionToWorkbinWithHttpInfo (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->AddInteractionToWorkbin");
            // verify the required parameter 'addInteractionToWorkbinData' is set
            if (addInteractionToWorkbinData == null)
                throw new ApiException(400, "Missing required parameter 'addInteractionToWorkbinData' when calling WorkbinsApi->AddInteractionToWorkbin");

            var localVarPath = "/workbins/{workbinId}/add-interaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (addInteractionToWorkbinData != null && addInteractionToWorkbinData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addInteractionToWorkbinData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addInteractionToWorkbinData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInteractionToWorkbin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Add an Interaction to a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AddInteractionToWorkbinAsync (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AddInteractionToWorkbinAsyncWithHttpInfo(workbinId, addInteractionToWorkbinData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an Interaction to a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="addInteractionToWorkbinData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddInteractionToWorkbinAsyncWithHttpInfo (string workbinId, AddInteractionToWorkbinData addInteractionToWorkbinData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->AddInteractionToWorkbin");
            // verify the required parameter 'addInteractionToWorkbinData' is set
            if (addInteractionToWorkbinData == null)
                throw new ApiException(400, "Missing required parameter 'addInteractionToWorkbinData' when calling WorkbinsApi->AddInteractionToWorkbin");

            var localVarPath = "/workbins/{workbinId}/add-interaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (addInteractionToWorkbinData != null && addInteractionToWorkbinData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addInteractionToWorkbinData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addInteractionToWorkbinData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInteractionToWorkbin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get details of an Interaction which is in a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetInteractionDetailsFromWorkbin (string interactionId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetInteractionDetailsFromWorkbinWithHttpInfo(interactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an Interaction which is in a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetInteractionDetailsFromWorkbinWithHttpInfo (string interactionId)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling WorkbinsApi->GetInteractionDetailsFromWorkbin");

            var localVarPath = "/workbins/interactions/{interactionId}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionDetailsFromWorkbin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get details of an Interaction which is in a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetInteractionDetailsFromWorkbinAsync (string interactionId)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetInteractionDetailsFromWorkbinAsyncWithHttpInfo(interactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of an Interaction which is in a workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="interactionId">Id of the interaction</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetInteractionDetailsFromWorkbinAsyncWithHttpInfo (string interactionId)
        {
            // verify the required parameter 'interactionId' is set
            if (interactionId == null)
                throw new ApiException(400, "Missing required parameter 'interactionId' when calling WorkbinsApi->GetInteractionDetailsFromWorkbin");

            var localVarPath = "/workbins/interactions/{interactionId}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (interactionId != null) localVarPathParams.Add("interactionId", Configuration.ApiClient.ParameterToString(interactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionDetailsFromWorkbin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetWorkbinContent (string workbinId, GetWorkbinContentData getWorkbinContentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetWorkbinContentWithHttpInfo(workbinId, getWorkbinContentData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetWorkbinContentWithHttpInfo (string workbinId, GetWorkbinContentData getWorkbinContentData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->GetWorkbinContent");
            // verify the required parameter 'getWorkbinContentData' is set
            if (getWorkbinContentData == null)
                throw new ApiException(400, "Missing required parameter 'getWorkbinContentData' when calling WorkbinsApi->GetWorkbinContent");

            var localVarPath = "/workbins/{workbinId}/get-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (getWorkbinContentData != null && getWorkbinContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getWorkbinContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getWorkbinContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkbinContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetWorkbinContentAsync (string workbinId, GetWorkbinContentData getWorkbinContentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetWorkbinContentAsyncWithHttpInfo(workbinId, getWorkbinContentData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="getWorkbinContentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetWorkbinContentAsyncWithHttpInfo (string workbinId, GetWorkbinContentData getWorkbinContentData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->GetWorkbinContent");
            // verify the required parameter 'getWorkbinContentData' is set
            if (getWorkbinContentData == null)
                throw new ApiException(400, "Missing required parameter 'getWorkbinContentData' when calling WorkbinsApi->GetWorkbinContent");

            var localVarPath = "/workbins/{workbinId}/get-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (getWorkbinContentData != null && getWorkbinContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getWorkbinContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getWorkbinContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkbinContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get All Valid Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetWorkbins ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetWorkbinsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Valid Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetWorkbinsWithHttpInfo ()
        {

            var localVarPath = "/workbins/get-workbins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkbins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get All Valid Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetWorkbinsAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetWorkbinsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Valid Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetWorkbinsAsyncWithHttpInfo ()
        {

            var localVarPath = "/workbins/get-workbins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkbins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetWorkbinsContent (GetWorkbinsContentData getWorkbinsContentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetWorkbinsContentWithHttpInfo(getWorkbinsContentData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetWorkbinsContentWithHttpInfo (GetWorkbinsContentData getWorkbinsContentData)
        {
            // verify the required parameter 'getWorkbinsContentData' is set
            if (getWorkbinsContentData == null)
                throw new ApiException(400, "Missing required parameter 'getWorkbinsContentData' when calling WorkbinsApi->GetWorkbinsContent");

            var localVarPath = "/workbins/get-contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getWorkbinsContentData != null && getWorkbinsContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getWorkbinsContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getWorkbinsContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkbinsContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetWorkbinsContentAsync (GetWorkbinsContentData getWorkbinsContentData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetWorkbinsContentAsyncWithHttpInfo(getWorkbinsContentData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWorkbinsContentData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetWorkbinsContentAsyncWithHttpInfo (GetWorkbinsContentData getWorkbinsContentData)
        {
            // verify the required parameter 'getWorkbinsContentData' is set
            if (getWorkbinsContentData == null)
                throw new ApiException(400, "Missing required parameter 'getWorkbinsContentData' when calling WorkbinsApi->GetWorkbinsContent");

            var localVarPath = "/workbins/get-contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getWorkbinsContentData != null && getWorkbinsContentData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getWorkbinsContentData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getWorkbinsContentData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorkbinsContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Pull an Interaction from a Workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse PullInteractionFromWorkbin (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = PullInteractionFromWorkbinWithHttpInfo(workbinId, pullInteractionFromWorkbinData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pull an Interaction from a Workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > PullInteractionFromWorkbinWithHttpInfo (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->PullInteractionFromWorkbin");
            // verify the required parameter 'pullInteractionFromWorkbinData' is set
            if (pullInteractionFromWorkbinData == null)
                throw new ApiException(400, "Missing required parameter 'pullInteractionFromWorkbinData' when calling WorkbinsApi->PullInteractionFromWorkbin");

            var localVarPath = "/workbins/{workbinId}/pull-interaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (pullInteractionFromWorkbinData != null && pullInteractionFromWorkbinData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pullInteractionFromWorkbinData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pullInteractionFromWorkbinData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PullInteractionFromWorkbin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Pull an Interaction from a Workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> PullInteractionFromWorkbinAsync (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await PullInteractionFromWorkbinAsyncWithHttpInfo(workbinId, pullInteractionFromWorkbinData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pull an Interaction from a Workbin 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="pullInteractionFromWorkbinData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PullInteractionFromWorkbinAsyncWithHttpInfo (string workbinId, PullInteractionFromWorkbinData pullInteractionFromWorkbinData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->PullInteractionFromWorkbin");
            // verify the required parameter 'pullInteractionFromWorkbinData' is set
            if (pullInteractionFromWorkbinData == null)
                throw new ApiException(400, "Missing required parameter 'pullInteractionFromWorkbinData' when calling WorkbinsApi->PullInteractionFromWorkbin");

            var localVarPath = "/workbins/{workbinId}/pull-interaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (pullInteractionFromWorkbinData != null && pullInteractionFromWorkbinData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pullInteractionFromWorkbinData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pullInteractionFromWorkbinData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PullInteractionFromWorkbin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SubscribeToWorkbinNotifications (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SubscribeToWorkbinNotificationsWithHttpInfo(workbinId, subscribeToWorkbinNotificationsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SubscribeToWorkbinNotificationsWithHttpInfo (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->SubscribeToWorkbinNotifications");
            // verify the required parameter 'subscribeToWorkbinNotificationsData' is set
            if (subscribeToWorkbinNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'subscribeToWorkbinNotificationsData' when calling WorkbinsApi->SubscribeToWorkbinNotifications");

            var localVarPath = "/workbins/{workbinId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (subscribeToWorkbinNotificationsData != null && subscribeToWorkbinNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(subscribeToWorkbinNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeToWorkbinNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToWorkbinNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SubscribeToWorkbinNotificationsAsync (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SubscribeToWorkbinNotificationsAsyncWithHttpInfo(workbinId, subscribeToWorkbinNotificationsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="subscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SubscribeToWorkbinNotificationsAsyncWithHttpInfo (string workbinId, SubscribeToWorkbinNotificationsData subscribeToWorkbinNotificationsData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->SubscribeToWorkbinNotifications");
            // verify the required parameter 'subscribeToWorkbinNotificationsData' is set
            if (subscribeToWorkbinNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'subscribeToWorkbinNotificationsData' when calling WorkbinsApi->SubscribeToWorkbinNotifications");

            var localVarPath = "/workbins/{workbinId}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (subscribeToWorkbinNotificationsData != null && subscribeToWorkbinNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(subscribeToWorkbinNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeToWorkbinNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToWorkbinNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SubscribeToWorkbinsNotifications (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SubscribeToWorkbinsNotificationsWithHttpInfo(subscribeToWorkbinsNotificationsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SubscribeToWorkbinsNotificationsWithHttpInfo (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData)
        {
            // verify the required parameter 'subscribeToWorkbinsNotificationsData' is set
            if (subscribeToWorkbinsNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'subscribeToWorkbinsNotificationsData' when calling WorkbinsApi->SubscribeToWorkbinsNotifications");

            var localVarPath = "/workbins/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscribeToWorkbinsNotificationsData != null && subscribeToWorkbinsNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(subscribeToWorkbinsNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeToWorkbinsNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToWorkbinsNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SubscribeToWorkbinsNotificationsAsync (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SubscribeToWorkbinsNotificationsAsyncWithHttpInfo(subscribeToWorkbinsNotificationsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe to be notified of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SubscribeToWorkbinsNotificationsAsyncWithHttpInfo (SubscribeToWorkbinsNotificationsData subscribeToWorkbinsNotificationsData)
        {
            // verify the required parameter 'subscribeToWorkbinsNotificationsData' is set
            if (subscribeToWorkbinsNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'subscribeToWorkbinsNotificationsData' when calling WorkbinsApi->SubscribeToWorkbinsNotifications");

            var localVarPath = "/workbins/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscribeToWorkbinsNotificationsData != null && subscribeToWorkbinsNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(subscribeToWorkbinsNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscribeToWorkbinsNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeToWorkbinsNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UnsubscribeToWorkbinNotifications (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UnsubscribeToWorkbinNotificationsWithHttpInfo(workbinId, unsubscribeToWorkbinNotificationsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UnsubscribeToWorkbinNotificationsWithHttpInfo (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->UnsubscribeToWorkbinNotifications");
            // verify the required parameter 'unsubscribeToWorkbinNotificationsData' is set
            if (unsubscribeToWorkbinNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeToWorkbinNotificationsData' when calling WorkbinsApi->UnsubscribeToWorkbinNotifications");

            var localVarPath = "/workbins/{workbinId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (unsubscribeToWorkbinNotificationsData != null && unsubscribeToWorkbinNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(unsubscribeToWorkbinNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeToWorkbinNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeToWorkbinNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UnsubscribeToWorkbinNotificationsAsync (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UnsubscribeToWorkbinNotificationsAsyncWithHttpInfo(workbinId, unsubscribeToWorkbinNotificationsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of a Workbin. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workbinId">Id of the Workbin</param>
        /// <param name="unsubscribeToWorkbinNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UnsubscribeToWorkbinNotificationsAsyncWithHttpInfo (string workbinId, UnsubscribeToWorkbinNotificationsData unsubscribeToWorkbinNotificationsData)
        {
            // verify the required parameter 'workbinId' is set
            if (workbinId == null)
                throw new ApiException(400, "Missing required parameter 'workbinId' when calling WorkbinsApi->UnsubscribeToWorkbinNotifications");
            // verify the required parameter 'unsubscribeToWorkbinNotificationsData' is set
            if (unsubscribeToWorkbinNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeToWorkbinNotificationsData' when calling WorkbinsApi->UnsubscribeToWorkbinNotifications");

            var localVarPath = "/workbins/{workbinId}/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workbinId != null) localVarPathParams.Add("workbinId", Configuration.ApiClient.ParameterToString(workbinId)); // path parameter
            if (unsubscribeToWorkbinNotificationsData != null && unsubscribeToWorkbinNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(unsubscribeToWorkbinNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeToWorkbinNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeToWorkbinNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UnsubscribeToWorkbinsNotifications (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UnsubscribeToWorkbinsNotificationsWithHttpInfo(unsubscribeToWorkbinsNotificationsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UnsubscribeToWorkbinsNotificationsWithHttpInfo (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData)
        {
            // verify the required parameter 'unsubscribeToWorkbinsNotificationsData' is set
            if (unsubscribeToWorkbinsNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeToWorkbinsNotificationsData' when calling WorkbinsApi->UnsubscribeToWorkbinsNotifications");

            var localVarPath = "/workbins/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsubscribeToWorkbinsNotificationsData != null && unsubscribeToWorkbinsNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(unsubscribeToWorkbinsNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeToWorkbinsNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeToWorkbinsNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UnsubscribeToWorkbinsNotificationsAsync (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UnsubscribeToWorkbinsNotificationsAsyncWithHttpInfo(unsubscribeToWorkbinsNotificationsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe to the notifications of changes of the content of multiple Workbins. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeToWorkbinsNotificationsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UnsubscribeToWorkbinsNotificationsAsyncWithHttpInfo (UnsubscribeToWorkbinsNotificationsData unsubscribeToWorkbinsNotificationsData)
        {
            // verify the required parameter 'unsubscribeToWorkbinsNotificationsData' is set
            if (unsubscribeToWorkbinsNotificationsData == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeToWorkbinsNotificationsData' when calling WorkbinsApi->UnsubscribeToWorkbinsNotifications");

            var localVarPath = "/workbins/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsubscribeToWorkbinsNotificationsData != null && unsubscribeToWorkbinsNotificationsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(unsubscribeToWorkbinsNotificationsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeToWorkbinsNotificationsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeToWorkbinsNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
