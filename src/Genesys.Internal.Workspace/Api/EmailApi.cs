/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.22.2269
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Workspace.Client;
using Genesys.Internal.Workspace.Model;

namespace Genesys.Internal.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept the email interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AcceptEmail (string id, AcceptData5 acceptData = null);

        /// <summary>
        /// Accept the email interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AcceptEmailWithHttpInfo (string id, AcceptData5 acceptData = null);
        /// <summary>
        /// cancel the outbound email interaction
        /// </summary>
        /// <remarks>
        /// Cancel the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CancelEmail (string id);

        /// <summary>
        /// cancel the outbound email interaction
        /// </summary>
        /// <remarks>
        /// Cancel the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CancelEmailWithHttpInfo (string id);
        /// <summary>
        /// Create email interaction
        /// </summary>
        /// <remarks>
        /// Create a new email interaction
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CreateEmail (CreateData createData = null);

        /// <summary>
        /// Create email interaction
        /// </summary>
        /// <remarks>
        /// Create a new email interaction
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CreateEmailWithHttpInfo (CreateData createData = null);
        /// <summary>
        /// forward email
        /// </summary>
        /// <remarks>
        /// forward inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ForwardEmail (string id, ForwardData1 forwardData = null);

        /// <summary>
        /// forward email
        /// </summary>
        /// <remarks>
        /// forward inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ForwardEmailWithHttpInfo (string id, ForwardData1 forwardData = null);
        /// <summary>
        /// reply email
        /// </summary>
        /// <remarks>
        /// Reply to inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ReplyEmail (string id, ReplyData replyData = null);

        /// <summary>
        /// reply email
        /// </summary>
        /// <remarks>
        /// Reply to inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReplyEmailWithHttpInfo (string id, ReplyData replyData = null);
        /// <summary>
        /// Save email information to UCS
        /// </summary>
        /// <remarks>
        /// Save email information of interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SaveEmail (string id, SaveData saveData = null);

        /// <summary>
        /// Save email information to UCS
        /// </summary>
        /// <remarks>
        /// Save email information of interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SaveEmailWithHttpInfo (string id, SaveData saveData = null);
        /// <summary>
        /// Send email
        /// </summary>
        /// <remarks>
        /// Send email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SendEmail (string id, SendData sendData = null);

        /// <summary>
        /// Send email
        /// </summary>
        /// <remarks>
        /// Send email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SendEmailWithHttpInfo (string id, SendData sendData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept the email interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AcceptEmailAsync (string id, AcceptData5 acceptData = null);

        /// <summary>
        /// Accept the email interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AcceptEmailAsyncWithHttpInfo (string id, AcceptData5 acceptData = null);
        /// <summary>
        /// cancel the outbound email interaction
        /// </summary>
        /// <remarks>
        /// Cancel the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CancelEmailAsync (string id);

        /// <summary>
        /// cancel the outbound email interaction
        /// </summary>
        /// <remarks>
        /// Cancel the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CancelEmailAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create email interaction
        /// </summary>
        /// <remarks>
        /// Create a new email interaction
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CreateEmailAsync (CreateData createData = null);

        /// <summary>
        /// Create email interaction
        /// </summary>
        /// <remarks>
        /// Create a new email interaction
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CreateEmailAsyncWithHttpInfo (CreateData createData = null);
        /// <summary>
        /// forward email
        /// </summary>
        /// <remarks>
        /// forward inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ForwardEmailAsync (string id, ForwardData1 forwardData = null);

        /// <summary>
        /// forward email
        /// </summary>
        /// <remarks>
        /// forward inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ForwardEmailAsyncWithHttpInfo (string id, ForwardData1 forwardData = null);
        /// <summary>
        /// reply email
        /// </summary>
        /// <remarks>
        /// Reply to inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReplyEmailAsync (string id, ReplyData replyData = null);

        /// <summary>
        /// reply email
        /// </summary>
        /// <remarks>
        /// Reply to inbound email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReplyEmailAsyncWithHttpInfo (string id, ReplyData replyData = null);
        /// <summary>
        /// Save email information to UCS
        /// </summary>
        /// <remarks>
        /// Save email information of interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SaveEmailAsync (string id, SaveData saveData = null);

        /// <summary>
        /// Save email information to UCS
        /// </summary>
        /// <remarks>
        /// Save email information of interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SaveEmailAsyncWithHttpInfo (string id, SaveData saveData = null);
        /// <summary>
        /// Send email
        /// </summary>
        /// <remarks>
        /// Send email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SendEmailAsync (string id, SendData sendData = null);

        /// <summary>
        /// Send email
        /// </summary>
        /// <remarks>
        /// Send email interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendEmailAsyncWithHttpInfo (string id, SendData sendData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailApi : IEmailApi
    {
        private Genesys.Internal.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept the email interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AcceptEmail (string id, AcceptData5 acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AcceptEmailWithHttpInfo(id, acceptData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept the email interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AcceptEmailWithHttpInfo (string id, AcceptData5 acceptData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->AcceptEmail");

            var localVarPath = "/media/email/interactions/{id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Accept the email interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AcceptEmailAsync (string id, AcceptData5 acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AcceptEmailAsyncWithHttpInfo(id, acceptData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept the email interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AcceptEmailAsyncWithHttpInfo (string id, AcceptData5 acceptData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->AcceptEmail");

            var localVarPath = "/media/email/interactions/{id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// cancel the outbound email interaction Cancel the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CancelEmail (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CancelEmailWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancel the outbound email interaction Cancel the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CancelEmailWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->CancelEmail");

            var localVarPath = "/media/email/interactions/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// cancel the outbound email interaction Cancel the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CancelEmailAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CancelEmailAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancel the outbound email interaction Cancel the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to cancel</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CancelEmailAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->CancelEmail");

            var localVarPath = "/media/email/interactions/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create email interaction Create a new email interaction
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CreateEmail (CreateData createData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CreateEmailWithHttpInfo(createData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create email interaction Create a new email interaction
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CreateEmailWithHttpInfo (CreateData createData = null)
        {

            var localVarPath = "/media/email/interactions/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createData != null && createData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create email interaction Create a new email interaction
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CreateEmailAsync (CreateData createData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CreateEmailAsyncWithHttpInfo(createData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create email interaction Create a new email interaction
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CreateEmailAsyncWithHttpInfo (CreateData createData = null)
        {

            var localVarPath = "/media/email/interactions/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createData != null && createData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// forward email forward inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ForwardEmail (string id, ForwardData1 forwardData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ForwardEmailWithHttpInfo(id, forwardData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// forward email forward inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ForwardEmailWithHttpInfo (string id, ForwardData1 forwardData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->ForwardEmail");

            var localVarPath = "/media/email/interactions/{id}/forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forwardData != null && forwardData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(forwardData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForwardEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// forward email forward inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ForwardEmailAsync (string id, ForwardData1 forwardData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ForwardEmailAsyncWithHttpInfo(id, forwardData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// forward email forward inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to forward</param>
        /// <param name="forwardData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ForwardEmailAsyncWithHttpInfo (string id, ForwardData1 forwardData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->ForwardEmail");

            var localVarPath = "/media/email/interactions/{id}/forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (forwardData != null && forwardData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(forwardData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForwardEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// reply email Reply to inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ReplyEmail (string id, ReplyData replyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReplyEmailWithHttpInfo(id, replyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// reply email Reply to inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReplyEmailWithHttpInfo (string id, ReplyData replyData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->ReplyEmail");

            var localVarPath = "/media/email/interactions/{id}/reply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (replyData != null && replyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(replyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = replyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplyEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// reply email Reply to inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReplyEmailAsync (string id, ReplyData replyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReplyEmailAsyncWithHttpInfo(id, replyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// reply email Reply to inbound email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to reply</param>
        /// <param name="replyData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReplyEmailAsyncWithHttpInfo (string id, ReplyData replyData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->ReplyEmail");

            var localVarPath = "/media/email/interactions/{id}/reply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (replyData != null && replyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(replyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = replyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplyEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Save email information to UCS Save email information of interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SaveEmail (string id, SaveData saveData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SaveEmailWithHttpInfo(id, saveData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save email information to UCS Save email information of interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SaveEmailWithHttpInfo (string id, SaveData saveData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->SaveEmail");

            var localVarPath = "/media/email/interactions/{id}/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (saveData != null && saveData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Save email information to UCS Save email information of interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SaveEmailAsync (string id, SaveData saveData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SaveEmailAsyncWithHttpInfo(id, saveData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save email information to UCS Save email information of interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to save</param>
        /// <param name="saveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SaveEmailAsyncWithHttpInfo (string id, SaveData saveData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->SaveEmail");

            var localVarPath = "/media/email/interactions/{id}/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (saveData != null && saveData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send email Send email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SendEmail (string id, SendData sendData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SendEmailWithHttpInfo(id, sendData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email Send email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SendEmailWithHttpInfo (string id, SendData sendData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->SendEmail");

            var localVarPath = "/media/email/interactions/{id}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendData != null && sendData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sendData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send email Send email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SendEmailAsync (string id, SendData sendData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SendEmailAsyncWithHttpInfo(id, sendData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email Send email interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of interaction to send</param>
        /// <param name="sendData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendEmailAsyncWithHttpInfo (string id, SendData sendData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EmailApi->SendEmail");

            var localVarPath = "/media/email/interactions/{id}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendData != null && sendData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sendData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
