/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 9.0.000.22.2269
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Workspace.Client;
using Genesys.Internal.Workspace.Model;

namespace Genesys.Internal.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStandardResponsesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a Standard Response to Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AddStandardResponseFavorite (string id);

        /// <summary>
        /// Add a Standard Response to Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AddStandardResponseFavoriteWithHttpInfo (string id);
        /// <summary>
        /// Remove all Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteAllStandardResponseFavorites ();

        /// <summary>
        /// Remove all Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteAllStandardResponseFavoritesWithHttpInfo ();
        /// <summary>
        /// Remove a Standard Response from Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteStandardResponseFavorite (string id);

        /// <summary>
        /// Remove a Standard Response from Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteStandardResponseFavoriteWithHttpInfo (string id);
        /// <summary>
        /// Get the details of a Category.
        /// </summary>
        /// <remarks>
        /// Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetCategoryDetails (string id, GetCategoryData getCategoryData);

        /// <summary>
        /// Get the details of a Category.
        /// </summary>
        /// <remarks>
        /// Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetCategoryDetailsWithHttpInfo (string id, GetCategoryData getCategoryData);
        /// <summary>
        /// Get all Root categories.
        /// </summary>
        /// <remarks>
        /// Get all Root Categories information.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetRootCategories (GetRootCategoriesData getRootCategoriesData = null);

        /// <summary>
        /// Get all Root categories.
        /// </summary>
        /// <remarks>
        /// Get all Root Categories information.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetRootCategoriesWithHttpInfo (GetRootCategoriesData getRootCategoriesData = null);
        /// <summary>
        /// Get the details of a Standard Response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetStandardResponse (string id, GetStandardResponseData getStandardResponseData);

        /// <summary>
        /// Get the details of a Standard Response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetStandardResponseWithHttpInfo (string id, GetStandardResponseData getStandardResponseData);
        /// <summary>
        /// Get the attachment of the Standard Response
        /// </summary>
        /// <remarks>
        /// Get the attachment of the Standard Response specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>string</returns>
        string GetStandardResponseAttachment (string id, string documentId);

        /// <summary>
        /// Get the attachment of the Standard Response
        /// </summary>
        /// <remarks>
        /// Get the attachment of the Standard Response specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetStandardResponseAttachmentWithHttpInfo (string id, string documentId);
        /// <summary>
        /// Get Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetStandardResponseFavorites ();

        /// <summary>
        /// Get Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetStandardResponseFavoritesWithHttpInfo ();
        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse RenderStandardResponseFieldCodes (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData);

        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RenderStandardResponseFieldCodesWithHttpInfo (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData);
        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ReportStandareResponseUsage (string id, ReportStandareResponseUsageData reportStandareResponseUsageData);

        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReportStandareResponseUsageWithHttpInfo (string id, ReportStandareResponseUsageData reportStandareResponseUsageData);
        /// <summary>
        /// Search for standard responses based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SearchStandardResponses (LuceneSearchStandardResponseData luceneSearchStandardResponseData);

        /// <summary>
        /// Search for standard responses based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SearchStandardResponsesWithHttpInfo (LuceneSearchStandardResponseData luceneSearchStandardResponseData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a Standard Response to Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AddStandardResponseFavoriteAsync (string id);

        /// <summary>
        /// Add a Standard Response to Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddStandardResponseFavoriteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Remove all Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteAllStandardResponseFavoritesAsync ();

        /// <summary>
        /// Remove all Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteAllStandardResponseFavoritesAsyncWithHttpInfo ();
        /// <summary>
        /// Remove a Standard Response from Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteStandardResponseFavoriteAsync (string id);

        /// <summary>
        /// Remove a Standard Response from Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteStandardResponseFavoriteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get the details of a Category.
        /// </summary>
        /// <remarks>
        /// Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetCategoryDetailsAsync (string id, GetCategoryData getCategoryData);

        /// <summary>
        /// Get the details of a Category.
        /// </summary>
        /// <remarks>
        /// Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetCategoryDetailsAsyncWithHttpInfo (string id, GetCategoryData getCategoryData);
        /// <summary>
        /// Get all Root categories.
        /// </summary>
        /// <remarks>
        /// Get all Root Categories information.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetRootCategoriesAsync (GetRootCategoriesData getRootCategoriesData = null);

        /// <summary>
        /// Get all Root categories.
        /// </summary>
        /// <remarks>
        /// Get all Root Categories information.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetRootCategoriesAsyncWithHttpInfo (GetRootCategoriesData getRootCategoriesData = null);
        /// <summary>
        /// Get the details of a Standard Response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetStandardResponseAsync (string id, GetStandardResponseData getStandardResponseData);

        /// <summary>
        /// Get the details of a Standard Response.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetStandardResponseAsyncWithHttpInfo (string id, GetStandardResponseData getStandardResponseData);
        /// <summary>
        /// Get the attachment of the Standard Response
        /// </summary>
        /// <remarks>
        /// Get the attachment of the Standard Response specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetStandardResponseAttachmentAsync (string id, string documentId);

        /// <summary>
        /// Get the attachment of the Standard Response
        /// </summary>
        /// <remarks>
        /// Get the attachment of the Standard Response specified in the documentId path parameter
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetStandardResponseAttachmentAsyncWithHttpInfo (string id, string documentId);
        /// <summary>
        /// Get Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetStandardResponseFavoritesAsync ();

        /// <summary>
        /// Get Standard Response Favorites
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetStandardResponseFavoritesAsyncWithHttpInfo ();
        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RenderStandardResponseFieldCodesAsync (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData);

        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RenderStandardResponseFieldCodesAsyncWithHttpInfo (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData);
        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReportStandareResponseUsageAsync (string id, ReportStandareResponseUsageData reportStandareResponseUsageData);

        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReportStandareResponseUsageAsyncWithHttpInfo (string id, ReportStandareResponseUsageData reportStandareResponseUsageData);
        /// <summary>
        /// Search for standard responses based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SearchStandardResponsesAsync (LuceneSearchStandardResponseData luceneSearchStandardResponseData);

        /// <summary>
        /// Search for standard responses based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SearchStandardResponsesAsyncWithHttpInfo (LuceneSearchStandardResponseData luceneSearchStandardResponseData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StandardResponsesApi : IStandardResponsesApi
    {
        private Genesys.Internal.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StandardResponsesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StandardResponsesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StandardResponsesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StandardResponsesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Workspace.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a Standard Response to Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AddStandardResponseFavorite (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AddStandardResponseFavoriteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Standard Response to Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AddStandardResponseFavoriteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->AddStandardResponseFavorite");

            var localVarPath = "/ucs/responses/{id}/add-to-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardResponseFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Add a Standard Response to Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AddStandardResponseFavoriteAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AddStandardResponseFavoriteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a Standard Response to Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to add to Favorites</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AddStandardResponseFavoriteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->AddStandardResponseFavorite");

            var localVarPath = "/ucs/responses/{id}/add-to-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStandardResponseFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove all Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteAllStandardResponseFavorites ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteAllStandardResponseFavoritesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteAllStandardResponseFavoritesWithHttpInfo ()
        {

            var localVarPath = "/ucs/responses/remove-all-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllStandardResponseFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove all Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteAllStandardResponseFavoritesAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteAllStandardResponseFavoritesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove all Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteAllStandardResponseFavoritesAsyncWithHttpInfo ()
        {

            var localVarPath = "/ucs/responses/remove-all-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllStandardResponseFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove a Standard Response from Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteStandardResponseFavorite (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteStandardResponseFavoriteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a Standard Response from Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteStandardResponseFavoriteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->DeleteStandardResponseFavorite");

            var localVarPath = "/ucs/responses/{id}/remove-from-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardResponseFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove a Standard Response from Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteStandardResponseFavoriteAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteStandardResponseFavoriteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a Standard Response from Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response to remove from Favorites</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteStandardResponseFavoriteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->DeleteStandardResponseFavorite");

            var localVarPath = "/ucs/responses/{id}/remove-from-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStandardResponseFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the details of a Category. Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetCategoryDetails (string id, GetCategoryData getCategoryData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetCategoryDetailsWithHttpInfo(id, getCategoryData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a Category. Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetCategoryDetailsWithHttpInfo (string id, GetCategoryData getCategoryData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->GetCategoryDetails");
            // verify the required parameter 'getCategoryData' is set
            if (getCategoryData == null)
                throw new ApiException(400, "Missing required parameter 'getCategoryData' when calling StandardResponsesApi->GetCategoryDetails");

            var localVarPath = "/ucs/responses/categories/{id}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (getCategoryData != null && getCategoryData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getCategoryData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getCategoryData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the details of a Category. Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetCategoryDetailsAsync (string id, GetCategoryData getCategoryData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetCategoryDetailsAsyncWithHttpInfo(id, getCategoryData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a Category. Get details of a Category including category sub tree. Only &#39;id&#39;, &#39;standardResponseId&#39;, and &#39;name&#39; attributes are returned for each Standard Response.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Category</param>
        /// <param name="getCategoryData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetCategoryDetailsAsyncWithHttpInfo (string id, GetCategoryData getCategoryData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->GetCategoryDetails");
            // verify the required parameter 'getCategoryData' is set
            if (getCategoryData == null)
                throw new ApiException(400, "Missing required parameter 'getCategoryData' when calling StandardResponsesApi->GetCategoryDetails");

            var localVarPath = "/ucs/responses/categories/{id}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (getCategoryData != null && getCategoryData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getCategoryData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getCategoryData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get all Root categories. Get all Root Categories information.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetRootCategories (GetRootCategoriesData getRootCategoriesData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetRootCategoriesWithHttpInfo(getRootCategoriesData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Root categories. Get all Root Categories information.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetRootCategoriesWithHttpInfo (GetRootCategoriesData getRootCategoriesData = null)
        {

            var localVarPath = "/ucs/responses/categories/get-root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getRootCategoriesData != null && getRootCategoriesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getRootCategoriesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getRootCategoriesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get all Root categories. Get all Root Categories information.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetRootCategoriesAsync (GetRootCategoriesData getRootCategoriesData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetRootCategoriesAsyncWithHttpInfo(getRootCategoriesData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Root categories. Get all Root Categories information.
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getRootCategoriesData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetRootCategoriesAsyncWithHttpInfo (GetRootCategoriesData getRootCategoriesData = null)
        {

            var localVarPath = "/ucs/responses/categories/get-root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getRootCategoriesData != null && getRootCategoriesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getRootCategoriesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getRootCategoriesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the details of a Standard Response. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetStandardResponse (string id, GetStandardResponseData getStandardResponseData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetStandardResponseWithHttpInfo(id, getStandardResponseData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a Standard Response. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetStandardResponseWithHttpInfo (string id, GetStandardResponseData getStandardResponseData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->GetStandardResponse");
            // verify the required parameter 'getStandardResponseData' is set
            if (getStandardResponseData == null)
                throw new ApiException(400, "Missing required parameter 'getStandardResponseData' when calling StandardResponsesApi->GetStandardResponse");

            var localVarPath = "/ucs/responses/{id}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (getStandardResponseData != null && getStandardResponseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getStandardResponseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getStandardResponseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the details of a Standard Response. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetStandardResponseAsync (string id, GetStandardResponseData getStandardResponseData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetStandardResponseAsyncWithHttpInfo(id, getStandardResponseData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a Standard Response. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="getStandardResponseData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetStandardResponseAsyncWithHttpInfo (string id, GetStandardResponseData getStandardResponseData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->GetStandardResponse");
            // verify the required parameter 'getStandardResponseData' is set
            if (getStandardResponseData == null)
                throw new ApiException(400, "Missing required parameter 'getStandardResponseData' when calling StandardResponsesApi->GetStandardResponse");

            var localVarPath = "/ucs/responses/{id}/get-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (getStandardResponseData != null && getStandardResponseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getStandardResponseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getStandardResponseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get the attachment of the Standard Response Get the attachment of the Standard Response specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>string</returns>
        public string GetStandardResponseAttachment (string id, string documentId)
        {
             ApiResponse<string> localVarResponse = GetStandardResponseAttachmentWithHttpInfo(id, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the attachment of the Standard Response Get the attachment of the Standard Response specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetStandardResponseAttachmentWithHttpInfo (string id, string documentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->GetStandardResponseAttachment");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling StandardResponsesApi->GetStandardResponseAttachment");

            var localVarPath = "/ucs/responses/{id}/attachments/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardResponseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the attachment of the Standard Response Get the attachment of the Standard Response specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetStandardResponseAttachmentAsync (string id, string documentId)
        {
             ApiResponse<string> localVarResponse = await GetStandardResponseAttachmentAsyncWithHttpInfo(id, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the attachment of the Standard Response Get the attachment of the Standard Response specified in the documentId path parameter
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="documentId">id of document to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetStandardResponseAttachmentAsyncWithHttpInfo (string id, string documentId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->GetStandardResponseAttachment");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling StandardResponsesApi->GetStandardResponseAttachment");

            var localVarPath = "/ucs/responses/{id}/attachments/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardResponseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetStandardResponseFavorites ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetStandardResponseFavoritesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetStandardResponseFavoritesWithHttpInfo ()
        {

            var localVarPath = "/ucs/responses/get-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardResponseFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetStandardResponseFavoritesAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetStandardResponseFavoritesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Standard Response Favorites 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetStandardResponseFavoritesAsyncWithHttpInfo ()
        {

            var localVarPath = "/ucs/responses/get-favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStandardResponseFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse RenderStandardResponseFieldCodes (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RenderStandardResponseFieldCodesWithHttpInfo(id, renderStandardResponseFieldCodesData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RenderStandardResponseFieldCodesWithHttpInfo (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->RenderStandardResponseFieldCodes");
            // verify the required parameter 'renderStandardResponseFieldCodesData' is set
            if (renderStandardResponseFieldCodesData == null)
                throw new ApiException(400, "Missing required parameter 'renderStandardResponseFieldCodesData' when calling StandardResponsesApi->RenderStandardResponseFieldCodes");

            var localVarPath = "/ucs/responses/{id}/render-field-codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (renderStandardResponseFieldCodesData != null && renderStandardResponseFieldCodesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(renderStandardResponseFieldCodesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = renderStandardResponseFieldCodesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderStandardResponseFieldCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RenderStandardResponseFieldCodesAsync (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RenderStandardResponseFieldCodesAsyncWithHttpInfo(id, renderStandardResponseFieldCodesData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces generic field codes of the Standard Response content with their actual values. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="renderStandardResponseFieldCodesData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RenderStandardResponseFieldCodesAsyncWithHttpInfo (string id, RenderStandardResponseFieldCodesData renderStandardResponseFieldCodesData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->RenderStandardResponseFieldCodes");
            // verify the required parameter 'renderStandardResponseFieldCodesData' is set
            if (renderStandardResponseFieldCodesData == null)
                throw new ApiException(400, "Missing required parameter 'renderStandardResponseFieldCodesData' when calling StandardResponsesApi->RenderStandardResponseFieldCodes");

            var localVarPath = "/ucs/responses/{id}/render-field-codes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (renderStandardResponseFieldCodesData != null && renderStandardResponseFieldCodesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(renderStandardResponseFieldCodesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = renderStandardResponseFieldCodesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderStandardResponseFieldCodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ReportStandareResponseUsage (string id, ReportStandareResponseUsageData reportStandareResponseUsageData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReportStandareResponseUsageWithHttpInfo(id, reportStandareResponseUsageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReportStandareResponseUsageWithHttpInfo (string id, ReportStandareResponseUsageData reportStandareResponseUsageData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->ReportStandareResponseUsage");
            // verify the required parameter 'reportStandareResponseUsageData' is set
            if (reportStandareResponseUsageData == null)
                throw new ApiException(400, "Missing required parameter 'reportStandareResponseUsageData' when calling StandardResponsesApi->ReportStandareResponseUsage");

            var localVarPath = "/ucs/responses/{id}/report-usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reportStandareResponseUsageData != null && reportStandareResponseUsageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportStandareResponseUsageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportStandareResponseUsageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportStandareResponseUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReportStandareResponseUsageAsync (string id, ReportStandareResponseUsageData reportStandareResponseUsageData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReportStandareResponseUsageAsyncWithHttpInfo(id, reportStandareResponseUsageData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Specifies Usage of a Standard Response for an interaction. 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the Standard Response</param>
        /// <param name="reportStandareResponseUsageData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReportStandareResponseUsageAsyncWithHttpInfo (string id, ReportStandareResponseUsageData reportStandareResponseUsageData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StandardResponsesApi->ReportStandareResponseUsage");
            // verify the required parameter 'reportStandareResponseUsageData' is set
            if (reportStandareResponseUsageData == null)
                throw new ApiException(400, "Missing required parameter 'reportStandareResponseUsageData' when calling StandardResponsesApi->ReportStandareResponseUsage");

            var localVarPath = "/ucs/responses/{id}/report-usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reportStandareResponseUsageData != null && reportStandareResponseUsageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportStandareResponseUsageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportStandareResponseUsageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportStandareResponseUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Search for standard responses based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SearchStandardResponses (LuceneSearchStandardResponseData luceneSearchStandardResponseData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SearchStandardResponsesWithHttpInfo(luceneSearchStandardResponseData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for standard responses based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SearchStandardResponsesWithHttpInfo (LuceneSearchStandardResponseData luceneSearchStandardResponseData)
        {
            // verify the required parameter 'luceneSearchStandardResponseData' is set
            if (luceneSearchStandardResponseData == null)
                throw new ApiException(400, "Missing required parameter 'luceneSearchStandardResponseData' when calling StandardResponsesApi->SearchStandardResponses");

            var localVarPath = "/ucs/responses/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (luceneSearchStandardResponseData != null && luceneSearchStandardResponseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(luceneSearchStandardResponseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = luceneSearchStandardResponseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchStandardResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Search for standard responses based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SearchStandardResponsesAsync (LuceneSearchStandardResponseData luceneSearchStandardResponseData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SearchStandardResponsesAsyncWithHttpInfo(luceneSearchStandardResponseData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for standard responses based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Internal.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="luceneSearchStandardResponseData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SearchStandardResponsesAsyncWithHttpInfo (LuceneSearchStandardResponseData luceneSearchStandardResponseData)
        {
            // verify the required parameter 'luceneSearchStandardResponseData' is set
            if (luceneSearchStandardResponseData == null)
                throw new ApiException(400, "Missing required parameter 'luceneSearchStandardResponseData' when calling StandardResponsesApi->SearchStandardResponses");

            var localVarPath = "/ucs/responses/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (luceneSearchStandardResponseData != null && luceneSearchStandardResponseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(luceneSearchStandardResponseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = luceneSearchStandardResponseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchStandardResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
