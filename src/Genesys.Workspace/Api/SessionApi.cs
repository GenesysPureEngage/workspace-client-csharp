/* 
 * Workspace API
 *
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Workspace.Client;
using Genesys.Workspace.Model;

namespace Genesys.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate channels for the user with the specified resources
        /// </summary>
        /// <remarks>
        /// The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ActivateChannels (ChannelsData channelsData);

        /// <summary>
        /// Activate channels for the user with the specified resources
        /// </summary>
        /// <remarks>
        /// The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ActivateChannelsWithHttpInfo (ChannelsData channelsData);
        /// <summary>
        /// Get the business attribute hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetBusinessAttributeHierarchy (int? id);

        /// <summary>
        /// Get the business attribute hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetBusinessAttributeHierarchyWithHttpInfo (int? id);
        /// <summary>
        /// Read settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>ConfigResponse</returns>
        ConfigResponse GetConfiguration (string types = null);

        /// <summary>
        /// Read settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>ApiResponse of ConfigResponse</returns>
        ApiResponse<ConfigResponse> GetConfigurationWithHttpInfo (string types = null);
        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentUser</returns>
        CurrentUser GetCurrentUser ();

        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentUser</returns>
        ApiResponse<CurrentUser> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// login the specified user (HTTP session only)
        /// </summary>
        /// <remarks>
        /// The login request authenticates the user and creates the HTTP session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Login (LoginData loginData);

        /// <summary>
        /// login the specified user (HTTP session only)
        /// </summary>
        /// <remarks>
        /// The login request authenticates the user and creates the HTTP session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LoginWithHttpInfo (LoginData loginData);
        /// <summary>
        /// Logout of media and end the session
        /// </summary>
        /// <remarks>
        /// This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Logout ();

        /// <summary>
        /// Logout of media and end the session
        /// </summary>
        /// <remarks>
        /// This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LogoutWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate channels for the user with the specified resources
        /// </summary>
        /// <remarks>
        /// The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ActivateChannelsAsync (ChannelsData channelsData);

        /// <summary>
        /// Activate channels for the user with the specified resources
        /// </summary>
        /// <remarks>
        /// The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ActivateChannelsAsyncWithHttpInfo (ChannelsData channelsData);
        /// <summary>
        /// Get the business attribute hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetBusinessAttributeHierarchyAsync (int? id);

        /// <summary>
        /// Get the business attribute hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetBusinessAttributeHierarchyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Read settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>Task of ConfigResponse</returns>
        System.Threading.Tasks.Task<ConfigResponse> GetConfigurationAsync (string types = null);

        /// <summary>
        /// Read settings, action codes, business attributes and other configuration.
        /// </summary>
        /// <remarks>
        /// This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>Task of ApiResponse (ConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigResponse>> GetConfigurationAsyncWithHttpInfo (string types = null);
        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentUser</returns>
        System.Threading.Tasks.Task<CurrentUser> GetCurrentUserAsync ();

        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls
        /// </summary>
        /// <remarks>
        /// This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrentUser>> GetCurrentUserAsyncWithHttpInfo ();
        /// <summary>
        /// login the specified user (HTTP session only)
        /// </summary>
        /// <remarks>
        /// The login request authenticates the user and creates the HTTP session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LoginAsync (LoginData loginData);

        /// <summary>
        /// login the specified user (HTTP session only)
        /// </summary>
        /// <remarks>
        /// The login request authenticates the user and creates the HTTP session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LoginAsyncWithHttpInfo (LoginData loginData);
        /// <summary>
        /// Logout of media and end the session
        /// </summary>
        /// <remarks>
        /// This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAsync ();

        /// <summary>
        /// Logout of media and end the session
        /// </summary>
        /// <remarks>
        /// This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionApi : ISessionApi
    {
        private Genesys.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate channels for the user with the specified resources The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ActivateChannels (ChannelsData channelsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ActivateChannelsWithHttpInfo(channelsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate channels for the user with the specified resources The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ActivateChannelsWithHttpInfo (ChannelsData channelsData)
        {
            // verify the required parameter 'channelsData' is set
            if (channelsData == null)
                throw new ApiException(400, "Missing required parameter 'channelsData' when calling SessionApi->ActivateChannels");

            var localVarPath = "/activate-channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelsData != null && channelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(channelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Activate channels for the user with the specified resources The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ActivateChannelsAsync (ChannelsData channelsData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ActivateChannelsAsyncWithHttpInfo(channelsData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate channels for the user with the specified resources The activate-channels request is used to activate voice/media for the user by declaring the channels and resources that should be used. If the channels are is successfully activated, additional information about the state of active resources (dns, channels) will be received via events. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelsData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ActivateChannelsAsyncWithHttpInfo (ChannelsData channelsData)
        {
            // verify the required parameter 'channelsData' is set
            if (channelsData == null)
                throw new ApiException(400, "Missing required parameter 'channelsData' when calling SessionApi->ActivateChannels");

            var localVarPath = "/activate-channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelsData != null && channelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(channelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = channelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the business attribute hierarchy 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetBusinessAttributeHierarchy (int? id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetBusinessAttributeHierarchyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the business attribute hierarchy 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetBusinessAttributeHierarchyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->GetBusinessAttributeHierarchy");

            var localVarPath = "/configuration/business-attribute/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAttributeHierarchy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the business attribute hierarchy 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetBusinessAttributeHierarchyAsync (int? id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetBusinessAttributeHierarchyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the business attribute hierarchy 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the business attribute</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetBusinessAttributeHierarchyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->GetBusinessAttributeHierarchy");

            var localVarPath = "/configuration/business-attribute/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAttributeHierarchy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Read settings, action codes, business attributes and other configuration. This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>ConfigResponse</returns>
        public ConfigResponse GetConfiguration (string types = null)
        {
             ApiResponse<ConfigResponse> localVarResponse = GetConfigurationWithHttpInfo(types);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read settings, action codes, business attributes and other configuration. This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>ApiResponse of ConfigResponse</returns>
        public ApiResponse< ConfigResponse > GetConfigurationWithHttpInfo (string types = null)
        {

            var localVarPath = "/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (types != null) localVarQueryParams.Add("types", Configuration.ApiClient.ParameterToString(types)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfigResponse)));
            
        }

        /// <summary>
        /// Read settings, action codes, business attributes and other configuration. This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>Task of ConfigResponse</returns>
        public async System.Threading.Tasks.Task<ConfigResponse> GetConfigurationAsync (string types = null)
        {
             ApiResponse<ConfigResponse> localVarResponse = await GetConfigurationAsyncWithHttpInfo(types);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read settings, action codes, business attributes and other configuration. This request returns all necessary configuration items to be used by the UI. This includes action codes, business attributes, transactions and settings at the moment. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">An undercore delimited list of types used to specify what content should be returned. If not specified the default is  actionCodes, agentGroups, and settings. Valid values are actionCodes, agentGroups, settings, workspaceTransactions, and businessAttributes. (optional)</param>
        /// <returns>Task of ApiResponse (ConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfigResponse>> GetConfigurationAsyncWithHttpInfo (string types = null)
        {

            var localVarPath = "/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (types != null) localVarQueryParams.Add("types", Configuration.ApiClient.ParameterToString(types)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfigResponse)));
            
        }

        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentUser</returns>
        public CurrentUser GetCurrentUser ()
        {
             ApiResponse<CurrentUser> localVarResponse = GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentUser</returns>
        public ApiResponse< CurrentUser > GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/current-user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentUser)));
            
        }

        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentUser</returns>
        public async System.Threading.Tasks.Task<CurrentUser> GetCurrentUserAsync ()
        {
             ApiResponse<CurrentUser> localVarResponse = await GetCurrentUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read information about the logged in user including any existing media logins and calls This request can be used to retrieve information about the current user. This can be done at startup to check for an existing session. The returned user information includes state recovery information about the active session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CurrentUser>> GetCurrentUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/current-user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentUser)));
            
        }

        /// <summary>
        /// login the specified user (HTTP session only) The login request authenticates the user and creates the HTTP session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Login (LoginData loginData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LoginWithHttpInfo(loginData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// login the specified user (HTTP session only) The login request authenticates the user and creates the HTTP session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LoginWithHttpInfo (LoginData loginData)
        {
            // verify the required parameter 'loginData' is set
            if (loginData == null)
                throw new ApiException(400, "Missing required parameter 'loginData' when calling SessionApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loginData != null && loginData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loginData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// login the specified user (HTTP session only) The login request authenticates the user and creates the HTTP session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LoginAsync (LoginData loginData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LoginAsyncWithHttpInfo(loginData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// login the specified user (HTTP session only) The login request authenticates the user and creates the HTTP session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginData">Authentication Data</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LoginAsyncWithHttpInfo (LoginData loginData)
        {
            // verify the required parameter 'loginData' is set
            if (loginData == null)
                throw new ApiException(400, "Missing required parameter 'loginData' when calling SessionApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loginData != null && loginData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(loginData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Logout of media and end the session This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Logout ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LogoutWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout of media and end the session This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LogoutWithHttpInfo ()
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Logout of media and end the session This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LogoutAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout of media and end the session This request is used to end the user session. It will log the agent out for voice/channels, end the HTTP session and clean up related resources. The suggested shutdown sequence is to disconnect socket.io and then make this request. After ending the session the login request is required before making any new calls to the API. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAsyncWithHttpInfo ()
        {

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

    }
}
