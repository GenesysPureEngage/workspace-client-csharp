/* 
 * Workspace API
 *
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Workspace.Client;
using Genesys.Workspace.Model;

namespace Genesys.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoiceCallMonitoringApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StartMonitoring (Parameters20 parameters);

        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StartMonitoringWithHttpInfo (Parameters20 parameters);
        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StopMonitoring (Parameters21 parameters);

        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StopMonitoringWithHttpInfo (Parameters21 parameters);
        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToBargeIn (string id, Parameters24 parameters = null);

        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToBargeInWithHttpInfo (string id, Parameters24 parameters = null);
        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToCoaching (string id, Parameters23 parameters = null);

        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToCoachingWithHttpInfo (string id, Parameters23 parameters = null);
        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToListenIn (string id, Parameters22 parameters = null);

        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToListenInWithHttpInfo (string id, Parameters22 parameters = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StartMonitoringAsync (Parameters20 parameters);

        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartMonitoringAsyncWithHttpInfo (Parameters20 parameters);
        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StopMonitoringAsync (Parameters21 parameters);

        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopMonitoringAsyncWithHttpInfo (Parameters21 parameters);
        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToBargeInAsync (string id, Parameters24 parameters = null);

        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToBargeInAsyncWithHttpInfo (string id, Parameters24 parameters = null);
        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToCoachingAsync (string id, Parameters23 parameters = null);

        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToCoachingAsyncWithHttpInfo (string id, Parameters23 parameters = null);
        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToListenInAsync (string id, Parameters22 parameters = null);

        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToListenInAsyncWithHttpInfo (string id, Parameters22 parameters = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VoiceCallMonitoringApi : IVoiceCallMonitoringApi
    {
        private Genesys.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceCallMonitoringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoiceCallMonitoringApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceCallMonitoringApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VoiceCallMonitoringApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StartMonitoring (Parameters20 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StartMonitoringWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StartMonitoringWithHttpInfo (Parameters20 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling VoiceCallMonitoringApi->StartMonitoring");

            var localVarPath = "/voice/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StartMonitoringAsync (Parameters20 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StartMonitoringAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (deviceId to be monitored, operationMode (Monitor/Coach), monitoringMode (NextCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartMonitoringAsyncWithHttpInfo (Parameters20 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling VoiceCallMonitoringApi->StartMonitoring");

            var localVarPath = "/voice/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StopMonitoring (Parameters21 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StopMonitoringWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StopMonitoringWithHttpInfo (Parameters21 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling VoiceCallMonitoringApi->StopMonitoring");

            var localVarPath = "/voice/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StopMonitoringAsync (Parameters21 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StopMonitoringAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (deviceId to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopMonitoringAsyncWithHttpInfo (Parameters21 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling VoiceCallMonitoringApi->StopMonitoring");

            var localVarPath = "/voice/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToBargeIn (string id, Parameters24 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToBargeInWithHttpInfo(id, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToBargeInWithHttpInfo (string id, Parameters24 parameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceCallMonitoringApi->SwitchToBargeIn");

            var localVarPath = "/voice/calls/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToBargeInAsync (string id, Parameters24 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToBargeInAsyncWithHttpInfo(id, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToBargeInAsyncWithHttpInfo (string id, Parameters24 parameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceCallMonitoringApi->SwitchToBargeIn");

            var localVarPath = "/voice/calls/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToCoaching (string id, Parameters23 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToCoachingWithHttpInfo(id, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToCoachingWithHttpInfo (string id, Parameters23 parameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceCallMonitoringApi->SwitchToCoaching");

            var localVarPath = "/voice/calls/{id}/switch-to-coaching";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToCoaching", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToCoachingAsync (string id, Parameters23 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToCoachingAsyncWithHttpInfo(id, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToCoachingAsyncWithHttpInfo (string id, Parameters23 parameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceCallMonitoringApi->SwitchToCoaching");

            var localVarPath = "/voice/calls/{id}/switch-to-coaching";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToCoaching", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToListenIn (string id, Parameters22 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToListenInWithHttpInfo(id, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToListenInWithHttpInfo (string id, Parameters22 parameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceCallMonitoringApi->SwitchToListenIn");

            var localVarPath = "/voice/calls/{id}/switch-to-listen-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToListenIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToListenInAsync (string id, Parameters22 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToListenInAsyncWithHttpInfo(id, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToListenInAsyncWithHttpInfo (string id, Parameters22 parameters = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceCallMonitoringApi->SwitchToListenIn");

            var localVarPath = "/voice/calls/{id}/switch-to-listen-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToListenIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

    }
}
