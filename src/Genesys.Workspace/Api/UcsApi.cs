/* 
 * Workspace API
 *
 * Application API used by Workspace Web Edition
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Workspace.Client;
using Genesys.Workspace.Model;

namespace Genesys.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUcsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign the interaction to a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AssignInteractionToContact (Parameters38 parameters);

        /// <summary>
        /// Assign the interaction to a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AssignInteractionToContactWithHttpInfo (Parameters38 parameters);
        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CreateContact ();

        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CreateContactWithHttpInfo ();
        /// <summary>
        /// Delete an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteContact (Parameters29 parameters);

        /// <summary>
        /// Delete an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteContactWithHttpInfo (Parameters29 parameters);
        /// <summary>
        /// Find or create phone call in UCS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse FindOrCreatePhoneCall (Parameters33 parameters);

        /// <summary>
        /// Find or create phone call in UCS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> FindOrCreatePhoneCallWithHttpInfo (Parameters33 parameters);
        /// <summary>
        /// Get the history of interactions for the agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetAgentHistory (Parameters32 parameters = null);

        /// <summary>
        /// Get the history of interactions for the agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetAgentHistoryWithHttpInfo (Parameters32 parameters = null);
        /// <summary>
        /// Get the details of a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetContactDetails (Parameters30 parameters);

        /// <summary>
        /// Get the details of a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetContactDetailsWithHttpInfo (Parameters30 parameters);
        /// <summary>
        /// Get the history of interactions for a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetContactHistory (Parameters31 parameters);

        /// <summary>
        /// Get the history of interactions for a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetContactHistoryWithHttpInfo (Parameters31 parameters);
        /// <summary>
        /// Get contacts based on search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetContacts (Parameters27 parameters);

        /// <summary>
        /// Get contacts based on search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetContactsWithHttpInfo (Parameters27 parameters);
        /// <summary>
        /// Get the lucene indexes for ucs
        /// </summary>
        /// <remarks>
        /// This request returns all the lucene indexes for contact 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ConfigResponse</returns>
        ConfigResponse GetIndexProperties ();

        /// <summary>
        /// Get the lucene indexes for ucs
        /// </summary>
        /// <remarks>
        /// This request returns all the lucene indexes for contact 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ConfigResponse</returns>
        ApiResponse<ConfigResponse> GetIndexPropertiesWithHttpInfo ();
        /// <summary>
        /// Get the content of the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse GetInteractionContent (Parameters34 parameters);

        /// <summary>
        /// Get the content of the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> GetInteractionContentWithHttpInfo (Parameters34 parameters);
        /// <summary>
        /// Identify the contact for the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse IdentifyContact (Parameters37 parameters);

        /// <summary>
        /// Identify the contact for the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> IdentifyContactWithHttpInfo (Parameters37 parameters);
        /// <summary>
        /// Search for contacts based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LuceneSearch (Parameters25 parameters);

        /// <summary>
        /// Search for contacts based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LuceneSearchWithHttpInfo (Parameters25 parameters);
        /// <summary>
        /// Search for interactions based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LuceneSearchInteraction (Parameters26 parameters);

        /// <summary>
        /// Search for interactions based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LuceneSearchInteractionWithHttpInfo (Parameters26 parameters);
        /// <summary>
        /// Set the call as being completed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetCallCompleted (Parameters35 parameters);

        /// <summary>
        /// Set the call as being completed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetCallCompletedWithHttpInfo (Parameters35 parameters);
        /// <summary>
        /// Set the note for the call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetCallNote (Parameters36 parameters);

        /// <summary>
        /// Set the note for the call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetCallNoteWithHttpInfo (Parameters36 parameters);
        /// <summary>
        /// Update attributes of an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UpdateContact (Parameters28 parameters);

        /// <summary>
        /// Update attributes of an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UpdateContactWithHttpInfo (Parameters28 parameters);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign the interaction to a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AssignInteractionToContactAsync (Parameters38 parameters);

        /// <summary>
        /// Assign the interaction to a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AssignInteractionToContactAsyncWithHttpInfo (Parameters38 parameters);
        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CreateContactAsync ();

        /// <summary>
        /// Create a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CreateContactAsyncWithHttpInfo ();
        /// <summary>
        /// Delete an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteContactAsync (Parameters29 parameters);

        /// <summary>
        /// Delete an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteContactAsyncWithHttpInfo (Parameters29 parameters);
        /// <summary>
        /// Find or create phone call in UCS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> FindOrCreatePhoneCallAsync (Parameters33 parameters);

        /// <summary>
        /// Find or create phone call in UCS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> FindOrCreatePhoneCallAsyncWithHttpInfo (Parameters33 parameters);
        /// <summary>
        /// Get the history of interactions for the agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetAgentHistoryAsync (Parameters32 parameters = null);

        /// <summary>
        /// Get the history of interactions for the agent
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetAgentHistoryAsyncWithHttpInfo (Parameters32 parameters = null);
        /// <summary>
        /// Get the details of a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetContactDetailsAsync (Parameters30 parameters);

        /// <summary>
        /// Get the details of a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetContactDetailsAsyncWithHttpInfo (Parameters30 parameters);
        /// <summary>
        /// Get the history of interactions for a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetContactHistoryAsync (Parameters31 parameters);

        /// <summary>
        /// Get the history of interactions for a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetContactHistoryAsyncWithHttpInfo (Parameters31 parameters);
        /// <summary>
        /// Get contacts based on search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetContactsAsync (Parameters27 parameters);

        /// <summary>
        /// Get contacts based on search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetContactsAsyncWithHttpInfo (Parameters27 parameters);
        /// <summary>
        /// Get the lucene indexes for ucs
        /// </summary>
        /// <remarks>
        /// This request returns all the lucene indexes for contact 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ConfigResponse</returns>
        System.Threading.Tasks.Task<ConfigResponse> GetIndexPropertiesAsync ();

        /// <summary>
        /// Get the lucene indexes for ucs
        /// </summary>
        /// <remarks>
        /// This request returns all the lucene indexes for contact 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigResponse>> GetIndexPropertiesAsyncWithHttpInfo ();
        /// <summary>
        /// Get the content of the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> GetInteractionContentAsync (Parameters34 parameters);

        /// <summary>
        /// Get the content of the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetInteractionContentAsyncWithHttpInfo (Parameters34 parameters);
        /// <summary>
        /// Identify the contact for the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> IdentifyContactAsync (Parameters37 parameters);

        /// <summary>
        /// Identify the contact for the interaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> IdentifyContactAsyncWithHttpInfo (Parameters37 parameters);
        /// <summary>
        /// Search for contacts based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LuceneSearchAsync (Parameters25 parameters);

        /// <summary>
        /// Search for contacts based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LuceneSearchAsyncWithHttpInfo (Parameters25 parameters);
        /// <summary>
        /// Search for interactions based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LuceneSearchInteractionAsync (Parameters26 parameters);

        /// <summary>
        /// Search for interactions based on search query, using lucene search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LuceneSearchInteractionAsyncWithHttpInfo (Parameters26 parameters);
        /// <summary>
        /// Set the call as being completed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetCallCompletedAsync (Parameters35 parameters);

        /// <summary>
        /// Set the call as being completed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetCallCompletedAsyncWithHttpInfo (Parameters35 parameters);
        /// <summary>
        /// Set the note for the call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetCallNoteAsync (Parameters36 parameters);

        /// <summary>
        /// Set the note for the call
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetCallNoteAsyncWithHttpInfo (Parameters36 parameters);
        /// <summary>
        /// Update attributes of an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UpdateContactAsync (Parameters28 parameters);

        /// <summary>
        /// Update attributes of an existing contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateContactAsyncWithHttpInfo (Parameters28 parameters);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UcsApi : IUcsApi
    {
        private Genesys.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UcsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UcsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UcsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UcsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign the interaction to a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AssignInteractionToContact (Parameters38 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AssignInteractionToContactWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign the interaction to a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AssignInteractionToContactWithHttpInfo (Parameters38 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->AssignInteractionToContact");

            var localVarPath = "/ucs/assign-interaction-to-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignInteractionToContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Assign the interaction to a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AssignInteractionToContactAsync (Parameters38 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AssignInteractionToContactAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign the interaction to a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AssignInteractionToContactAsyncWithHttpInfo (Parameters38 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->AssignInteractionToContact");

            var localVarPath = "/ucs/assign-interaction-to-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignInteractionToContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Create a new contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CreateContact ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CreateContactWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CreateContactWithHttpInfo ()
        {

            var localVarPath = "/ucs/create-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Create a new contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CreateContactAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CreateContactAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CreateContactAsyncWithHttpInfo ()
        {

            var localVarPath = "/ucs/create-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Delete an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteContact (Parameters29 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteContactWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteContactWithHttpInfo (Parameters29 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->DeleteContact");

            var localVarPath = "/ucs/delete-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Delete an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteContactAsync (Parameters29 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteContactAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteContactAsyncWithHttpInfo (Parameters29 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->DeleteContact");

            var localVarPath = "/ucs/delete-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Find or create phone call in UCS 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse FindOrCreatePhoneCall (Parameters33 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = FindOrCreatePhoneCallWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find or create phone call in UCS 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > FindOrCreatePhoneCallWithHttpInfo (Parameters33 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->FindOrCreatePhoneCall");

            var localVarPath = "/ucs/find-or-create-phone-call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOrCreatePhoneCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Find or create phone call in UCS 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> FindOrCreatePhoneCallAsync (Parameters33 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await FindOrCreatePhoneCallAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find or create phone call in UCS 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> FindOrCreatePhoneCallAsyncWithHttpInfo (Parameters33 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->FindOrCreatePhoneCall");

            var localVarPath = "/ucs/find-or-create-phone-call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOrCreatePhoneCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the history of interactions for the agent 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetAgentHistory (Parameters32 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetAgentHistoryWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the history of interactions for the agent 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetAgentHistoryWithHttpInfo (Parameters32 parameters = null)
        {

            var localVarPath = "/ucs/get-agent-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the history of interactions for the agent 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetAgentHistoryAsync (Parameters32 parameters = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetAgentHistoryAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the history of interactions for the agent 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetAgentHistoryAsyncWithHttpInfo (Parameters32 parameters = null)
        {

            var localVarPath = "/ucs/get-agent-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgentHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the details of a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetContactDetails (Parameters30 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetContactDetailsWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetContactDetailsWithHttpInfo (Parameters30 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetContactDetails");

            var localVarPath = "/ucs/get-contact-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the details of a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetContactDetailsAsync (Parameters30 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetContactDetailsAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetContactDetailsAsyncWithHttpInfo (Parameters30 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetContactDetails");

            var localVarPath = "/ucs/get-contact-details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the history of interactions for a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetContactHistory (Parameters31 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetContactHistoryWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the history of interactions for a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetContactHistoryWithHttpInfo (Parameters31 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetContactHistory");

            var localVarPath = "/ucs/get-contact-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the history of interactions for a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetContactHistoryAsync (Parameters31 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetContactHistoryAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the history of interactions for a contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetContactHistoryAsyncWithHttpInfo (Parameters31 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetContactHistory");

            var localVarPath = "/ucs/get-contact-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get contacts based on search criteria. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetContacts (Parameters27 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetContactsWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contacts based on search criteria. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetContactsWithHttpInfo (Parameters27 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetContacts");

            var localVarPath = "/ucs/get-contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get contacts based on search criteria. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetContactsAsync (Parameters27 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetContactsAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contacts based on search criteria. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetContactsAsyncWithHttpInfo (Parameters27 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetContacts");

            var localVarPath = "/ucs/get-contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the lucene indexes for ucs This request returns all the lucene indexes for contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ConfigResponse</returns>
        public ConfigResponse GetIndexProperties ()
        {
             ApiResponse<ConfigResponse> localVarResponse = GetIndexPropertiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the lucene indexes for ucs This request returns all the lucene indexes for contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ConfigResponse</returns>
        public ApiResponse< ConfigResponse > GetIndexPropertiesWithHttpInfo ()
        {

            var localVarPath = "/ucs/get-index-properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndexProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfigResponse)));
            
        }

        /// <summary>
        /// Get the lucene indexes for ucs This request returns all the lucene indexes for contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ConfigResponse</returns>
        public async System.Threading.Tasks.Task<ConfigResponse> GetIndexPropertiesAsync ()
        {
             ApiResponse<ConfigResponse> localVarResponse = await GetIndexPropertiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the lucene indexes for ucs This request returns all the lucene indexes for contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConfigResponse>> GetIndexPropertiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/ucs/get-index-properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIndexProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConfigResponse)));
            
        }

        /// <summary>
        /// Get the content of the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse GetInteractionContent (Parameters34 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = GetInteractionContentWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content of the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > GetInteractionContentWithHttpInfo (Parameters34 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetInteractionContent");

            var localVarPath = "/ucs/get-interaction-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Get the content of the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> GetInteractionContentAsync (Parameters34 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await GetInteractionContentAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content of the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> GetInteractionContentAsyncWithHttpInfo (Parameters34 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->GetInteractionContent");

            var localVarPath = "/ucs/get-interaction-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInteractionContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Identify the contact for the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse IdentifyContact (Parameters37 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = IdentifyContactWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Identify the contact for the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > IdentifyContactWithHttpInfo (Parameters37 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->IdentifyContact");

            var localVarPath = "/ucs/identify-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IdentifyContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Identify the contact for the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> IdentifyContactAsync (Parameters37 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await IdentifyContactAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Identify the contact for the interaction 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> IdentifyContactAsyncWithHttpInfo (Parameters37 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->IdentifyContact");

            var localVarPath = "/ucs/identify-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IdentifyContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Search for contacts based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LuceneSearch (Parameters25 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LuceneSearchWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for contacts based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LuceneSearchWithHttpInfo (Parameters25 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->LuceneSearch");

            var localVarPath = "/ucs/lucene-search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LuceneSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Search for contacts based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LuceneSearchAsync (Parameters25 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LuceneSearchAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for contacts based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LuceneSearchAsyncWithHttpInfo (Parameters25 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->LuceneSearch");

            var localVarPath = "/ucs/lucene-search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LuceneSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Search for interactions based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LuceneSearchInteraction (Parameters26 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LuceneSearchInteractionWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for interactions based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LuceneSearchInteractionWithHttpInfo (Parameters26 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->LuceneSearchInteraction");

            var localVarPath = "/ucs/lucene-search-interaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LuceneSearchInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Search for interactions based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LuceneSearchInteractionAsync (Parameters26 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LuceneSearchInteractionAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for interactions based on search query, using lucene search 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LuceneSearchInteractionAsyncWithHttpInfo (Parameters26 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->LuceneSearchInteraction");

            var localVarPath = "/ucs/lucene-search-interaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LuceneSearchInteraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Set the call as being completed 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetCallCompleted (Parameters35 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetCallCompletedWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the call as being completed 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetCallCompletedWithHttpInfo (Parameters35 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->SetCallCompleted");

            var localVarPath = "/ucs/set-call-completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCallCompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Set the call as being completed 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetCallCompletedAsync (Parameters35 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetCallCompletedAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the call as being completed 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetCallCompletedAsyncWithHttpInfo (Parameters35 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->SetCallCompleted");

            var localVarPath = "/ucs/set-call-completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCallCompleted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Set the note for the call 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetCallNote (Parameters36 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetCallNoteWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the note for the call 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetCallNoteWithHttpInfo (Parameters36 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->SetCallNote");

            var localVarPath = "/ucs/set-call-note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCallNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Set the note for the call 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetCallNoteAsync (Parameters36 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetCallNoteAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the note for the call 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetCallNoteAsyncWithHttpInfo (Parameters36 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->SetCallNote");

            var localVarPath = "/ucs/set-call-note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCallNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Update attributes of an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UpdateContact (Parameters28 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UpdateContactWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update attributes of an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UpdateContactWithHttpInfo (Parameters28 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->UpdateContact");

            var localVarPath = "/ucs/update-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

        /// <summary>
        /// Update attributes of an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UpdateContactAsync (Parameters28 parameters)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UpdateContactAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update attributes of an existing contact 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateContactAsyncWithHttpInfo (Parameters28 parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling UcsApi->UpdateContact");

            var localVarPath = "/ucs/update-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
            
        }

    }
}
